<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Blog</title>
    <subtitle>Und grün des Theorie goldner Baum</subtitle>
    <link rel="self" type="application/atom+xml" href="https://longfangsong.github.io/en/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://longfangsong.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-10-26T21:35:48.241+00:00</updated>
    <id>https://longfangsong.github.io/en/atom.xml</id>
    <entry xml:lang="en">
        <title>Automata Theory • Büchi Automata</title>
        <published>2024-10-26T21:35:48.241+00:00</published>
        <updated>2024-10-26T21:35:48.241+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/automata-4/"/>
        <id>https://longfangsong.github.io/en/automata-4/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/automata-4/">&lt;h2 id=&quot;o-languages&quot;&gt;ω-Languages&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Let $Σ$ be a set of symbols (not necessarily finite).
Following the standard definition from formal language theory, $Σ*$ is the set of all finite words over $Σ$.
Every finite word has a length, which is a natural number.
Given a word w of length n, w can be viewed as a function from the set $\{0,1,...,n−1\} → Σ$,
with the value at i giving the symbol at position i.
The infinite words, or ω-words, can likewise be viewed as functions from $\mathbb{N}$ to $Σ$.
The set of all infinite words over $Σ$ is denoted $Σ^{\omega}$.
The set of all finite and infinite words over $Σ$ is sometimes written $Σ^{\infty}$ or $Σ^{\leq \omega}$.
—— &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Omega_language&quot;&gt;Wikipedia&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In simple terms, given an alphabet $Σ$, $Σ^{\omega}$ is the set of all &lt;strong&gt;infinite&lt;&#x2F;strong&gt; strings formed from it, and an ω-language over $Σ$ is a subset of this set.&lt;&#x2F;p&gt;
&lt;p&gt;For comparison: $\Sigma^*$ is all finite-length strings from alphabet $Σ$.&lt;&#x2F;p&gt;
&lt;p&gt;$$
Σ^{\infty} = \Sigma^* \cup \Sigma^{\omega}
$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;operations-on-o-languages&quot;&gt;Operations on ω-Languages&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;left-concatenation&quot;&gt;Left Concatenation&lt;&#x2F;h4&gt;
&lt;p&gt;$KL$, where K is a language containing only finite-length strings, and L is an ω-language, represents left concatenation of K to L, meaning for each string $k \in K$ and $l \in L$ there is a new string $kl \in KL$.&lt;&#x2F;p&gt;
&lt;p&gt;Note that right concatenation ($LK$) is meaningless, because $L$ is already an ω-language containing infinite-length strings, and adding finite-length strings after infinite-length strings makes no sense.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;omega&quot;&gt;$^\omega$&lt;&#x2F;h4&gt;
&lt;p&gt;$L^ω$ represents the language obtained by &quot;infinitely repeating&quot; all finite strings in language $L$.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;o-regular-languages&quot;&gt;ω-Regular Languages&lt;&#x2F;h3&gt;
&lt;p&gt;A language is an ω-regular language if it can be written as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$A^ω$, where $A$ is a regular language that doesn&#x27;t contain the empty string, or:&lt;&#x2F;li&gt;
&lt;li&gt;$A\cdot B$, where $A$ is a regular language and B is an ω-regular language&lt;&#x2F;li&gt;
&lt;li&gt;$A \cup B$, where both $A$ and $B$ are ω-regular languages, note that $\cup$ can only be performed finitely many times&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;o-regular-expressions&quot;&gt;ω-Regular Expressions&lt;&#x2F;h2&gt;
&lt;p&gt;$\cdot$, $|$&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; and $*$ have the same meanings in normal regular expressions.&lt;&#x2F;p&gt;
&lt;p&gt;However, in ω-regular expressions, we have a new operator $^{\omega}$, where $E^{\omega}$ means $E$ should be repeated infinitely many times.&lt;&#x2F;p&gt;
&lt;p&gt;For example, an ω-regular expression describing an infinite repeating binary decimal can be written as:&lt;&#x2F;p&gt;
&lt;p&gt;$$
(0|1)(0|1)*&#x27;.&#x27;(0|1)(0|1)*((0|1)*)^{\omega}
$$&lt;&#x2F;p&gt;
&lt;p&gt;where the final $((0|1)*)^{\omega}$ part represents the repeating section.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;buchi-automata&quot;&gt;Büchi Automata&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A deterministic Büchi automaton is a tuple A = (Q,Σ,δ,q0,F) that consists of the following components:&lt;br &#x2F;&gt;
Q is a finite set. The elements of Q are called the states of A.&lt;br &#x2F;&gt;
Σ is a finite set called the alphabet of A.&lt;br &#x2F;&gt;
δ: Q × Σ → Q is a function, called the transition function of A.&lt;br &#x2F;&gt;
q0 is an element of Q, called the initial state of A.&lt;br &#x2F;&gt;
F⊆Q is the acceptance condition. A accepts exactly those runs in which at least one of the infinitely often occurring states is in F.&lt;br &#x2F;&gt;
In a (non-deterministic) Büchi automaton, the transition function δ is replaced with a transition relation Δ that returns a set of states, and the single initial state q0 is replaced by a set I of initial states.&lt;br &#x2F;&gt;
—— &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;B%C3%BCchi_automaton&quot;&gt;Wikipedia&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Basically, Büchi automata and finite automata &quot;look the same&quot;, with the only difference being:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Finite automata must stop in an accepting state after the input is &quot;exhausted&quot; to accept the input string, while Büchi automata require the input string to enter an accepting state &quot;infinitely many times&quot;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Note: The deterministic and non-deterministic versions of Büchi automata are not equivalent. Deterministic Büchi automata are strictly weaker than their non-deterministic counterparts, while non-deterministic Büchi automata can recognize all ω-regular expressions.&lt;&#x2F;p&gt;
&lt;p&gt;Example: $(0|1)*0^\omega$ can be recognized by the following non-deterministic Büchi automaton, but cannot be accepted by a deterministic Büchi automaton.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;upload.wikimedia.org&#x2F;wikipedia&#x2F;commons&#x2F;0&#x2F;02&#x2F;Buchi_non_deterministic_example.svg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;o-regular-expressions-rightarrow-buchi-automata&quot;&gt;ω-Regular Expressions $\rightarrow$ Büchi Automata&lt;&#x2F;h2&gt;
&lt;p&gt;Inductively, we need to consider 3 cases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Top-level ω-regular expression of the form $A^ω$.
In this case, $A$ must be a regular expression, which we can convert to a non-deterministic finite automaton (NFA).
Then, for all accepting states of this NFA, add a transition arrow to each successor of A&#x27;s initial state, with the transition character being the character on the arrow from the initial state to that successor, as shown:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-4&#x2F;A-to-Aw.svg&quot; alt=&quot;A-to-A-w&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve only drawn one accepting state, but there can be multiple accepting states, each following the pattern of $a_0$ in the diagram, connecting back to each successor of the entry.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Top-level ω-regular expression of the form $A\cdot B$.
In this case, $A$ must be a regular expression which we can convert to an NFA, while $B$ must be an ω-regular expression that can be (recursively) converted to a Büchi automaton using our current algorithm.
Then, downgrade A&#x27;s accepting states to normal states and directly connect them to each successor of B&#x27;s initial state, as shown:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-4&#x2F;A-B.svg&quot; alt=&quot;A-B&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-4&#x2F;AB.svg&quot; alt=&quot;AB&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Top-level ω-regular expression of the form $A | B$.
Where both $A$ and $B$ are ω-regular expressions that can be (recursively) converted to Büchi automata using our current algorithm.
In this case, simply merge the initial states of $A$ and $B$.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-4&#x2F;A%7CB.svg&quot; alt=&quot;A|B&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-4&#x2F;A%7C%7CB.svg&quot; alt=&quot;A||B&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;&#x2F;h3&gt;
&lt;p&gt;Provided by the Formal Methods example exam, in our course $|$ is written as $+$.&lt;&#x2F;p&gt;
&lt;p&gt;$$
a(b^ω + cc*ab^ω)
$$&lt;&#x2F;p&gt;
&lt;p&gt;The top level is of the form $A\cdot B$, where $A \rightarrow a$, $B \rightarrow b^ω + cc*ab^ω$.&lt;&#x2F;p&gt;
&lt;p&gt;We can first complete the NFA part of $a$.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-4&#x2F;a-%3Eunexp.svg&quot; alt=&quot;A-&amp;gt;unexp&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Continue expanding $b^ω + cc*ab^ω$, where the top level is $+$.&lt;&#x2F;p&gt;
&lt;p&gt;Expand into two parts:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-4&#x2F;a-%3Eunexp12.svg&quot; alt=&quot;a-&amp;gt;unexp12&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;First consider the $b^\omega$ part, of the form $A^ω$, where $A \rightarrow b$, which can be expanded directly.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-4&#x2F;a-%3Eb*%7Ca-%3Eunexp2.svg&quot; alt=&quot;a-&amp;gt;b*|a-&amp;gt;unexp2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The $cc*ab^ω$ part is of the form $AB$, where $A \rightarrow cc*a$, $B \rightarrow b^\omega$.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-4&#x2F;a-%3Eb*%7Ca-%3Ecc*a-%3Eunexp2.svg&quot; alt=&quot;a-&amp;gt;b*|a-&amp;gt;cc*a-&amp;gt;unexp2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Finally expand $b^\omega$.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-4&#x2F;full-expanded.svg&quot; alt=&quot;full-expanded&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And we get the final result.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;buchi-automata-rightarrow-o-regular-expressions&quot;&gt;Büchi Automata $\rightarrow$ ω-Regular Expressions&lt;&#x2F;h2&gt;
&lt;p&gt;From the process of converting ω-regular expressions to Büchi automata above, we can see that all ω-regular expressions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;May be of the form $A^ω$, corresponding to loops containing accepting states&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; in the Büchi automaton graph.&lt;&#x2F;li&gt;
&lt;li&gt;May be of the form $AB$, corresponding to:
&lt;ul&gt;
&lt;li&gt;A &quot;path&quot; $q_{start} \to q_{k}$ starting from the initial state $q_{start}$, not containing accepting state $q_{k}$, where $q_{k}$ is an accepting state.&lt;&#x2F;li&gt;
&lt;li&gt;$q_{k}$ is in a loop&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;May be of the form $A|B$, corresponding to both $A$ and $B$ having at least one loop containing an accepting state.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So, to convert a Büchi automaton back to an ω-regular expression, we need to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Identify all loops containing accepting states $q_k$ and convert these subgraphs to regular expressions $L_k$.&lt;&#x2F;li&gt;
&lt;li&gt;Identify all paths from the initial state $q_{start}$ to $q_k$ (without passing through $q_k$) and convert these subgraphs to regular expressions $R_{0k}$.&lt;&#x2F;li&gt;
&lt;li&gt;The desired ω-regular expression is $\Sigma_k^{0\le k&amp;lt;\text{accept state count}}(R_{0k}\cdot L_{k})$.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;example-1&quot;&gt;Example&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-4&#x2F;am-full.svg&quot; alt=&quot;am-full&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For accepting state $q_1$:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Its cycle:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-4&#x2F;bw.svg&quot; alt=&quot;am-full&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Corresponding regex is $b$&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Path from initial state $e$ to $q_1$:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-4&#x2F;e-to-q1.svg&quot; alt=&quot;e-to-q1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Corresponding regex is: $((bc*a)|a)*c$.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Therefore this branch&#x27;s ω-regular expression is $((bc*a)|a)*c(b^\omega)$.&lt;&#x2F;p&gt;
&lt;p&gt;For accepting state $q_2$:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Its cycle:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-4&#x2F;complex-w.svg&quot; alt=&quot;complex-w&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Corresponding regex is: $(c*)|(aa*b)$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Path from initial state $e$ to $q_2$:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-4&#x2F;e-to-q2.svg&quot; alt=&quot;e-to-q2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Corresponding regex is: $a*b$.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Therefore this branch&#x27;s ω-regular expression is $a*b ((c*)|(aa*b))^\omega$.&lt;&#x2F;p&gt;
&lt;p&gt;Combining both branches, the overall ω-regular expression is $(((bc*a)|a)*c(b^\omega)) | (a*b ((c*)|(aa*b))^\omega)$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;archive.model.in.tum.de&#x2F;um&#x2F;courses&#x2F;auto&#x2F;ws1213&#x2F;slides1213&#x2F;omega-automata-powerpoint.pdf&quot;&gt;Slide from TUM&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Sometimes written as $+$, $\cup$ or even $\uplus$ - mathematicians&#x2F;computer scientists really should standardize their notation!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;I mention Büchi automata here because it was covered in our Formal Methods course, but there are actually many types of automata that can handle ω-languages, see &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;%CE%A9-automaton&quot;&gt;Wikipedia&lt;&#x2F;a&gt;, among which Rabin automata are probably the most interesting.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;A more accurate term would be &quot;strongly connected component&quot;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;Could also be $b*$, though $(b*)^\omega \equiv b^\omega$.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Automata Theory • Pushdown Automata</title>
        <published>2024-01-07T21:59:57.903+00:00</published>
        <updated>2024-01-07T21:59:57.903+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/automata-3/"/>
        <id>https://longfangsong.github.io/en/automata-3/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/automata-3/">&lt;h2 id=&quot;context-free-grammar&quot;&gt;Context-Free Grammar&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;what-regular-languages-cannot-do&quot;&gt;What Regular Languages Cannot Do&lt;&#x2F;h3&gt;
&lt;p&gt;For the following grammar:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;A → 0A1
&lt;&#x2F;span&gt;&lt;span&gt;A → B
&lt;&#x2F;span&gt;&lt;span&gt;B → #
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is impossible to write a regular expression (or construct a finite automaton) that can recognize the language of this grammar.&lt;&#x2F;p&gt;
&lt;p&gt;This grammar is a context-free grammar that cannot be &lt;a href=&quot;https:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E9%80%80%E5%8C%96_(%E6%95%B8%E5%AD%B8)&quot;&gt;reduced&lt;&#x2F;a&gt; to a regular grammar.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;formal-definition-of-context-free-grammar&quot;&gt;Formal Definition of Context-Free Grammar&lt;&#x2F;h3&gt;
&lt;p&gt;A context-free grammar is defined by the following 4-tuple $(V, T, R, S)$ where:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;V is the set of variables&lt;&#x2F;li&gt;
&lt;li&gt;T is the set of terminals&lt;&#x2F;li&gt;
&lt;li&gt;R is the set of grammar rules (&lt;code&gt;A → 0A1&lt;&#x2F;code&gt; etc.)&lt;&#x2F;li&gt;
&lt;li&gt;S is the start variable, representing the whole language&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;pushdown-automata&quot;&gt;Pushdown Automata&lt;&#x2F;h2&gt;
&lt;p&gt;Similar to how finite state machines can recognize regular grammars, context-free grammars can be recognized by a type of state machine.&lt;&#x2F;p&gt;
&lt;p&gt;Looking at the grammar above, we can see that it generates a language where &quot;there are equal numbers of 0s and 1s on either side of #&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;We can push a 0 onto a stack when we &quot;see&quot; a 0, and pop when we see a 1. If the stack can be emptied at the end, then the string conforms to this grammar.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;formal-definition-of-pushdown-automata&quot;&gt;Formal Definition of Pushdown Automata&lt;&#x2F;h3&gt;
&lt;p&gt;A pushdown automaton is defined by the following 6-tuple $(Q, \Sigma, S, \delta, q_0, F)$ where:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Q is the set of states&lt;&#x2F;li&gt;
&lt;li&gt;$\Sigma$ is the input alphabet&lt;&#x2F;li&gt;
&lt;li&gt;S is the stack alphabet&lt;&#x2F;li&gt;
&lt;li&gt;$\delta$ is the transition function, which takes a state, an input symbol and a stack top symbol (which can be empty) as parameters, outputs a new state and a new stack top symbol, representing the new state and stack operation when the machine receives certain input in a certain state with a certain stack top symbol. A &lt;code&gt;(state, input symbol, stack top symbol)&lt;&#x2F;code&gt; may correspond to multiple outputs&lt;&#x2F;li&gt;
&lt;li&gt;$q_0$ is the start state&lt;&#x2F;li&gt;
&lt;li&gt;F is the set of final or accepting states&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;constructing-a-pushdown-automaton-to-recognize-a-context-free-grammar&quot;&gt;Constructing a Pushdown Automaton to Recognize a Context-Free Grammar&lt;&#x2F;h2&gt;
&lt;p&gt;The simplest method is to ignore states and keep only one state $q_0$, with all transitions happening on the stack.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;For all variables A and their derivations A → X, regardless of whether X is a non-terminal (variable), terminal or any formula, we add a stack symbol representing X and define the value of $\delta$ at point A: $\delta(q, ε, A) := (q, X)$&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;For all terminals b, we define the value of $\delta$ at point b: $\delta(q, ε, b) := (q, ε)$.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If the resulting automaton can empty its stack, it means it can accept this language.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;deterministic-pushdown-automata-and-deterministic-context-free-grammar&quot;&gt;Deterministic Pushdown Automata and Deterministic Context-Free Grammar&lt;&#x2F;h2&gt;
&lt;p&gt;There exists a subset of pushdown automata where in their transition functions, a &lt;code&gt;(state, input symbol, stack top symbol)&lt;&#x2F;code&gt; corresponds to only one output - these are called deterministic pushdown automata, and the grammars they can recognize are called deterministic context-free grammars.&lt;&#x2F;p&gt;
&lt;p&gt;This type of pushdown automata only needs to scan the input string once to determine if it can be accepted, indicating that parsing such grammars has linear complexity, which makes these grammars (especially several of their subsets) very important in the practical engineering of various parsers.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;determining-if-a-grammar-is-deterministic&quot;&gt;Determining if a Grammar is Deterministic&lt;&#x2F;h3&gt;
&lt;p&gt;The determination method is called the DK-test. When studying LR(0) analysis, we learned how to construct &lt;a href=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;lr0&#x2F;#lr-0-xiang-zhuang-tai-chan-sheng-shi-zhong-de-cdot-yu-lr-0-zhuang-tai-ji&quot;&gt;LR(0) state machines&lt;&#x2F;a&gt;, which should actually be called DK state machines.&lt;&#x2F;p&gt;
&lt;p&gt;If in this DK state machine, the states corresponding to accepting states in the original grammar:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Have one and only one production representing a completed match (i.e., ⋅ is at the end of the production)&lt;&#x2F;li&gt;
&lt;li&gt;None of the productions are of the form $B → X ⋅ a Y$, where a is a terminal&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Then the grammar is deterministic, and any deterministic grammar can pass this DK-test.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;X may not be a &quot;letter&quot;, but you can assign a letter from the stack alphabet as a substitute for each X.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>HoTT Notes 12</title>
        <published>2023-12-05T19:48:23.856+00:00</published>
        <updated>2023-12-05T19:48:23.856+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/hott-12/"/>
        <id>https://longfangsong.github.io/en/hott-12/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/hott-12/">&lt;h2 id=&quot;equivalence-relations&quot;&gt;Equivalence relations&lt;&#x2F;h2&gt;
&lt;p&gt;We have seen many observational equal types, we can abstract them, ie, for a binary relation $R$ on $A$: $R : A → A → Prop_\mathcal{U}$.&lt;&#x2F;p&gt;
&lt;p&gt;If R is reflexive, symmetric and transitive, then it is an equivalence relation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;equivalence-classes&quot;&gt;Equivalence classes&lt;&#x2F;h2&gt;
&lt;p&gt;We can divide $A$ into equivalence classes, ie, for an equivalence relation $R$ on $A$, a subtype $P : A → Prop_\mathcal{U}$ is called an equivalence class if there merely exists $x : A$ such that for all $b : A$ we have $R(a,b) ≃ P(b)$.&lt;&#x2F;p&gt;
&lt;p&gt;$$
is-equiv-class(P) := ∃&lt;em&gt;{x:A}∀&lt;&#x2F;em&gt;{b:A} R(x,b) ≃ P(b)
$$&lt;&#x2F;p&gt;
&lt;p&gt;We define equivalence class of $x : A$ to be:&lt;&#x2F;p&gt;
&lt;p&gt;$$
[x]_R := R(x, _)
$$&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>HoTT Notes 11</title>
        <published>2023-12-01T10:28:15.149+00:00</published>
        <updated>2023-12-01T10:28:15.149+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/hott-11/"/>
        <id>https://longfangsong.github.io/en/hott-11/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/hott-11/">&lt;h2 id=&quot;morphism&quot;&gt;Morphism&lt;&#x2F;h2&gt;
&lt;iframe class=&quot;quiver-embed&quot; src=&quot;https:&#x2F;&#x2F;q.uiver.app&#x2F;#q=WzAsMyxbMCwwLCJBIl0sWzIsMCwiQiJdLFsxLDIsIkMiXSxbMCwyLCJmIl0sWzEsMiwiZyIsMl0sWzAsMSwiaCIsMl0sWzMsNCwiIiwwLHsib2Zmc2V0IjotMSwic2hvcnRlbiI6eyJzb3VyY2UiOjMwLCJ0YXJnZXQiOjMwfX1dXQ==&amp;embed&quot; width=&quot;432&quot; height=&quot;432&quot; style=&quot;border-radius: 8px; border: none;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;We define the type $A$ morphism from $f$ to $g$ over $X$ as:&lt;&#x2F;p&gt;
&lt;p&gt;$$
hom_X(f, g) := Σ_{(h:A → B)} f \sim g ∘ h
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
(h, H) : hom_X(f, g)
$$&lt;&#x2F;p&gt;
&lt;iframe class=&quot;quiver-embed&quot; src=&quot;https:&#x2F;&#x2F;q.uiver.app&#x2F;#q=WzAsNixbMCwwLCJBIl0sWzMsMCwiQiJdLFs2LDAsIkMiXSxbMywzLCJYIl0sWzIsMSwiSCJdLFs0LDEsIksiXSxbMCwzLCJmIiwyXSxbMSwzLCJnIiwyXSxbMiwzLCJpIl0sWzAsMSwiaCJdLFsxLDIsImsiXV0=&amp;embed&quot; width=&quot;944&quot; height=&quot;560&quot; style=&quot;border-radius: 8px; border: none;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;We define composition of morphisms as:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{align}
(k, K) ∘ (h, H) &amp;amp; : hom_X(f, i) \\
(k, K) ∘ (h, H) &amp;amp; := (k ∘ h, H ⋅ (K ⋅ h))
\end{align}
$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;universal-property-of-the-image&quot;&gt;Universal property of the image&lt;&#x2F;h3&gt;
&lt;iframe class=&quot;quiver-embed&quot; src=&quot;https:&#x2F;&#x2F;q.uiver.app&#x2F;#q=WzAsNSxbMCwwLCJBIl0sWzMsMCwiSSJdLFs2LDAsIkIiXSxbMywzLCJYIl0sWzIsMSwiSCJdLFswLDMsImYiLDJdLFsxLDMsImkiLDJdLFsyLDMsIm0iLDAseyJzdHlsZSI6eyJ0YWlsIjp7Im5hbWUiOiJob29rIiwic2lkZSI6InRvcCJ9fX1dLFswLDEsInEiXSxbMSwyXV0=&amp;embed&quot; width=&quot;944&quot; height=&quot;560&quot; style=&quot;border-radius: 8px; border: none;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;We say i satisfies the universal property of the image of f if:&lt;&#x2F;p&gt;
&lt;p&gt;$$
-∘(q,H) : hom_X(i, m) → hom_X(f, m)
$$&lt;&#x2F;p&gt;
&lt;p&gt;is an equivalence for every imbedding $m : B ↪ X$.&lt;&#x2F;p&gt;
&lt;p&gt;For any $f : A → X$ and $m : B ↪ X$, $hom_X(f, m)$ is a proposition.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;image&quot;&gt;Image&lt;&#x2F;h2&gt;
&lt;p&gt;The image of a map $f : A → X$ is a type which contains all $X$ which $f$ can map to, paired with the evidence that its preimage exists:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{im}(f) := Σ_{(x:X)}||fib_f(x)||
$$&lt;&#x2F;p&gt;
&lt;p&gt;$\text{im}(f)$ is an embedding.&lt;&#x2F;p&gt;
&lt;p&gt;We can drop the evidence to get the &quot;proof-irreverent&quot; image part:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{align}
i_f &amp;amp;: \text{im}(f) → X \\
i_f &amp;amp;:= proj_1
\end{align}
$$&lt;&#x2F;p&gt;
&lt;p&gt;We can provide an element of $A$ and get the corresponding image of $f$:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{align}
q_f &amp;amp;: A → \text{im}(f) \\
q_f &amp;amp;:= (f(x), 𝜂(x , refl_{f(x)}))
\end{align}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Where $𝜂$ is the unit truncation function.&lt;&#x2F;p&gt;
&lt;p&gt;And $f \sim i_f ◦ q_f$, we call this homotopy $I_f$.&lt;&#x2F;p&gt;
&lt;iframe class=&quot;quiver-embed&quot; src=&quot;https:&#x2F;&#x2F;q.uiver.app&#x2F;#q=WzAsMyxbMCwwLCJBIl0sWzQsMCwiXFx0ZXh0e2ltfShmKSJdLFsyLDMsIlgiXSxbMCwxLCJxX2YiXSxbMCwyLCJmIiwyXSxbMSwyLCJpX2YiLDAseyJzdHlsZSI6eyJ0YWlsIjp7Im5hbWUiOiJob29rIiwic2lkZSI6InRvcCJ9fX1dXQ==&amp;embed&quot; width=&quot;702&quot; height=&quot;560&quot; style=&quot;border-radius: 8px; border: none;&quot;&gt;&lt;&#x2F;iframe&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>HoTT Notes 10</title>
        <published>2023-11-27T09:17:28.205+00:00</published>
        <updated>2023-11-27T09:17:28.205+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/hott-10/"/>
        <id>https://longfangsong.github.io/en/hott-10/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/hott-10/">&lt;p&gt;Not all types are (mere) propositions, but we can &quot;make&quot; them so by truncation, ie. forgetting all the structure of the type except whether it is inhabited.&lt;&#x2F;p&gt;
&lt;p&gt;Let $A$ be a type and $f : A \to P$ be a map into a proposition $P$. If for every proposition $Q$:&lt;&#x2F;p&gt;
&lt;p&gt;$$
-∘f : (P \to Q) \to (A \to Q)
$$&lt;&#x2F;p&gt;
&lt;p&gt;is an equivalence.&lt;&#x2F;p&gt;
&lt;p&gt;This property is called the universal property of the propositional truncation of $A$.&lt;&#x2F;p&gt;
&lt;p&gt;The basic idea is $-∘f$ &quot;lowers&quot; the relationship between propositions between $P$ and $Q$ to the relationship between $A$ and $P$.&lt;&#x2F;p&gt;
&lt;p&gt;We can also push it further to set truncation, and even k-truncation.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>HoTT Summary</title>
        <published>2023-11-19T19:57:59.556+00:00</published>
        <updated>2023-11-19T19:57:59.556+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/hott-summary/"/>
        <id>https://longfangsong.github.io/en/hott-summary/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/hott-summary/">&lt;h2 id=&quot;syntax-table&quot;&gt;Syntax table&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Syntax&lt;&#x2F;th&gt;&lt;th&gt;Read as&lt;&#x2F;th&gt;&lt;th&gt;Meaning&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;$x \mapsto b(x)$&lt;&#x2F;td&gt;&lt;td&gt;$x$ maps to $b(x)$&lt;&#x2F;td&gt;&lt;td&gt;$\lambda x . b(x)$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;$f \sim g$&lt;&#x2F;td&gt;&lt;td&gt;$f$ is homotopy to $g$&lt;&#x2F;td&gt;&lt;td&gt;$\Pi_{(x:A)}f(x) = g(x)$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;$A ≃ B$&lt;&#x2F;td&gt;&lt;td&gt;$A$ is equivalence to $B$&lt;&#x2F;td&gt;&lt;td&gt;$\Sigma_{(f:A→B)}\text{is-equiv}(f)$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;$p^{-1}$&lt;&#x2F;td&gt;&lt;td&gt;inverse of path $p$&lt;&#x2F;td&gt;&lt;td&gt;$(\Pi_{(x,y:A)} (x = y) → (y = x))(p)$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;$A ↪ B$&lt;&#x2F;td&gt;&lt;td&gt;$A$ is embedding to $B$&lt;&#x2F;td&gt;&lt;td&gt;$Σ_{(f : A → B)} \text{is-emb}(f)$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;$A ≅ B$&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;isomorphisms of (semi)groups from $A$ to $B$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;$A&#x2F;B$&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;$Σ_{(P:A→Prop)}is-equivalence-class(P)$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;definitions&quot;&gt;Definitions&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;equals&quot;&gt;Equals&lt;&#x2F;h3&gt;
&lt;!-- #### Type, Term, Universe, Dependent type &amp; Type family

TODO --&gt;
&lt;h4 id=&quot;judgemental-equal&quot;&gt;Judgemental equal&lt;&#x2F;h4&gt;
&lt;p&gt;Basically idea is &quot;equal according to the definition&quot; or &quot;equal in terms of semantics.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;eg. $2 \doteq 2$, $2 \doteq suc(suc(0))$.&lt;&#x2F;p&gt;
&lt;p&gt;In general, the only thing &quot;judgmental equal&quot; is based on is some certain assumptions (postulates). The most common ones include &quot;everything being judgmentally equal to itself&quot;,
&quot;everything being judgmentally equal to its definition&quot;, and the calculation rules on $\Pi$ (I will write the final conclusion only, please complete the deduction tree on your own):&lt;&#x2F;p&gt;
&lt;p&gt;$$
(\lambda y.b(y))(x) \doteq b(x) : B(x)
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\lambda x.f(x) \doteq f : \Pi_{(x:A)} B(x)
$$&lt;&#x2F;p&gt;
&lt;p&gt;are examples of forming &quot;judgmental equal&quot; using certain assumed rules.&lt;&#x2F;p&gt;
&lt;p&gt;The symbol $\doteq$ possesses &lt;code&gt;trans&lt;&#x2F;code&gt; and &lt;code&gt;sym&lt;&#x2F;code&gt; properties.&lt;&#x2F;p&gt;
&lt;p&gt;In Agda, anything that can be automatically &quot;converted&quot; by the type checker is judgmentally equal. For instance, you can replace a function $f$ with $\lambda x . f(x)$ in a context that expects the former, and the type checker won&#x27;t complain because they are judgmentally equal.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;propositional-equal-identity-type&quot;&gt;Propositional equal&#x2F;identity type&lt;&#x2F;h4&gt;
&lt;p&gt;Due to the many restrictions of judgmental equality, such as in the definition of natural numbers below, where we cannot prove $add(0, n) \doteq n$, it becomes necessary to introduce propositional equality.&lt;&#x2F;p&gt;
&lt;p&gt;According to the Curry-Howard correspondence, the proposition that two values are equal can be translated into a type, known as the propositional equal type or identity type.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s important to note that the identity type we define is associated with a specific point. For instance, given $a : A$, we can define $a =_A x$ as the identity type of type $A$ at the point $a$, which is a type dependent on $x$ (can be written as $Id_a(x)\ type$).&lt;&#x2F;p&gt;
&lt;p&gt;The identity type possesses &lt;code&gt;trans&lt;&#x2F;code&gt; and &lt;code&gt;sym&lt;&#x2F;code&gt; properties.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;observational-equal&quot;&gt;Observational equal&lt;&#x2F;h4&gt;
&lt;p&gt;Simply defining the identity type allows us to express the notion of &quot;two things being equal.&quot; Currently, we only have one way to &quot;construct&quot; an item of the identity type, which is $refl_x : x = x$, but clearly, this is not sufficient.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes, we can define a binary relation on a type and then map $R(x, y)$ to either $\top$ or $⊥$, using this relation to construct the identity type.&lt;&#x2F;p&gt;
&lt;p&gt;For example, for natural numbers, we can define a binary relation $\text{Eq-N}$:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{Eq-N} : N → N → Set
$$
$$
\begin{align}
\text{Eq-N}&amp;amp;(&amp;amp;0      &amp;amp;,&amp;amp; 0         &amp;amp;)&amp;amp; &amp;amp; := ⊤ \\
\text{Eq-N}&amp;amp;(&amp;amp;0      &amp;amp;,&amp;amp; suc(n)    &amp;amp;)&amp;amp; &amp;amp; := ⊥ \\
\text{Eq-N}&amp;amp;(&amp;amp;suc(n) &amp;amp;,&amp;amp; 0     &amp;amp;)&amp;amp; &amp;amp; := ⊥ \\
\text{Eq-N}&amp;amp;(&amp;amp;suc(m) &amp;amp;,&amp;amp; suc(n)&amp;amp;)&amp;amp; &amp;amp; := \text{Eq-N}(m, n)
\end{align}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Then associate this relation with the identity type:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{Eq-N-refl}: (n : N) → \text{Eq-N}(n, n)
$$
$$
\begin{align}
\text{Eq-N-refl} &amp;amp;(&amp;amp;zero  &amp;amp;)&amp;amp; &amp;amp; := tt \\
\text{Eq-N-refl} &amp;amp;(&amp;amp;suc(n)&amp;amp;)&amp;amp; &amp;amp; := \text{Eq-N-refl}(n)
\end{align}
$$
$$
\text{identity-to-Eq-N} : (x : N) → (y : N) → x ≡ y → \text{Eq-N}(x,y)
$$
$$
\begin{align}
\text{identity-to-Eq-N}(x,x,refl_x) &amp;amp; := \text{Eq-N-refl}(x) &amp;amp;
\end{align}
$$
$$
\text{Eq-N-to-identity} : (x : N) → (y : N) → \text{Eq-N}(x,y) → x ≡ y
$$
$$
\begin{align}
\text{Eq-N-to-identity} &amp;amp;(&amp;amp;0     &amp;amp;,&amp;amp;      0&amp;amp;,&amp;amp; eqnxy)                 &amp;amp; := refl \\
\text{Eq-N-to-identity} &amp;amp;(&amp;amp;suc(x)&amp;amp;,&amp;amp; suc(y)&amp;amp;,&amp;amp; eqnxy)   &amp;amp; := cong(suc,\text{Eq-N-to-identity}(x,y,eqnxy))
\end{align}
$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;induction&quot;&gt;Induction&lt;&#x2F;h3&gt;
&lt;p&gt;It defines a base case satisfying certain properties and then specifies rules for deducing the next case based on a given case. This allows the deduction that all cases satisfy the specified property.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some examples mentioned in the book:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;natural-numbers&quot;&gt;Natural numbers&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;base case: $p_0 : P(0)$&lt;&#x2F;li&gt;
&lt;li&gt;inductive case: $p_s : \Pi_{(n : \mathbb{N})} P(n) \rightarrow P(suc(n))$&lt;&#x2F;li&gt;
&lt;li&gt;induction: $ind_{\mathbb{N}}(p_0, p_s) : \Pi_{(n : \mathbb{N})} P(n)$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Where $P$ represents the property that the parameter possesses.&lt;&#x2F;p&gt;
&lt;p&gt;Through $ind_{\mathbb{N}}$, we can define addition:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;base case: $p_0 := m$&lt;&#x2F;li&gt;
&lt;li&gt;inductive case: $p_s := \lambda n . suc(n)$&lt;&#x2F;li&gt;
&lt;li&gt;induction: $add(m, \underline{}) := ind_{\mathbb{N}}(p_0, p_s)$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Therefore, according to the definition of add, we can obtain:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$add(m, 0) \doteq m$ is a judgmental equal.&lt;&#x2F;li&gt;
&lt;li&gt;$add(m, suc(n)) \doteq suc(add(m, n))$ is a judgmental equal.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;However, we cannot deduce $add(0, n) \doteq n$, which is a limitation of judgmental equality.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;unit-type&quot;&gt;unit type (⊤)&lt;&#x2F;h4&gt;
&lt;p&gt;A type with only one term.&lt;&#x2F;p&gt;
&lt;p&gt;$$
ind_\top: P_{tt} → \Pi_{(x : \top)} P(x)
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
ind_\top(p, tt) := p
$$&lt;&#x2F;p&gt;
&lt;h4 id=&quot;empty-type&quot;&gt;empty type (⊥)&lt;&#x2F;h4&gt;
&lt;p&gt;A type with no terms.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\bot\text{-elim} := ind_\bot : \bot → A
$$&lt;&#x2F;p&gt;
&lt;h4 id=&quot;sum-coproduct-type&quot;&gt;Sum&#x2F;Coproduct type&lt;&#x2F;h4&gt;
&lt;p&gt;$$
ind_+ : (\Pi_{(x:A)} P(inj_1(x))) → (\Pi_{(y:B)} P(inj_2(y))) → (\Pi_{(z:A⊎B)} P(z))
$$
where
$$
ind_+(f, g , inj_1(x)) := f(x)
$$
$$
ind_+(f, g , inj_2(y)) := g(x)
$$&lt;&#x2F;p&gt;
&lt;h4 id=&quot;pair-type-s-type&quot;&gt;pair type &#x2F; Σ type&lt;&#x2F;h4&gt;
&lt;p&gt;$$
ind_\Sigma : (\Pi_{(x : A)} \Pi_{(y : B(x))} P(x, y)) → \Pi_{(z : Σ_{(x : A)} B(x))} P(z)
$$
$$
ind_\Sigma(g, (x, y)) := g(x, y)
$$&lt;&#x2F;p&gt;
&lt;p&gt;Of course, we can define a special case where type B does not depend on type A, namely, product types:&lt;&#x2F;p&gt;
&lt;p&gt;$$
ind_\times : (\Pi_{(x : A)} \Pi_{(y : B)} P(x , y)) → \Pi_{(z : A \times B)} P(z)
$$
$$
ind_\times(g, (x, y)) := g(x, y)
$$&lt;&#x2F;p&gt;
&lt;h4 id=&quot;propositional-equal-type-identity-type-path-type&quot;&gt;Propositional equal type &#x2F; identity type &#x2F; Path type&lt;&#x2F;h4&gt;
&lt;p&gt;$$
ind_{=_a} : P(a, refl_a) \rightarrow (\Pi_{(x : A)} \Pi_{(p:a=x)} P(x, p))
$$
$$
ind_{=_a}(u, a, refl_a) := u, \text{where}\ u : P(a, refl_a)
$$&lt;&#x2F;p&gt;
&lt;p&gt;Essentially, if a certain property holds for $(a, refl_a)$, then it holds for any $(x, p)$ (where $p$ is evidence that $a = x$, also called a path from $a$ to $x$).&lt;&#x2F;p&gt;
&lt;p&gt;This is also known as path induction.&lt;&#x2F;p&gt;
&lt;p&gt;Again, please note that here $a$ is fixed.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;homotopy&quot;&gt;Homotopy&lt;&#x2F;h4&gt;
&lt;p&gt;$$
ind_{htpy} : (\Pi_{(g: \Pi_{(x:A)}B(x))}\Pi_{(H: f \sim g)}P(g,H)) → P(f, \text{refl-htpy}_f)
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
ind_{htpy}(s, f, \text{refl-htpy}_f) := s(f, \text{refl-htpy}_f)
$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fiber&quot;&gt;fiber&lt;&#x2F;h3&gt;
&lt;p&gt;$$
fib_f(b) := \Sigma_{(a : A)} f(a) = b
$$&lt;&#x2F;p&gt;
&lt;p&gt;Corresponding to the preimage of $b$ under $f$.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;properties-of-types-functions&quot;&gt;Properties of types&#x2F;functions&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;is-empty&quot;&gt;is-empty&lt;&#x2F;h3&gt;
&lt;p&gt;$$
\text{is-empty}(A) := A → \bot
$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sec-retr&quot;&gt;sec&#x2F;retr&lt;&#x2F;h3&gt;
&lt;p&gt;Assuming $f : A → B$, &lt;code&gt;sec&lt;&#x2F;code&gt; denotes the existence of a right inverse for the function.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{sec}(f) := \Pi_{(g:B→A)} f ∘ g \sim id
$$&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;retr&lt;&#x2F;code&gt; denotes the existence of a left inverse for the function.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{retr}(f) := \Pi_{(h:B→A)} h ∘ f \sim id
$$&lt;&#x2F;p&gt;
&lt;p&gt;The reason &lt;code&gt;retr&lt;&#x2F;code&gt; is called &lt;code&gt;retr&lt;&#x2F;code&gt; is that $h$ may only map a subset of B back to A. In this case, we say A is a retraction of B.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;is-equiv&quot;&gt;is-equiv&lt;&#x2F;h3&gt;
&lt;p&gt;$$
\text{is-equiv}(f) := sec(f) \times retr(f)
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{is-equiv}(f) := \Sigma_{(g : B → A)} (f \circ g = id_B) \times (g \circ f = id_A)
$$&lt;&#x2F;p&gt;
&lt;p&gt;It is the concept of &quot;bijection&quot; in type theory.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;is-contr&quot;&gt;is-contr&lt;&#x2F;h3&gt;
&lt;p&gt;$$
\text{is-contr}(A) := \Sigma_{(c : A)} \Pi_{(x : A)} c = x
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{is-contr}(f) := \Pi_{(b : B)} \text{is-contr}(fib_f(b))
$$&lt;&#x2F;p&gt;
&lt;p&gt;We call $f$ a contractible map.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{is-contr}(f) ↔ \text{is-equiv}(f)
$$&lt;&#x2F;p&gt;
&lt;h4 id=&quot;important-contractible-types&quot;&gt;Important contractible types&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;$⊤$&lt;&#x2F;li&gt;
&lt;li&gt;$⊥$&lt;&#x2F;li&gt;
&lt;li&gt;$Σ_{(x:A)} a = x$&lt;&#x2F;li&gt;
&lt;li&gt;Product of contractible types is contractible&lt;&#x2F;li&gt;
&lt;li&gt;A map is an equivalence if and only if its fibers are contractible&lt;&#x2F;li&gt;
&lt;li&gt;Observational equal on $ℕ$, $Bool$ and coproduct type, ie. $Eq-ℕ n m$. with one of n and m fixed by $\Sigma$, ie. $\Sigma_{(n:N)} Eq-N(m,n)$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;is-coh-invertible&quot;&gt;is-coh-invertible&lt;&#x2F;h3&gt;
&lt;p&gt;For a function $f : A \rightarrow B$, if it is an equivalence with its inverse being $g$, where the evidence for $g$ being a right inverse is homotopy $G$, and the evidence for $g$ being a left inverse is homotopy $H$, and there exists a homotopy $K : G \cdot f \sim f \cdot H$, we refer to $f$ as a coherently invertible map.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{is-coh-invertible}(f) := \Sigma_{(g : B → A)} \Sigma_{(G : f \circ g \sim id_B)} \Sigma_{(H : g \circ f \sim id_A)} \Sigma_{(K : G \cdot f \sim f \cdot H)} (g, G, H, K)
$$&lt;&#x2F;p&gt;
&lt;p&gt;Any coherently invertible map is a contractible map.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;is-emb&quot;&gt;is-emb&lt;&#x2F;h3&gt;
&lt;p&gt;$$
\text{is-emb}(f) := (x, y : A) → \text{is-equiv}(cong\ f\ \{x\}\ \{y\})
$$&lt;&#x2F;p&gt;
&lt;p&gt;It is the concept of &quot;injection&quot; in type theory.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;important-embeddings&quot;&gt;Important embeddings&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;For a subtype $B$ of $A$, $\text{is-emb}(proj_1)$ is inhabited, ie. $(a , b) = (a&#x27; , b&#x27;) ≃ a = a&#x27;$ where $(a , b)$ and $(a , b) : Σ_{(a : A)} B(a)$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;is-surj&quot;&gt;is-surj&lt;&#x2F;h3&gt;
&lt;p&gt;$$
\text{is-surj}(f) := \Pi_{(b : B)} ||fib_f(b)||
$$&lt;&#x2F;p&gt;
&lt;p&gt;$\text{is-surj}(f) × \text{is-emb}(f) ↔ is-equiv(f)$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;is-prop&quot;&gt;is-prop&lt;&#x2F;h3&gt;
&lt;p&gt;$$
\text{is-prop}(A) := \Pi_{(x,y : A)} \text{is-contr}(x = y)
$$&lt;&#x2F;p&gt;
&lt;h4 id=&quot;important-props&quot;&gt;Important props&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Everything is contractible type is a prop.&lt;&#x2F;li&gt;
&lt;li&gt;If $A$ is a prop, $A ≃ B$, then $B$ is a prop. And vice versa, all props are equivalent to each other.s&lt;&#x2F;li&gt;
&lt;li&gt;Observational equal on $ℕ$ and Bool, ie. $Eq-ℕ n m$. Since it is equivalent to identity type on these types, identity type on these types is also a prop.&lt;&#x2F;li&gt;
&lt;li&gt;A product of props is a prop.&lt;&#x2F;li&gt;
&lt;li&gt;Given a prop A and $\text{is-subtype}(B)$ of A, then $\text{is-prop}(Σ_{(x:A)} B(x))$&lt;&#x2F;li&gt;
&lt;li&gt;$\text{is-emb}$, $\text{is-surj}$ and $\text{is-equiv}$.&lt;&#x2F;li&gt;
&lt;li&gt;$\text{is-prop}(A)$ itself is a prop.&lt;&#x2F;li&gt;
&lt;li&gt;Given a prop B, $A → B$ is a prop, a special case is, the negation of a type ($\neg A$) is a prop.&lt;&#x2F;li&gt;
&lt;li&gt;$\text{is-unital}(G)$, $\text{is-group}(G)$, for any semigroup $G$.&lt;&#x2F;li&gt;
&lt;li&gt;A map $f : A → B$ is an embedding if and only if its fibers are propositions.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;is-subtype&quot;&gt;is-subtype&lt;&#x2F;h3&gt;
&lt;p&gt;$$
is-subtype(B) := (x : A) → is-prop (B x)
$$&lt;&#x2F;p&gt;
&lt;p&gt;We say $B$ is a subtype of $A$.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;is-set&quot;&gt;is-set&lt;&#x2F;h3&gt;
&lt;p&gt;$$
\text{is-set}(A) := \Pi_{(x,y : A)} \text{is-prop}(x = y)
$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;is-trunc-k&quot;&gt;is-trunc-k&lt;&#x2F;h3&gt;
&lt;p&gt;$$
\begin{align}
\text{is-trunc}_{-2}(A) &amp;amp; :=  \text{is-contr}(A) \\
\text{is-trunc}_{k+1}(A) &amp;amp; := \Pi_{(x,y:A)}\text{is-trunc}_k(x = y)
\end{align}
$$&lt;&#x2F;p&gt;
&lt;p&gt;a map $f : A → B$ is k-truncated if its fibers are k-truncated.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;is-weakly-constant&quot;&gt;is-weakly-constant&lt;&#x2F;h3&gt;
&lt;p&gt;$$
\text{is-weakly-constant}(f) := (x,y : A) → f(x) = f(y)
$$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;universal-properties&quot;&gt;Universal properties&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;coproduct-disjunction&quot;&gt;Coproduct&#x2F;Disjunction&lt;&#x2F;h3&gt;
&lt;p&gt;$$
((A ∨ B) → X) ≃ ((A + B) → X) ≃ (A → X) \times (B → X)
$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;s-type-existential&quot;&gt;$Σ$ type&#x2F;Existential&lt;&#x2F;h3&gt;
&lt;p&gt;$$
((∃&lt;em&gt;{(x:A)} B(x)) → X) ≃ ((Σ&lt;&#x2F;em&gt;{(x:A)} B(x)) → X) ≃ (\Pi_{(x:A)} (B(x) → X))
$$&lt;&#x2F;p&gt;
&lt;p&gt;or when $B$ does not depend on $A$:&lt;&#x2F;p&gt;
&lt;p&gt;$$
((A \times B) → X) ≃ (A → (B → X))
$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;identity-type&quot;&gt;Identity type&lt;&#x2F;h3&gt;
&lt;p&gt;$$
(\Pi_{(x:A)}(a = x) → B(x)) ≃ B(a)
$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;propositional-truncation&quot;&gt;Propositional truncation&lt;&#x2F;h3&gt;
&lt;p&gt;$$
(P → Q) ≃ (A → Q)
$$&lt;&#x2F;p&gt;
&lt;p&gt;where $P$ and $Q$ are propositions, $f : A → P$ is a propositional truncation of $A$.&lt;&#x2F;p&gt;
&lt;p&gt;Propositional truncation is a functor.&lt;&#x2F;p&gt;
&lt;p&gt;$$
||–|| : (𝐴 → 𝐵) → (||𝐴|| → ||𝐵||)
$$&lt;&#x2F;p&gt;
&lt;p&gt;So here are some examples we have:
$$
||id|| ∼ id
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
||𝑔 ◦ 𝑓|| ∼ ||𝑔|| ◦ ||𝑓||
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
||𝑥 = 𝑦|| ↔ || y = x ||
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
|| x = y || → || y = z || → || x = z ||
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
||𝐴 × 𝐵|| ≃ ||𝐴|| × ||𝐵||
$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;image&quot;&gt;image&lt;&#x2F;h3&gt;
&lt;iframe class=&quot;quiver-embed&quot; src=&quot;https:&#x2F;&#x2F;q.uiver.app&#x2F;#q=WzAsNSxbMCwwLCJBIl0sWzMsMCwiSSJdLFs2LDAsIkIiXSxbMywzLCJYIl0sWzIsMSwiSCJdLFswLDMsImYiLDJdLFsxLDMsImkiLDJdLFsyLDMsIm0iLDAseyJzdHlsZSI6eyJ0YWlsIjp7Im5hbWUiOiJob29rIiwic2lkZSI6InRvcCJ9fX1dLFswLDEsInEiXSxbMSwyXV0=&amp;embed&quot; width=&quot;944&quot; height=&quot;560&quot; style=&quot;border-radius: 8px; border: none;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;$$
hom_X(i, m) ≃ hom_X(f, m)
$$&lt;&#x2F;p&gt;
&lt;p&gt;where $m$ is an embedding.&lt;&#x2F;p&gt;
&lt;p&gt;We say $i$ satisfies the universal property of the image of $f$.&lt;&#x2F;p&gt;
&lt;p&gt;Holds when $f$ is surjective.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;surjective-map&quot;&gt;surjective map&lt;&#x2F;h3&gt;
&lt;p&gt;$$
(\Pi_{(y:B)} P(y)) ≃ (\Pi_{(x:A)} P(f(x)))
$$&lt;&#x2F;p&gt;
&lt;p&gt;holds when $f$ is surjective.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;embedding-surjective-equivalence&quot;&gt;embedding + surjective = equivalence&lt;&#x2F;h3&gt;
&lt;p&gt;$$
\text{is-surj}(f) × \text{is-emb}(f) ≃ is-equiv(f)
$$&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>HoTT Notes 9</title>
        <published>2023-11-18T23:52:57.590+00:00</published>
        <updated>2023-11-18T23:52:57.590+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/hott-9/"/>
        <id>https://longfangsong.github.io/en/hott-9/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/hott-9/">&lt;p&gt;The function extensionality axiom asserts that identifications of functions are equivalent to homotopies between them.&lt;&#x2F;p&gt;
&lt;p&gt;These are equivalent definitions of function extensionality:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The function extensionality principle holds at $f$, where $f, g : \Pi_{(x: A)}B(x)$, the family of maps:
$$
\begin{align}
\text{identity-to-htpy}         &amp;amp;: (f = g) \to (f \sim g) \\
\text{identity-to-htpy}(refl_f) &amp;amp;:= \text{refl-htpy}_f \\
\end{align}
$$
is a family of equivalence.&lt;&#x2F;li&gt;
&lt;li&gt;The total space, $\Sigma_{(g: \Pi_{(x: A)}B(x))} f \sim g$ is contractible.&lt;&#x2F;li&gt;
&lt;li&gt;The principle of homotopy induction:
$$
s \mapsto s(f, \text{refl-htpy}_f) : (\Pi_{(g: \Pi_{(x: A)}B(x))} \Pi_{(H: f \sim g)} P(g, H)) \to P(f, \text{refl-htpy}_f)
$$
has a section.&lt;&#x2F;li&gt;
&lt;li&gt;The weak function extensionality principle: for each $A$, and $B(x)$ over $A$:
$$
(\Pi_{(x:A)}\text{is-contr}(B(x))) \to \text{is-contr}(\Pi_{(x:A)}B(x))
$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;universal-properties&quot;&gt;Universal properties&lt;&#x2F;h2&gt;
&lt;p&gt;Universal properties are characterizations of all maps out of or into a given type.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some examples:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-universal-property-of-s-types&quot;&gt;The universal property of Σ-types&lt;&#x2F;h3&gt;
&lt;p&gt;$$
\begin{align}
\text{ev-pair} &amp;amp;:&amp;amp; (\Pi_{(z: \Sigma_{(x:A)}B(x))} C(z)) &amp;amp; \to &amp;amp; \Pi_{(x:A)}(\Pi_{(y:B(x))} &amp;amp;\to&amp;amp; C(x,y)) \\
\text{ev-pair} &amp;amp;:=&amp;amp; f &amp;amp;\mapsto&amp;amp; λx. λy &amp;amp;.&amp;amp; f((x, y))
\end{align}
$$&lt;&#x2F;p&gt;
&lt;p&gt;and its inverse is obtained by the induction principle of Σ-types.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{ind}_\Sigma : (\Pi_{(x : A)} \Pi_{(y : B(x))} C(x, y)) → \Pi_{(z : Σ_{(x : A)} B(x))} C (z)
$$&lt;&#x2F;p&gt;
&lt;p&gt;It characterizes maps out of a dependent pair type $\Sigma_{(x: A)}B(x)$.&lt;&#x2F;p&gt;
&lt;p&gt;Proof of this principle needs function extensionality, to show $ind_Σ ∘ \text{ev-pair} \sim id$.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-universal-property-of-identity-types&quot;&gt;The universal property of identity types&lt;&#x2F;h3&gt;
&lt;p&gt;$$
\begin{align}
\text{ev-refl} &amp;amp;:&amp;amp; (\Pi_{(x:A)} (x = a) \to B(x)) &amp;amp; \to &amp;amp; B(a) \\
\text{ev-pair} &amp;amp;:=&amp;amp; f &amp;amp;\mapsto&amp;amp; f(a, refl_a)
\end{align}
$$&lt;&#x2F;p&gt;
&lt;p&gt;and its inverse is obtained by the induction principle of identity types.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{ind}_{=_a} : B(a, refl_a) \to \Pi_{(x:A)} \Pi_{(p:x = a)} B(x, p)
$$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;composing-with-equivalences&quot;&gt;Composing with equivalences&lt;&#x2F;h2&gt;
&lt;p&gt;For any $f : A → B$, these are equivalent:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$f$ is an equivalence.&lt;&#x2F;li&gt;
&lt;li&gt;For any $P$ over $B$:
$$
\begin{align}
(&amp;amp;\Pi_{(y:B)} P&amp;amp;(y)) &amp;amp;\to&amp;amp; (&amp;amp;\Pi_{(x:A)} P&amp;amp;(&amp;amp;f&amp;amp;(x))) \\
&amp;amp;h&amp;amp; &amp;amp;\mapsto&amp;amp; &amp;amp;h&amp;amp; ∘ &amp;amp;f&amp;amp;
\end{align}
$$&lt;&#x2F;li&gt;
&lt;li&gt;For any $X$:
$$
\begin{align}
(B → X) &amp;amp;\to&amp;amp; (A → X) \\
g &amp;amp;\mapsto&amp;amp; g ∘ f
\end{align}
$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>HoTT Notes 8</title>
        <published>2023-11-18T23:51:57.590+00:00</published>
        <updated>2023-11-18T23:51:57.590+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/hott-8/"/>
        <id>https://longfangsong.github.io/en/hott-8/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/hott-8/">&lt;h2 id=&quot;proposition-h-proposition&quot;&gt;Proposition&#x2F;h-Proposition&lt;&#x2F;h2&gt;
&lt;p&gt;A type $A$ is said to be a proposition if its identity types are contractible:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{is-prop}(A) := \Pi_{(x,y : A)} \text{is-contr}(x = y)
$$&lt;&#x2F;p&gt;
&lt;p&gt;Some equivalent definitions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\text{is-prop}(A) := \Pi_{(x,y : A)} x = y$. This means iff every pair of elements on $A$ are equal.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;$\text{is-prop}(A) := A \rightarrow \text{is-contr}(A)$. This means iff A is not empty, and it is contractible, then it is a proposition.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;$\text{const}_{\text{tt}} : A → ⊤$ is an embedding. This means iff A can be mapped to the unit type &quot;injectivly&quot;, then it is a proposition.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The reason why we call it a (h-)proposition is that, in first-order logic, we don&#x27;t have any way to distinguish between any two proofs of the same proposition. In here HoTT case, a proposition is a type (which corresponds to a set theory proposition) that either is empty, or contractable (ie. all of its elements, which correspond to proofs are equal).&lt;&#x2F;p&gt;
&lt;p&gt;In Agda:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prop &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x y &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prop&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prop&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x y &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prop&amp;#39;&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prop&amp;#39;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prop&amp;#39;&amp;#39;&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prop&amp;#39;&amp;#39;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emb&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tt&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;h-set&quot;&gt;(h-)Set&lt;&#x2F;h2&gt;
&lt;p&gt;A type $A$ is said to be a set if its identity types are propositions:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{is-set}(A) := \Pi_{(x,y : A)} \text{is-prop}(x = y)
$$&lt;&#x2F;p&gt;
&lt;p&gt;An equivalent definition is the type $A$ satisfies axiom K:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{is-set}(A) := \Pi_{(x : A)} \Pi_{(p : x = x)} \text{refl}_x = p
$$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;general-truncation-levels&quot;&gt;General truncation levels&lt;&#x2F;h2&gt;
&lt;p&gt;We define $\text{is-contr}(A)$ as the bottom level of the truncation hierarchy, and $\text{is-prop}(A)$ as the first, $\text{is-set}(A)$ as the second, and so on.&lt;&#x2F;p&gt;
&lt;p&gt;For some reason we want to make &lt;strong&gt;set&lt;&#x2F;strong&gt; to be the 0 level, thus $\text{is-contr}(A)$ is level -2 and $\text{is-prop}(A)$ is level -1.&lt;&#x2F;p&gt;
&lt;p&gt;So we define the truncation level of a type $A$ as:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{align}
\text{is-trunc}&lt;em&gt;{-2}(A) &amp;amp;:=&amp;amp; \text{is-contr}(A)
\text{is-trunc}&lt;&#x2F;em&gt;{k+1}(A) &amp;amp;:=&amp;amp; \Pi_{(x,y:A)}\text{is-trunc}_k(x = y)
\end{align}
$$&lt;&#x2F;p&gt;
&lt;p&gt;In Agda:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;data 𝕋 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set where
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;two&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;succ&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋 &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;one&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;one&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;succ&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;two&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zero&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zero&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;succ&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;one&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trunc &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;k &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trunc neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;two&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋 A &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trunc&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;succ&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x y &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trunc k&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prop&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;one&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trunc &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trunc neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;one&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋 A
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prop&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;one&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trunc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zero&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trunc &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trunc zero&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;𝕋 A
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zero&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trunc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>HoTT Notes 7</title>
        <published>2023-11-16T13:15:22.372+00:00</published>
        <updated>2023-11-16T13:15:22.372+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/hott-7/"/>
        <id>https://longfangsong.github.io/en/hott-7/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/hott-7/">&lt;h2 id=&quot;families-of-equivalences&quot;&gt;Families of equivalences&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;tot-function&quot;&gt;tot function&lt;&#x2F;h3&gt;
&lt;p&gt;For a family of maps:&lt;&#x2F;p&gt;
&lt;p&gt;$$
f : \Pi_{(x:A)} B(x) \rightarrow C(x)
$$&lt;&#x2F;p&gt;
&lt;p&gt;We define a map $tot$:&lt;&#x2F;p&gt;
&lt;p&gt;$$
tot(f) : \Sigma_{(x:A)} B(x) \rightarrow \Sigma_{(x:A)} C(x)
$$
$$
tot(f) := \lambda (x, y). (x , f(x, y))
$$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tot &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;C &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} → ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;C &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;) → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ A B &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ A C&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tot f&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f x y
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;image src=&quot;.&#x2F;tot.png&quot; width=&quot;250&quot;&gt;&lt;&#x2F;image&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Given a map $f : A → B$, and a family of maps:&lt;&#x2F;p&gt;
&lt;p&gt;$$
g : \Pi_{(x:A)} C(x) \rightarrow D(f(x))
$$&lt;&#x2F;p&gt;
&lt;p&gt;where C is a type family over A, and D is a type family over B. In this situation, we also say that $g$ is a family of maps over $f$.&lt;&#x2F;p&gt;
&lt;p&gt;Then we define:&lt;&#x2F;p&gt;
&lt;p&gt;$$
tot_f(g) : \Sigma_{(x:A)} {C(x)} → \Pi_{(y:B)} \Sigma_{D(y)}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
tot_f(g) = λ (x, z). (f(x), g(x, z))
$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;family-of-equivalences&quot;&gt;Family of equivalences&lt;&#x2F;h3&gt;
&lt;p&gt;We have a family of maps $f : \Pi_{(x:A)} B(x) \rightarrow C(x)$,&lt;&#x2F;p&gt;
&lt;p&gt;if for each $x : A$, $f(x)$ is an equivalence, we say that $f$ is a family of equivalences.&lt;&#x2F;p&gt;
&lt;p&gt;This happens iff $tot(f)$ is an equivalence.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-fundamental-theorem&quot;&gt;The fundamental theorem&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;unary-identity-system&quot;&gt;Unary identity system&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A (unary) identity system on $A$ at $a$ consists of a type family B over A equipped with $b : B(a)$, such that for any family of types $P(x, y)$ indexed by $x : A$ and $y : B(x)$, the function&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;$$
h ↦ h(a, b) : \Pi_{(x:A)} \Pi_{(y:B(x))} P(x, y) → P(a, b)
$$&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;has a section.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;fundamental-theorem-of-identity-types&quot;&gt;Fundamental theorem of identity types&lt;&#x2F;h3&gt;
&lt;p&gt;Given $a : A$, $x : A ⊢ B(x)$, and&lt;&#x2F;p&gt;
&lt;p&gt;$$
x : A ⊢ f(x) : (a = x) \rightarrow B(x)
$$&lt;&#x2F;p&gt;
&lt;p&gt;the following conditions are equivalent:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;$ftid : \text{is-contr}(\Sigma_{(x:A)}B(x))$&lt;&#x2F;li&gt;
&lt;li&gt;$ftid(x) : (a = x) ≃ B(x)$&lt;&#x2F;li&gt;
&lt;li&gt;$f(a, refl_a) : B(a)$ is an identity system on A at a&lt;&#x2F;li&gt;
&lt;li&gt;$f(x)$ is an equivalence of types, ie. $x:A \vdash ftid(x) : \text{is-equiv}(f(x))$&lt;&#x2F;li&gt;
&lt;li&gt;$f(x)$ has a section $ftid(x)$, or $f(x)$ is a retraction of $ftid(x)$, ie. $f(x) ∘ ftid(x) \sim id$, where $ftid(x) : B(x) → (a = x)$&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;embedding&quot;&gt;Embedding&lt;&#x2F;h2&gt;
&lt;p&gt;An embedding is a map $f : A → B$ that satisfies the property that, for every $x, y : A$
$$
ap_f : (x = y) → (f(x) = f(y))
$$
is an equivalence.&lt;&#x2F;p&gt;
&lt;p&gt;We write $\text{is-emb}(f)$ for the type of witnesses that $f$ is an embedding, and we define&lt;&#x2F;p&gt;
&lt;p&gt;$$
A ↪ B := \Sigma_{(f : A → B)} \text{is-emb}(f)
$$&lt;&#x2F;p&gt;
&lt;p&gt;In Agda:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emb &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emb &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x y &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cong f &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;↪&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;↪ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emb
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Basically, if $is-emb(f)$ is inhabited, then $f$ maps different values in $A$ to different elements in $B$.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Physics of Semiconductors</title>
        <published>2023-05-13T17:38:51.465+00:00</published>
        <updated>2023-05-13T17:38:51.465+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/the-physics-of-semiconductors/"/>
        <id>https://longfangsong.github.io/en/the-physics-of-semiconductors/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/the-physics-of-semiconductors/">&lt;h2 id=&quot;band-theory&quot;&gt;band theory&lt;&#x2F;h2&gt;
&lt;p&gt;In a single atom, electrons can only have discrete ranges of energy values. These ranges are called &quot;atomic orbitals&quot;. When we say things like $1s^1$, $1s^22s^22p^2$, we are referring to atomic orbitals, which we learned about in chemistry class.&lt;&#x2F;p&gt;
&lt;p&gt;When atoms come together, they affect each other and change how the electrons are distributed. For example, if two identical hydrogen atoms are brought together, the wave functions of the electrons overlap and, due to the exclusion principle, can no longer be in the same quantum state. This splits the original equivalent energy levels into two different energy levels.&lt;&#x2F;p&gt;
&lt;p&gt;In a solid crystal, the energy levels of the electrons of all the atoms form several energy bands.&lt;&#x2F;p&gt;
&lt;p&gt;One of them is the &lt;strong&gt;valence band&lt;&#x2F;strong&gt;, which is the highest energy band that contains electrons at 0K.&lt;&#x2F;p&gt;
&lt;p&gt;The other one is the &lt;strong&gt;conduction band&lt;&#x2F;strong&gt;, which is the lowest energy band that is empty at 0K. Electrons in this band can move freely in the crystal, and they are responsible for the electric current in the crystal.&lt;&#x2F;p&gt;
&lt;p&gt;The energy gap between these two bands is called the &lt;strong&gt;band gap&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;upload.wikimedia.org&#x2F;wikipedia&#x2F;commons&#x2F;1&#x2F;12&#x2F;Semiconductor_band_structure_%28lots_of_bands_2%29.svg&quot; alt=&quot;bands&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For metals, the valence band and conduction band have some overlap, allowing some electrons to move freely between them, which is why metals are good conductors. In contrast, insulators have a large band gap, making it extremely hard for electrons to move between them, which makes them poor conductors. Semiconductors are something in between; they have a small band gap. If some energy is given to the electrons, they may move between the two bands and conduct electricity.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;upload.wikimedia.org&#x2F;wikipedia&#x2F;commons&#x2F;c&#x2F;c7&#x2F;Isolator-metal.svg&quot; alt=&quot;Isolator-metal&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When given some energy, electrons can move from the valence band to the conduction band, leaving a hole in the valence band. The hole can be treated as a positive charge, and it can move freely through the crystal.&lt;&#x2F;p&gt;
&lt;p&gt;After being given some energy, the electrons can move from the valence band to the conduction band, leaving a hole in the valence band. The hole can be treated as a positive charge, and it can move freely in the crystal.&lt;&#x2F;p&gt;
&lt;p&gt;The movement of electrons and holes forms a current in semiconductors. Both of them are called &lt;strong&gt;charge carriers&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;doping&quot;&gt;Doping&lt;&#x2F;h2&gt;
&lt;p&gt;In a pure semiconductor crystal, although some electrons may move to the conduction band, it is still too difficult to form a large enough current.&lt;&#x2F;p&gt;
&lt;p&gt;By adding a small number of atoms with more or fewer electrons than the host atoms, we can add more charge carriers into the crystal, making it easier for the crystal to conduct current. This process is called &lt;strong&gt;doping&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;When we add atoms with more electrons than the host atoms, it is called &lt;strong&gt;n-type doping&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;When we add atoms with fewer electrons than the host atoms, it is called &lt;strong&gt;p-type doping&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The added atom will form a new energy band in the band gap, and electrons can move from or to the new band.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;p-n-junction&quot;&gt;P-N junction&lt;&#x2F;h2&gt;
&lt;p&gt;When we press a p-type semiconductor and an n-type semiconductor close together, the electrons in the n-type semiconductor will move to the p-type semiconductor and fill the holes there.&lt;&#x2F;p&gt;
&lt;p&gt;After this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There are few charge carriers in this area, making it difficult for current to pass through. This area is called the &lt;strong&gt;depletion region&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;A potential difference will be formed in the junction. This potential difference is called the built-in potential.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When connecting the p-type semiconductor with the positive terminal of a battery and the n-type semiconductor with the negative terminal of the battery, electrons in the n-type semiconductor and holes in the p-type semiconductor will be pushed towards the depletion region, and the width of the depletion region will be reduced. Thus, the current is easier to pass through this area.&lt;&#x2F;p&gt;
&lt;p&gt;If we connect the battery oppositely, due to similar reasons, the depletion region will be wider, and current is harder to pass through this area.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Image to RGB565 converter</title>
        <published>2023-03-03T16:58:21.033+00:00</published>
        <updated>2023-03-03T16:58:21.033+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/image-to-rgb565/"/>
        <id>https://longfangsong.github.io/en/image-to-rgb565/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/image-to-rgb565/">&lt;h1 id=&quot;just-use-it&quot;&gt;Just use it&lt;&#x2F;h1&gt;
&lt;input type=&quot;file&quot; id=&quot;imageInput&quot;&gt;
&lt;h1 id=&quot;why&quot;&gt;Why&lt;&#x2F;h1&gt;
&lt;p&gt;The RGB565 format is useful for embedded systems, as many LCD displays utilize this format.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;how&quot;&gt;How&lt;&#x2F;h1&gt;
&lt;p&gt;Essentially, use &lt;code&gt;canvas&lt;&#x2F;code&gt; to obtain the pixel data and convert it to RGB565.&lt;&#x2F;p&gt;
&lt;p&gt;Some of the code was provided by Bing, powered by GPT, although I made some modifications to ensure it works properly.&lt;&#x2F;p&gt;
&lt;p&gt;The result is in little-endian format.&lt;&#x2F;p&gt;
&lt;script&gt;
function rgbToRgb565(r, g, b) {
    const red = r &gt;&gt; 3;
    const green = g &gt;&gt; 2;
    const blue = b &gt;&gt; 3;
    return (red &lt;&lt; 11) | (green &lt;&lt; 5) | blue;
}

function download(uint16Array, filename) {
    var blob = new Blob([uint16Array], {type: &#x27;application&#x2F;octet-stream&#x27;});
    var url = URL.createObjectURL(blob);
    var a = document.createElement(&#x27;a&#x27;);
    a.href = url;
    a.download = filename;
    a.click();
}
let img = new Image();
let canvas = document.createElement(&#x27;canvas&#x27;);
let ctx = canvas.getContext(&#x27;2d&#x27;);
img.onload = function() {
    ctx.canvas.width = img.width;
    ctx.canvas.height = img.height;
    ctx.drawImage(img, 0, 0);
    let imgData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
    console.log(imgData);
    let rgb565Data = new ArrayBuffer(imgData.length &#x2F; 4 * 2);
    let view = new DataView(rgb565Data);
    for (let i = 0; i &lt; imgData.length; i += 4) {
        const r = imgData[i];
        const g = imgData[i + 1];
        const b = imgData[i + 2];
        console.log(rgbToRgb565(r, g, b));
        view.setUint16(i &#x2F; 4 * 2, rgbToRgb565(r, g, b), true);
    }
    download(rgb565Data, &#x27;rgb565data.bin&#x27;);
}
document.getElementById(&#x27;imageInput&#x27;).addEventListener(&#x27;change&#x27;, function(e) {
    var file = e.target.files[0];
    var reader = new FileReader();
    reader.onload = function(e) {
        img.src = e.target.result;
    }
    reader.readAsDataURL(file);
});
&lt;&#x2F;script&gt;</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Compile LLVM style IR to web assembly</title>
        <published>2023-02-04T17:59:47.582+00:00</published>
        <updated>2023-02-04T17:59:47.582+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/ssa-to-stackvm/"/>
        <id>https://longfangsong.github.io/en/ssa-to-stackvm/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/ssa-to-stackvm/">&lt;h2 id=&quot;nb&quot;&gt;NB&lt;&#x2F;h2&gt;
&lt;p&gt;This article presumes you know what is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;(LLVM-liked) SSA form IR.&lt;&#x2F;li&gt;
&lt;li&gt;Control-flow graph.&lt;&#x2F;li&gt;
&lt;li&gt;WASM and its text form WAT.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-basic-idea-of-wasm-s-control-flow-instructions&quot;&gt;The basic idea of WASM&#x27;s control flow instructions&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;if-then-else&quot;&gt;if-then-else&lt;&#x2F;h3&gt;
&lt;p&gt;Just like high-level languages, wasm supports if-then-else statements:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wat&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-wat &quot;&gt;&lt;code class=&quot;language-wat&quot; data-lang=&quot;wat&quot;&gt;&lt;span&gt;(local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;$var &lt;&#x2F;span&gt;&lt;span&gt;i32)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    (local.set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$var &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))) 
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    (local.set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$var &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;the &lt;code&gt;else&lt;&#x2F;code&gt; part can be omitted.&lt;&#x2F;p&gt;
&lt;p&gt;Note that although we fold the expressions in this way, the wasm instructions are actually organized in a different manner&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wat&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-wat &quot;&gt;&lt;code class=&quot;language-wat&quot; data-lang=&quot;wat&quot;&gt;&lt;span&gt;(local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;$var &lt;&#x2F;span&gt;&lt;span&gt;i32)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;local.set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$var
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;local.set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$var
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And that&#x27;s also how we need to generate our WebAssembly code.&lt;&#x2F;p&gt;
&lt;p&gt;(Note: The &lt;code&gt;end&lt;&#x2F;code&gt; instruction is omitted when we fold the expressions)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;loop-br&quot;&gt;&lt;code&gt;loop&lt;&#x2F;code&gt; + &lt;code&gt;br&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;loop&lt;&#x2F;code&gt; means that in the following code, until the corresponding &lt;code&gt;end&lt;&#x2F;code&gt;, we can jump to the top of the block using the &lt;code&gt;br&lt;&#x2F;code&gt; instruction.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wat&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-wat &quot;&gt;&lt;code class=&quot;language-wat&quot; data-lang=&quot;wat&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;$my_loop
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; do something
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;br &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$my_loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; continue the loop
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If no &lt;code&gt;br&lt;&#x2F;code&gt; is executed, the loop will terminate when the end of its content is reached.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;block-br&quot;&gt;&lt;code&gt;block&lt;&#x2F;code&gt; + &lt;code&gt;br&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;block&lt;&#x2F;code&gt; means that in the following code, until the corresponding &lt;code&gt;end&lt;&#x2F;code&gt;, we can jump out of the block using the &lt;code&gt;br&lt;&#x2F;code&gt; instruction.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wat&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-wat &quot;&gt;&lt;code class=&quot;language-wat&quot; data-lang=&quot;wat&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span&gt;$my_block
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; do something
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;br_if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$my_block &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.lt_s &lt;&#x2F;span&gt;&lt;span&gt;(global.get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$i&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  ))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; do other things, will not be executed if br_if is taken
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;block&lt;&#x2F;code&gt; and &lt;code&gt;loop&lt;&#x2F;code&gt; themselves don&#x27;t have any special usage, they just change the meaning of &lt;code&gt;br&lt;&#x2F;code&gt; inside them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;br-br-if&quot;&gt;&lt;code&gt;br&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;br_if&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;br&lt;&#x2F;code&gt; and &lt;code&gt;br_if&lt;&#x2F;code&gt; are used to jump to a &quot;label&quot;, which can be either a &lt;code&gt;loop&lt;&#x2F;code&gt; or a &lt;code&gt;block&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;br_if&lt;&#x2F;code&gt; is used to jump to a label only if the condition (the value on top of the stack) is true.&lt;&#x2F;p&gt;
&lt;p&gt;Note that &lt;code&gt;br&lt;&#x2F;code&gt; and &lt;code&gt;br_if&lt;&#x2F;code&gt; can only break&#x2F;continue a loop&#x2F;block they are &lt;strong&gt;in&lt;&#x2F;strong&gt;; they cannot jump to an arbitrary place. This is because, at the binary code level, the argument of &lt;code&gt;br&lt;&#x2F;code&gt; and &lt;code&gt;br_if&lt;&#x2F;code&gt; indicates how many levels of &lt;code&gt;loop&lt;&#x2F;code&gt; and &lt;code&gt;block&lt;&#x2F;code&gt; we need to jump out of.&lt;&#x2F;p&gt;
&lt;p&gt;There are also some other instructions like &lt;code&gt;br_table&lt;&#x2F;code&gt; and &lt;code&gt;return&lt;&#x2F;code&gt;, but they are not important for this article, so they will not be mentioned here.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-key-problem-cannot-branch-to-arbitrary-place&quot;&gt;The key problem: cannot branch to arbitrary place&lt;&#x2F;h2&gt;
&lt;p&gt;LLVM IR has a &lt;code&gt;br&lt;&#x2F;code&gt; instruction, which can jump to an arbitrary place, making this CFG easily representable in LLVM:&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    id0(Entry)
    id0 --&amp;gt; A
    A --&amp;gt; B
    B --&amp;gt; C
    F --&amp;gt; D
    B --&amp;gt; D
    D --&amp;gt; E
    C --&amp;gt; E
    C --&amp;gt; F
    D --&amp;gt; G
    E --&amp;gt; B
    E --&amp;gt; G
    F --&amp;gt; H
    G --&amp;gt; H
&lt;&#x2F;div&gt;
&lt;p&gt;But it is not representable in WASM using &lt;strong&gt;only&lt;&#x2F;strong&gt; the control flow instructions we have.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately, there is a very simple method to represent any CFGs by adding a &quot;next block&quot; variable and wrapping the entire program in a &lt;code&gt;loop&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-naive-algorithm&quot;&gt;The naive algorithm&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#6&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The basic idea of this method is to disregard all the fancy control flow instructions provided by wasm and manage everything ourselves.&lt;&#x2F;p&gt;
&lt;p&gt;We can place everything in a loop, use a variable to record the next block to execute, and employ &lt;code&gt;br&lt;&#x2F;code&gt; to jump to the next block:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wat&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-wat &quot;&gt;&lt;code class=&quot;language-wat&quot; data-lang=&quot;wat&quot;&gt;&lt;span&gt;(local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;$next_block &lt;&#x2F;span&gt;&lt;span&gt;i32)
&lt;&#x2F;span&gt;&lt;span&gt;(local.set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$next_block &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;$my_loop
&lt;&#x2F;span&gt;&lt;span&gt;    (local.get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$next_block&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.eq &lt;&#x2F;span&gt;&lt;span&gt;(local.get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$next_block&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; A content here
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; $next_block = B
&lt;&#x2F;span&gt;&lt;span&gt;        (local.set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$next_block &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;br &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$my_loop
&lt;&#x2F;span&gt;&lt;span&gt;    ))
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.eq &lt;&#x2F;span&gt;&lt;span&gt;(local.get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$next_block&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; B content here
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(local.get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$cond_1&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; $next_block = C
&lt;&#x2F;span&gt;&lt;span&gt;            (local.set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$next_block &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; $next_block = D
&lt;&#x2F;span&gt;&lt;span&gt;            (local.set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$next_block &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;br &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$my_loop
&lt;&#x2F;span&gt;&lt;span&gt;    ))
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.eq &lt;&#x2F;span&gt;&lt;span&gt;(local.get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$next_block&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; C content here
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; omitted
&lt;&#x2F;span&gt;&lt;span&gt;    ))
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.eq &lt;&#x2F;span&gt;&lt;span&gt;(local.get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$next_block&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;i32.const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; D content here
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; omitted
&lt;&#x2F;span&gt;&lt;span&gt;    ))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; rest omitted
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is easy to see the problem with this algorithm: the generated code contains a lot of (unnecessary) access to the &lt;code&gt;$next_block&lt;&#x2F;code&gt; variable and conditional judgments. It would be better to have an alternative algorithm that can make use of the control flow instructions provided by WebAssembly.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;emscripten-core&#x2F;emscripten&#x2F;main&#x2F;docs&#x2F;paper.pdf&quot;&gt;the Emscripten paper&lt;&#x2F;a&gt;, such an algorithm is introduced.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-relooper-algorithm&quot;&gt;The Relooper Algorithm&lt;&#x2F;h2&gt;
&lt;p&gt;The basic idea of the relooper algorithm is to identify certain patterns in the control flow graph and generate code to handle these patterns.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;finding-a-simple-loop-in-cfg&quot;&gt;Finding a (Simple) Loop in CFG&lt;&#x2F;h3&gt;
&lt;p&gt;A simple loop, which can be represented with a &lt;code&gt;loop&lt;&#x2F;code&gt; and several &lt;code&gt;br&lt;&#x2F;code&gt;s, can be identified by finding cycles&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; in the CFG that have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;only one way to exit the loop&lt;&#x2F;li&gt;
&lt;li&gt;only one way to enter the loop&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For example:&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart LR
    subgraph From
        Entry(...)
    end
    subgraph To
        F(...)
    end
    subgraph Content
        A
        B
        C
        D
        E
    end
    Entry --&amp;gt; A
    A --&amp;gt; B
    B --&amp;gt; C
    C --&amp;gt; D
    D --&amp;gt; E(...)
    E --&amp;gt; A
    A --&amp;gt; F
&lt;&#x2F;div&gt;
&lt;p&gt;Can be translated into:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wat&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-wat &quot;&gt;&lt;code class=&quot;language-wat&quot; data-lang=&quot;wat&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `From`
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;$my_loop
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `A`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; we presume basic block `A` put branch condition onto top of the stack
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; load from stack top
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `B`
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `C`
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `D`
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; ...
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;br &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$my_loop
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `To`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s also possible that the entry of the loop is different from the exit of the loop, for example:&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart LR
    subgraph From
        Entry(...)
    end
    subgraph To
        F(...)
    end
    subgraph Content
        A
        B
        C
        D
        E
    end
    Entry --&amp;gt; A
    A --&amp;gt; B
    B --&amp;gt; C
    C --&amp;gt; D
    D --&amp;gt; E(...)
    E --&amp;gt; A
    C --&amp;gt; F
&lt;&#x2F;div&gt;
&lt;p&gt;can be translated to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wat&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-wat &quot;&gt;&lt;code class=&quot;language-wat&quot; data-lang=&quot;wat&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `From`
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;$my_loop
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `A`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `B`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `C`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; we presume basic block `C` put branch condition onto top of the stack
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; load from stack top
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `D`
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; ...
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;br &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$my_loop
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `To`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;find-a-conditional-branch-in-cfg&quot;&gt;Find a conditional branch in CFG&lt;&#x2F;h3&gt;
&lt;p&gt;A conditional branch, which can be represented with an &lt;code&gt;if-then-else&lt;&#x2F;code&gt;, can be identified by finding a node that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;has two different groups of successors, in which
&lt;ul&gt;
&lt;li&gt;the node itself is the one and only entry for each group of successors&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;the successor groups can &quot;meet&quot; after leaving their exit node&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Note that one of the groups can be empty.&lt;&#x2F;p&gt;
&lt;p&gt;For example:&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    subgraph From
        FromNode(...)
    end
    subgraph To
        ToNode(...)
    end
    subgraph Content1
        B --&amp;gt; C
    end
    subgraph Content2
        D --&amp;gt; E
    end
    FromNode --&amp;gt; A
    A --&amp;gt; B
    A --&amp;gt; D
    C --&amp;gt; ToNode
    E --&amp;gt; ToNode
&lt;&#x2F;div&gt;
&lt;p&gt;can be translated to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wat&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-wat &quot;&gt;&lt;code class=&quot;language-wat&quot; data-lang=&quot;wat&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `From`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `A`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; we presume basic block `A` put branch condition onto top of the stack
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; load from stack top
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `B`
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `C`
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `D`
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `E`
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; wasm corresponding to `To`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;combine-them-together&quot;&gt;Combine Them Together&lt;&#x2F;h3&gt;
&lt;p&gt;So, what we need to do is recognize these two patterns in a CFG and emit code for them.&lt;&#x2F;p&gt;
&lt;p&gt;We can recognize the nodes one by one:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If we can reach only one other node from this node, and we can never come back, we can just emit code for this node and continue to the next node.&lt;&#x2F;li&gt;
&lt;li&gt;If the node is the entry node of a (simple) loop, we can emit the code according to the algorithm for loops mentioned above and continue to the next node.&lt;&#x2F;li&gt;
&lt;li&gt;If the node is the entry node of a conditional branch, we can emit the code according to the algorithm for conditional branches mentioned above and continue to the next node.&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise, we can fall back to the naive algorithm for all blocks that can be reached from this node.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And that&#x27;s the basic idea of the Relooper algorithm.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;&#x2F;h3&gt;
&lt;p&gt;The issue is that wasm&#x27;s control flow instructions are more powerful than the code generated by the relooper algorithm. For example:&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    A --&amp;gt; B
    A --&amp;gt; C
    A --&amp;gt; D
    A --&amp;gt; E
    B --&amp;gt; C
    C --&amp;gt; D
    D --&amp;gt; E
&lt;&#x2F;div&gt;
&lt;p&gt;For this CFG, the relooper algorithm can do nothing but fall back to the naive algorithm. However, it can be translated into wasm in the following way:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wat&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-wat &quot;&gt;&lt;code class=&quot;language-wat&quot; data-lang=&quot;wat&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span&gt;$before_E
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span&gt;$before_D
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; A content here
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span&gt;$before_C
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; should branch to B
&lt;&#x2F;span&gt;&lt;span&gt;                (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; B content here
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;br &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$before_C&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; should branch to C
&lt;&#x2F;span&gt;&lt;span&gt;                (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then br &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$before_C&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; should branch to D
&lt;&#x2F;span&gt;&lt;span&gt;                (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then br &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$before_D&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; should branch to E
&lt;&#x2F;span&gt;&lt;span&gt;                (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then br &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$before_E&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; C content here
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; D content here
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; E content here
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-stackifier-algorithm&quot;&gt;The stackifier algorithm&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;part-1-how-to-deal-with-cycles-with-multiple-entries&quot;&gt;Part 1: How to deal with cycles with multiple entries?&lt;&#x2F;h3&gt;
&lt;p&gt;During the observations above, we may find that we cannot handle cycles with multiple entries. For example:&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    A --&amp;gt; B
    B --&amp;gt; C
    C --&amp;gt; D
    D --&amp;gt; B
    A --&amp;gt; E
    E --&amp;gt; D
    D --&amp;gt; F
&lt;&#x2F;div&gt;
&lt;p&gt;In this CFG, we can find a cycle &lt;code&gt;B-&amp;gt;C-&amp;gt;D-&amp;gt;B&lt;&#x2F;code&gt; with multiple entries (&lt;code&gt;A-&amp;gt;B&lt;&#x2F;code&gt; and &lt;code&gt;E-&amp;gt;D&lt;&#x2F;code&gt;), which is difficult to handle.&lt;&#x2F;p&gt;
&lt;p&gt;In the relooper algorithm, we simply fall back to the naive algorithm for all blocks that can be reached from this node.&lt;&#x2F;p&gt;
&lt;p&gt;However, we may not need to apply the naive algorithm to all blocks. Instead, we can use the idea of using labels to &quot;branch&quot; only to the entry nodes of the cycle.&lt;&#x2F;p&gt;
&lt;p&gt;We can add a dispatcher node and redirect all the incoming edges of &lt;code&gt;B&lt;&#x2F;code&gt; and &lt;code&gt;D&lt;&#x2F;code&gt; to the dispatcher node.&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    A --&amp;gt; Dispatcher
    B --&amp;gt; C
    C --&amp;gt; D
    D --&amp;gt; Dispatcher
    A --&amp;gt; E
    E --&amp;gt; Dispatcher
    Dispatcher --&amp;gt; B
    Dispatcher --&amp;gt; D
    D --&amp;gt; F
&lt;&#x2F;div&gt;
&lt;p&gt;The Dispatcher will create a label variable, and:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A&lt;&#x2F;code&gt; will set it to &lt;code&gt;B&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;E&lt;&#x2F;code&gt; will set it to &lt;code&gt;D&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;C&lt;&#x2F;code&gt; will set it to &lt;code&gt;B&lt;&#x2F;code&gt; (&lt;code&gt;C&lt;&#x2F;code&gt; will jump to &lt;code&gt;D&lt;&#x2F;code&gt; by itself, so we don&#x27;t set it to &lt;code&gt;D&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;D&lt;&#x2F;code&gt; will set it according to the condition judgment.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After this transformation, we can handle the CFG as if it&#x27;s a cycle with only one entry node.&lt;&#x2F;p&gt;
&lt;p&gt;A problem here is that loops may be nested within each other, e.g.&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
graph TD
  0 --&amp;gt; 1
  0 --&amp;gt; 2
  1 --&amp;gt; 2
  2 --&amp;gt; 3
  3 --&amp;gt; 1
  3 --&amp;gt; 4
  4 --&amp;gt; 1
  2 --&amp;gt; 6
  4 --&amp;gt; 6
  6 --&amp;gt; 5
  5 --&amp;gt; 4
&lt;&#x2F;div&gt;
&lt;p&gt;After applying the process mentioned earlier, we will get:&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
graph TD
  0 --&amp;gt; Dispatcher
  Dispatcher --&amp;gt; 1
  Dispatcher --&amp;gt; 2
  2 --&amp;gt; 3
  3 --&amp;gt; 4
  4 --&amp;gt; 6
  6 --&amp;gt; 5
  5 --&amp;gt; 4
  2 --&amp;gt; 6
  1 --&amp;gt; Dispatcher
  3 --&amp;gt; Dispatcher
  4 --&amp;gt; Dispatcher
&lt;&#x2F;div&gt;
&lt;p&gt;After this process, &lt;code&gt;123456 &amp;amp; Dispatcher&lt;&#x2F;code&gt; still form a loop. To continue the process, we need to omit the back edges connecting to the created dispatcher when looking for new loops.&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
graph TD
  0 --&amp;gt; Dispatcher
  Dispatcher --&amp;gt; 1
  Dispatcher --&amp;gt; 2
  2 --&amp;gt; 3
  3 --&amp;gt; 4
  4 --&amp;gt; 6
  6 --&amp;gt; 5
  5 --&amp;gt; 4
  2 --&amp;gt; 6
  1 -.-&amp;gt; Dispatcher
  3 -.-&amp;gt; Dispatcher
  4 -.-&amp;gt; Dispatcher
&lt;&#x2F;div&gt;
&lt;p&gt;Now we can continue with the next loop &lt;code&gt;456&lt;&#x2F;code&gt;, and we will finally get:&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
graph TD
  0 --&amp;gt; 7
  1 -.-&amp;gt; 7
  2 --&amp;gt; 3
  2 --&amp;gt; 8
  3 -.-&amp;gt; 7
  3 --&amp;gt; 8
  4 -.-&amp;gt; 7
  4 -.-&amp;gt; 8
  5 -.-&amp;gt; 8
  6 --&amp;gt; 5
  7 --&amp;gt; 1
  7 --&amp;gt; 2
  8 --&amp;gt; 4
  8 --&amp;gt; 6
&lt;&#x2F;div&gt;&lt;h3 id=&quot;part-2-how-to-handle-cfgs-without-cycles-with-multiple-entries&quot;&gt;Part 2: How to handle CFGs without cycles with multiple entries?&lt;&#x2F;h3&gt;
&lt;p&gt;The remaining part can also be handled by the relooper algorithm, but you may find that the relooper algorithm is a greedy algorithm that may not provide the best result, because it cannot assume there are no cycles with multiple entries in the CFG.&lt;&#x2F;p&gt;
&lt;p&gt;After removing cycles with multiple entries, the stackifier algorithm can now provide a better solution to this problem.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;topological-ordering&quot;&gt;Topological Ordering&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Topological_sorting&quot;&gt;Topological sort&lt;&#x2F;a&gt; is a useful tool when dealing with code scheduling. Basically, it ensures that if a node &lt;code&gt;A&lt;&#x2F;code&gt; is reached before &lt;code&gt;B&lt;&#x2F;code&gt;, then it is ordered prior to &lt;code&gt;B&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We cannot perform a traditional topological sort algorithm on a CFG, because it&#x27;s not a DAG.&lt;&#x2F;p&gt;
&lt;p&gt;However, we can remove all the back edges from the CFG, and then perform a topological sort on the resulting DAG. The stackifier algorithm adds another requirement: the entry node of the loop must be ordered before ALL the nodes in the loop&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#7&quot;&gt;7&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, and we must visit ALL nodes inside a loop before visit any other nodes, so that when generating wasm code, we can &quot;cut&quot; the content of this loop out of the whole block sequence.&lt;&#x2F;p&gt;
&lt;p&gt;Then the process is easy, just:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Wrap each loop in &lt;code&gt;loop&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;For each forward edge where the source and destination blocks are not consecutive, we can put a &lt;code&gt;block&lt;&#x2F;code&gt; at the beginning of the function&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#8&quot;&gt;8&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, use &lt;code&gt;break&lt;&#x2F;code&gt; to jump to the destination block, and put &lt;code&gt;end&lt;&#x2F;code&gt; before the target block.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;&#x2F;h3&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    Entry --&amp;gt; A
    A --&amp;gt; B
    B --&amp;gt; C
    C --&amp;gt; D
    D --&amp;gt; E
    E --&amp;gt; G
    E --&amp;gt; F
    F --&amp;gt; C
    G --&amp;gt; B
    G --&amp;gt; O
    A --&amp;gt; H
    H --&amp;gt; I
    I --&amp;gt; K
    K --&amp;gt; L
    H --&amp;gt; J
    J --&amp;gt; L
    L --&amp;gt; M
    M --&amp;gt; N
    L --&amp;gt; N
    N --&amp;gt; O
    O --&amp;gt; Exit
&lt;&#x2F;div&gt;
&lt;p&gt;After the topological sort, the block order is &lt;code&gt;ABCDEFGHIKJLMNO&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First, simply wrap the loops in &lt;code&gt;loop&lt;&#x2F;code&gt; instructions.&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    Entry --&amp;gt; A
    A --&amp;gt; B
    subgraph Loop2
        B --&amp;gt; C
        subgraph Loop1
            C --&amp;gt; D
            D --&amp;gt; E
            E --&amp;gt; F
        end
        E --&amp;gt; G
        F --&amp;gt; C
        G --&amp;gt; B
    end
    G --&amp;gt; O
    A --&amp;gt; H
    H --&amp;gt; I
    I --&amp;gt; K
    K --&amp;gt; L
    H --&amp;gt; J
    J --&amp;gt; L
    L --&amp;gt; M
    M --&amp;gt; N
    L --&amp;gt; N
    N --&amp;gt; O
    O --&amp;gt; Exit
&lt;&#x2F;div&gt;
&lt;p&gt;And the currently generated code looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wat&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-wat &quot;&gt;&lt;code class=&quot;language-wat&quot; data-lang=&quot;wat&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; A
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;$loop2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; B 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;$loop1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; C
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; D
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; E
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; F 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; G
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; HIKJLMNO
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;A -&amp;gt; H&lt;&#x2F;code&gt;, &lt;code&gt;H -&amp;gt; J&lt;&#x2F;code&gt;, and &lt;code&gt;L -&amp;gt; N&lt;&#x2F;code&gt; are forward edges where the source and destination blocks are not consecutive. We create blocks for them one by one.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wat&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-wat &quot;&gt;&lt;code class=&quot;language-wat&quot; data-lang=&quot;wat&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span&gt;$AH
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; A
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;br_if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$AH
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;$loop2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; B 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;$loop1
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; C
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; D
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; E
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; F 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; G
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; H
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; IKJLMNO
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;wat&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-wat &quot;&gt;&lt;code class=&quot;language-wat&quot; data-lang=&quot;wat&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span&gt;$HJ
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span&gt;$AH
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; A
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;br_if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$AH
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;$loop2
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; B 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;$loop1
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; C
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; D
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; E
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; F 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; G
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; H
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;br_if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$HJ
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; I
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; K
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; J
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; LMNO
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;wat&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-wat &quot;&gt;&lt;code class=&quot;language-wat&quot; data-lang=&quot;wat&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span&gt;$LN
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span&gt;$HJ
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span&gt;$AH
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; A
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;br_if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$AH
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;$loop2
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; B 
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;$loop1
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; C
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; D
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; E
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; F 
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; G
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; H
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;br_if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$HJ
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; I
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; K
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; J
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; L
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;br_if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$LN
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; M
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; N
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;;; O
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And now we can translate the CFG into wasm by simply filling in the content of basic blocks.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;generating-more-human-readable-wat&quot;&gt;Generating more human-readable WAT&lt;&#x2F;h3&gt;
&lt;p&gt;Although we have generated the wasm code, the control flow structure we are using (&lt;code&gt;br_if&lt;&#x2F;code&gt;) to represent conditional branches is not easily understandable for humans; we prefer if-else.&lt;&#x2F;p&gt;
&lt;p&gt;We can observe that if a block has only one forward predecessor, and the predecessor is a branch block, it can be nested into the &lt;code&gt;if&lt;&#x2F;code&gt; or &lt;code&gt;else&lt;&#x2F;code&gt; branch of this predecessor.&lt;&#x2F;p&gt;
&lt;p&gt;So when performing a topological sort of the blocks, after we add a block, we first visit the successors for which the block is their only forward predecessor. This makes it possible to be nested in branches of this block.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Personally, I think how wasm handles control flow is a bit weird. &lt;code&gt;block&lt;&#x2F;code&gt; is a real instruction instead of some meta information on the code, &lt;code&gt;br&lt;&#x2F;code&gt; can mean either &lt;code&gt;break&lt;&#x2F;code&gt; or &lt;code&gt;continue&lt;&#x2F;code&gt; depending on whether it&#x27;s in a &lt;code&gt;block&lt;&#x2F;code&gt; or &lt;code&gt;loop&lt;&#x2F;code&gt;, but it cannot be used to &quot;branch&quot; to an arbitrary place, and wasm provides both &lt;code&gt;br_if&lt;&#x2F;code&gt; and &lt;code&gt;if&lt;&#x2F;code&gt;, which seems non-orthogonal.
Although &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WebAssembly&#x2F;design&#x2F;issues&#x2F;796&quot;&gt;many developers are asking for arbitrary labels and gotos&lt;&#x2F;a&gt; to be added into wasm, I think it&#x27;s hopeless because wasm has already gone too far to adopt such a significant design change.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;Yes, &lt;code&gt;if&lt;&#x2F;code&gt;, &lt;code&gt;else&lt;&#x2F;code&gt;, and even &lt;code&gt;end&lt;&#x2F;code&gt; are &quot;real&quot; instructions, which have corresponding binary forms. It&#x27;s quite strange for an &quot;asm&quot; to have these structures, but that&#x27;s how wasm does things, and they &lt;strong&gt;are&lt;&#x2F;strong&gt; useful for a stack-based VM.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;For those who are very familiar with the properties of CFG, you may have known that this is because the CFG is not reducible.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;6&lt;&#x2F;sup&gt;
&lt;p&gt;Or, the node &quot;dominates&quot; every node in the group of successors.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;5&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;5&lt;&#x2F;sup&gt;
&lt;p&gt;Or, in a more professional statement, strongly connected component, because there can be sub-cycles inside the outer cycle.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;6&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;This algorithm was first introduced by &lt;a href=&quot;https:&#x2F;&#x2F;dl.acm.org&#x2F;doi&#x2F;pdf&#x2F;10.1145&#x2F;355609.362337&quot;&gt;a paper in 1973&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;7&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;7&lt;&#x2F;sup&gt;
&lt;p&gt;This means you should visit everything inside the loop first before going out of the loop when applying a DFS-based topological sort algorithm.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;8&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;8&lt;&#x2F;sup&gt;
&lt;p&gt;wasm doesn&#x27;t seem to care much about how deeply blocks are nested.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Category theory Notes 3</title>
        <published>2023-01-30T17:46:45.264+00:00</published>
        <updated>2023-01-30T17:46:45.264+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/category-theory-3/"/>
        <id>https://longfangsong.github.io/en/category-theory-3/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/category-theory-3/">&lt;h2 id=&quot;covariant-functor&quot;&gt;(Covariant) Functor&lt;&#x2F;h2&gt;
&lt;p&gt;Initually, functor is a mapping from one category to another, which preserves the structure of the origin one.&lt;&#x2F;p&gt;
&lt;p&gt;Formally, functor is defined as&lt;&#x2F;p&gt;
&lt;p&gt;A functor $F:C→D$ between categories $C$ and $D$ is a mapping of objects to objects and
arrows to arrows, in such a way that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$F(f:A→B)=F(f):F(A)→F(B)$&lt;&#x2F;li&gt;
&lt;li&gt;$F(g\cdot f)=F(g)\cdot F(f)$&lt;&#x2F;li&gt;
&lt;li&gt;$F(1_A)=1_{F(A)}$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In Haskell:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Functor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∷&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f b
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;contravariant-functor&quot;&gt;Contravariant&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; Functor&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A contravariant functor is like a functor but it reverses the directions of the morphisms. —— nLab&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Basically it&#x27;s the &quot;reversed&quot; version of covariant functor.&lt;&#x2F;p&gt;
&lt;p&gt;In Haskell:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Contravariant &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;contramap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∷&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f b
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;bi-nary-functor&quot;&gt;Bi(nary )Functor&lt;&#x2F;h2&gt;
&lt;p&gt;Bifunctor is a functor which domain is the product of two categories.&lt;&#x2F;p&gt;
&lt;p&gt;ie.&lt;&#x2F;p&gt;
&lt;p&gt;For $C_1$, $C_2$ and $D$ categories, a functor $F:C_1\times C_2→D$ is a bifunctor.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Bifunctor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;bimap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∷&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;→&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f a b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f c d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Examples of bifunctor include &lt;code&gt;Either&lt;&#x2F;code&gt; and &lt;code&gt;(,)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;instance Bifunctor&lt;&#x2F;span&gt;&lt;span&gt; (,) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    bimap f g (x , y) = (f x , g y)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;instance Bifunctor Either where
&lt;&#x2F;span&gt;&lt;span&gt;    bimap f g = either (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Left &lt;&#x2F;span&gt;&lt;span&gt;. f) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Right &lt;&#x2F;span&gt;&lt;span&gt;. g)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;profunctor&quot;&gt;Profunctor&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A Profunctor is just a bifunctor that is contravariant in the first argument and covariant in the second. What&#x27;s the problem? —— &lt;a href=&quot;https:&#x2F;&#x2F;www.schoolofhaskell.com&#x2F;user&#x2F;liyang&#x2F;profunctors#profunctors&quot;&gt;School of Haskell&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So we just &quot;reverse&quot; the first argument of &lt;code&gt;Bifunctor&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Profunctor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dimap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∷&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;→&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f a b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f c d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A good example of profunctor is &lt;code&gt;(-&amp;gt;)&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;instance Profunctor&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where 
&lt;&#x2F;span&gt;&lt;span&gt;    dimap ca bd ab = bd . ab . ca
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;If you are familiar with &quot;tradition&quot; programming languages like Java or C#, you may have heard of &quot;covariant&quot; and &quot;contravariant&quot; before. For example, if type &lt;code&gt;A&lt;&#x2F;code&gt; is subtype of &lt;code&gt;B&lt;&#x2F;code&gt;, then &lt;code&gt;IEnumerable&amp;lt;A&amp;gt;&lt;&#x2F;code&gt; is subtype of &lt;code&gt;IEnumerable&amp;lt;B&amp;gt;&lt;&#x2F;code&gt;, so &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; is covariant on &lt;code&gt;T&lt;&#x2F;code&gt;. And similarly, &lt;code&gt;Action&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; is contravariant on &lt;code&gt;T&lt;&#x2F;code&gt;. We can regard covariant and contravariant functors as more abstract (we weaken relationship from subtype to arbitrary binary relation) version of these types.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>tikz cheatsheet</title>
        <published>2023-01-30T07:58:36.804+00:00</published>
        <updated>2023-01-30T07:58:36.804+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/tikz-cheatsheet/"/>
        <id>https://longfangsong.github.io/en/tikz-cheatsheet/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/tikz-cheatsheet/">&lt;h2 id=&quot;basic&quot;&gt;Basic&lt;&#x2F;h2&gt;
&lt;p&gt;Basically, tikz has a coordinate system just like what we learned at school, you can draw lines and shapes by specifying the coordinates of the vertices.&lt;&#x2F;p&gt;
&lt;p&gt;For example, draw a line from &lt;code&gt;(0,0)&lt;&#x2F;code&gt; to &lt;code&gt;(1,0)&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (0,0) -- (1,0);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;tikz&quot;&gt;
  &lt;script type=&quot;text&#x2F;tikz&quot;&gt;
  \begin{document}
\begin{tikzpicture}
    \draw (0,0) -- (1,0);
\end{tikzpicture}
\end{document}
&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Draw a cross:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (-1,0) -- (1,0);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (0,-1) -- (0,1);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;tikz&quot;&gt;
  &lt;script type=&quot;text&#x2F;tikz&quot;&gt;
  \begin{document}
\begin{tikzpicture}
    \draw (-1,0) -- (1,0);
    \draw (0,-1) -- (0,1);
\end{tikzpicture}
\end{document}
&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Or in 3D:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (-1,0,0) -- (1,0,0);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (0,-1,0) -- (0,1,0);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (0,0,-1) -- (0,0,1);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;tikz&quot;&gt;
  &lt;script type=&quot;text&#x2F;tikz&quot;&gt;
  \begin{document}
\begin{tikzpicture}
    \draw (-1,0,0) -- (1,0,0);
    \draw (0,-1,0) -- (0,1,0);
    \draw (0,0,-1) -- (0,0,1);
\end{tikzpicture}
\end{document}
&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;And you can also draw Bézier curves:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (0,0) .. controls (1,1) and (2,1) .. (2,0);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;tikz&quot;&gt;
  &lt;script type=&quot;text&#x2F;tikz&quot;&gt;
  \begin{document}
\begin{tikzpicture}
  \draw (0,0) .. controls (1,1) and (2,1) .. (2,0);
\end{tikzpicture}
\end{document}
&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Means draw a Bézier curve from &lt;code&gt;(0,0)&lt;&#x2F;code&gt; to &lt;code&gt;(2,0)&lt;&#x2F;code&gt;, and control points are &lt;code&gt;(1,1)&lt;&#x2F;code&gt; and &lt;code&gt;(2,1)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To close a shape, you can use &lt;code&gt;cycle&lt;&#x2F;code&gt; as the last coordinate:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (0,0) -- (1,0) -- (1,1) -- cycle;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;tikz&quot;&gt;
  &lt;script type=&quot;text&#x2F;tikz&quot;&gt;
  \begin{document}
\begin{tikzpicture}
  \draw (0,0) -- (1,0) -- (1,1) -- cycle;
\end{tikzpicture}
\end{document}
&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Circles and ellipses:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (-2,0) circle [radius=1];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;tikz&quot;&gt;
  &lt;script type=&quot;text&#x2F;tikz&quot;&gt;
  \begin{document}
\begin{tikzpicture}
  \draw (-2,0) circle [radius=1];
  \draw (2,0) ellipse [x radius=2, y radius=1];
\end{tikzpicture}
\end{document}
&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Arcs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (1,0) arc[start angle=0, end angle=30, radius=1];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;tikz&quot;&gt;
  &lt;script type=&quot;text&#x2F;tikz&quot;&gt;
  \begin{document}
\begin{tikzpicture}
    \filldraw (0,0) circle[radius=0.5pt];
    \draw (1,0) arc[start angle=0, end angle=30, radius=1];
\end{tikzpicture}
\end{document}
&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Rectangles:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (0,0) rectangle (1,1);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;tikz&quot;&gt;
  &lt;script type=&quot;text&#x2F;tikz&quot;&gt;
  \begin{document}
\begin{tikzpicture}
\draw (0,0) rectangle (1,1);
\end{tikzpicture}
\end{document}
&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Grid:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (-3,0) -- (3,0);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (0,-3) -- (0,3);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt;[step=.5cm,gray,very thin] (-3,-3) grid (3,3);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;tikz&quot;&gt;
  &lt;script type=&quot;text&#x2F;tikz&quot;&gt;
  \begin{document}
\begin{tikzpicture}
    \draw (-3,0) -- (3,0);
    \draw (0,-3) -- (0,3);
    \draw[step=.5cm,gray,very thin] (-3,-3) grid (3,3);
\end{tikzpicture}
\end{document}
&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We can use &lt;code&gt;clip&lt;&#x2F;code&gt; to clip part of the image:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\clip&lt;&#x2F;span&gt;&lt;span&gt; (-0.1,-0.1) rectangle (3,3);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (-3,0) -- (3,0);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (0,-3) -- (0,3);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt;[step=.5cm,gray,very thin] (-3,-3) grid (3,3);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;tikz&quot;&gt;
  &lt;script type=&quot;text&#x2F;tikz&quot;&gt;
  \begin{document}
\begin{tikzpicture}
    \clip (-0.1,-0.1) rectangle (3,3);
    \draw (-3,0) -- (3,0);
    \draw (0,-3) -- (0,3);
    \draw[step=.5cm,gray,very thin] (-3,-3) grid (3,3);
\end{tikzpicture}
\end{document}
&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Use &lt;code&gt;filldraw&lt;&#x2F;code&gt; instead of &lt;code&gt;draw&lt;&#x2F;code&gt; to fill the shape:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\filldraw&lt;&#x2F;span&gt;&lt;span&gt;[fill=red, draw=blue] (0,0) rectangle (1,1);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;tikz&quot;&gt;
  &lt;script type=&quot;text&#x2F;tikz&quot;&gt;
  \begin{document}
\begin{tikzpicture}
    \filldraw[fill=red, draw=blue] (0,0) rectangle (1,1);
\end{tikzpicture}
\end{document}
&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;You can add arrows to lines:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt;[-&amp;gt;]  (0,0) -- (1,0);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt;[&amp;lt;-&amp;gt;] (0,1) -- (1,1);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;tikz&quot;&gt;
  &lt;script type=&quot;text&#x2F;tikz&quot;&gt;
  \begin{document}
\begin{tikzpicture}
\draw[-&gt;]  (0,0) -- (1,0);
\draw[&lt;-&gt;] (0,1) -- (1,1);
\end{tikzpicture}
\end{document}
&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;You can add text with &lt;code&gt;node&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (0,0) node {(0,0)} -- (0,0);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\filldraw&lt;&#x2F;span&gt;&lt;span&gt; (1,1) circle[radius=0.05];
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (1,1) node[anchor=south] {south} -- (1,1);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (1,1) node[anchor=north] {north} -- (1,1);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (1,1) node[anchor=east] {east} -- (1,1);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\draw&lt;&#x2F;span&gt;&lt;span&gt; (1,1) node[anchor=west] {west} -- (1,1);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{tikzpicture}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;tikz&quot;&gt;
  &lt;script type=&quot;text&#x2F;tikz&quot;&gt;
  \begin{document}
\begin{tikzpicture}
  \draw (0,0) node {(0,0)} -- (0,0);
  \filldraw (1,1) circle[radius=0.05];
  \draw (1,1) node[anchor=south] {south} -- (1,1);
  \draw (1,1) node[anchor=north,rotate=5] {north} -- (1,1);
  \draw (1,1) node[anchor=east,fill=blue] {east} -- (1,1);
  \draw (1,1) node[anchor=west,draw] {west} -- (1,1);
\end{tikzpicture}
\end{document}
&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;interesting-stuff&quot;&gt;interesting stuff&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;trees&quot;&gt;Trees&lt;&#x2F;h3&gt;
&lt;div class=&quot;tikz&quot;&gt;
  &lt;script type=&quot;text&#x2F;tikz&quot;&gt;
  \begin{document}
\begin{tikzpicture}
  \node {root}
    child {node {left}}
    child {node {right}
      child {node {child}}
      child {node {child}}
    };
\end{tikzpicture}
\end{document}
&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Category theory Notes 2</title>
        <published>2022-12-19T04:59:39.001+00:00</published>
        <updated>2022-12-19T04:59:39.001+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/category-theory-2/"/>
        <id>https://longfangsong.github.io/en/category-theory-2/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/category-theory-2/">&lt;h2 id=&quot;epis-and-monos&quot;&gt;Epis and monos&lt;&#x2F;h2&gt;
&lt;p&gt;In any category $C$, an arrow $f: A → B$ is called a monomorphism if for any $g, h: C → A$, $f\cdot g = f\cdot h$ implies $g = h$.&lt;&#x2F;p&gt;
&lt;!-- https:&#x2F;&#x2F;q.uiver.app&#x2F;?q=WzAsMyxbMCwwLCJDIl0sWzIsMCwiQSJdLFs0LDAsIkIiXSxbMCwxLCJnIiwwLHsib2Zmc2V0IjotMX1dLFswLDEsImgiLDIseyJvZmZzZXQiOjF9XSxbMSwyLCJmIiwwLHsiY29sb3VyIjpbMCw2MCw2MF19LFswLDYwLDYwLDFdXV0= --&gt;
&lt;iframe class=&quot;quiver-embed&quot; src=&quot;https:&#x2F;&#x2F;q.uiver.app&#x2F;?q=WzAsMyxbMCwwLCJDIl0sWzIsMCwiQSJdLFs0LDAsIkIiXSxbMCwxLCJnIiwwLHsib2Zmc2V0IjotMX1dLFswLDEsImgiLDIseyJvZmZzZXQiOjF9XSxbMSwyLCJmIiwwLHsiY29sb3VyIjpbMCw2MCw2MF19LFswLDYwLDYwLDFdXV0=&amp;embed&quot; width=&quot;688&quot; height=&quot;176&quot; style=&quot;border-radius: 8px; border: none; width: 688px; height: 176px;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;We usually write $f: A ↣ B$ if $f$ is a monomorphism.&lt;&#x2F;p&gt;
&lt;p&gt;Similarly, an arrow $f: A → B$ is called an epimorphism (or $f$ is monic) if for any $g, h: B → D$, $g \cdot f = h \cdot f$ implies $g = h$.&lt;&#x2F;p&gt;
&lt;!-- https:&#x2F;&#x2F;q.uiver.app&#x2F;?q=WzAsMyxbMCwwLCJBIl0sWzIsMCwiQiJdLFs0LDAsIkQiXSxbMCwxLCJmIiwwLHsiY29sb3VyIjpbMCw2MCw2MF19LFswLDYwLDYwLDFdXSxbMSwyLCJnIiwwLHsib2Zmc2V0IjotMX1dLFsxLDIsImgiLDIseyJvZmZzZXQiOjF9XV0= --&gt;
&lt;iframe class=&quot;quiver-embed&quot; src=&quot;https:&#x2F;&#x2F;q.uiver.app&#x2F;?q=WzAsMyxbMCwwLCJBIl0sWzIsMCwiQiJdLFs0LDAsIkQiXSxbMCwxLCJmIiwwLHsiY29sb3VyIjpbMCw2MCw2MF19LFswLDYwLDYwLDFdXSxbMSwyLCJnIiwwLHsib2Zmc2V0IjotMX1dLFsxLDIsImgiLDIseyJvZmZzZXQiOjF9XV0=&amp;embed&quot; width=&quot;688&quot; height=&quot;176&quot; style=&quot;border-radius: 8px; border: none; width: 688px; height: 176px;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;We usually write $f: A ↠ B$ if $f$ is an epimorphism.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;initial-and-terminal-objects&quot;&gt;Initial and terminal objects&lt;&#x2F;h2&gt;
&lt;p&gt;In any category $C$, an object 0&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; is initial if for any object A there is a unique morphism&lt;&#x2F;p&gt;
&lt;p&gt;$$
0→A
$$&lt;&#x2F;p&gt;
&lt;p&gt;Or in other words:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The initial object is the object that has one and only one morphism going to any object in the category. —— Category Theory for Programmers, Bartosz Milewski&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Similarly, in any category $C$, an object $1$&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; is terminal if for any object $A$ there is a unique morphism&lt;&#x2F;p&gt;
&lt;p&gt;$$
A→1
$$&lt;&#x2F;p&gt;
&lt;p&gt;Or in other words:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The terminal object is the object with one and only one morphism coming to it from any object in the category. —— Category Theory for Programmers, Bartosz Milewski&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Initial (terminal) objects are unique up to isomorphism.&lt;&#x2F;p&gt;
&lt;p&gt;In agda, the definition of initial (terminal is similar) object is something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;IsInitial&lt;&#x2F;span&gt;&lt;span&gt; (⊥ : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Obj&lt;&#x2F;span&gt;&lt;span&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;o &lt;&#x2F;span&gt;&lt;span&gt;⊔ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ℓ &lt;&#x2F;span&gt;&lt;span&gt;⊔ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field
&lt;&#x2F;span&gt;&lt;span&gt;    ! : {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Obj&lt;&#x2F;span&gt;&lt;span&gt;} → (⊥ ⇒ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    !-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unique &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀ &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: ⊥ ⇒ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → ! ≈ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Initial &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;o &lt;&#x2F;span&gt;&lt;span&gt;⊔ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ℓ &lt;&#x2F;span&gt;&lt;span&gt;⊔ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field
&lt;&#x2F;span&gt;&lt;span&gt;    ⊥ : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Obj
&lt;&#x2F;span&gt;&lt;span&gt;    ⊥-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initial &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;IsInitial &lt;&#x2F;span&gt;&lt;span&gt;⊥
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here &lt;code&gt;!&lt;&#x2F;code&gt; is the morphism from &lt;code&gt;⊥&lt;&#x2F;code&gt; to &lt;code&gt;A&lt;&#x2F;code&gt;. And &lt;code&gt;!-unique&lt;&#x2F;code&gt; is the proof of the uniqueness, while the definition of &lt;code&gt;≈&lt;&#x2F;code&gt;, which means isomorphism equal, is defined &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;agda&#x2F;agda-categories&#x2F;blob&#x2F;4b93392b7656c6a27c75f05d6eec1b3ceb410af5&#x2F;src&#x2F;Categories&#x2F;Morphism&#x2F;IsoEquiv.agda&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;products-and-coproducts&quot;&gt;Products and Coproducts&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In category theory, the product of two (or more) objects in a category is a notion designed to capture the essence behind constructions in other areas of mathematics such as ... Essentially, the product of a family of objects is the &quot;most general&quot; object which admits a morphism to each of the given objects. —— Wikipedia&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;!-- https:&#x2F;&#x2F;q.uiver.app&#x2F;?q=WzAsNCxbMiwyLCJYXzFcXHRpbWVzIFhfMiJdLFs0LDIsIlhfMiJdLFswLDIsIlhfMSJdLFsyLDAsIlkiXSxbMCwyLCJcXHBpXzEiXSxbMCwxLCJcXHBpXzIiLDJdLFszLDIsImZfMSIsMl0sWzMsMSwiZl8yIl0sWzMsMCwiZiIsMV1d --&gt;
&lt;iframe class=&quot;quiver-embed&quot; src=&quot;https:&#x2F;&#x2F;q.uiver.app&#x2F;?q=WzAsNCxbMiwyLCJYXzFcXHRpbWVzIFhfMiJdLFs0LDIsIlhfMiJdLFswLDIsIlhfMSJdLFsyLDAsIlkiXSxbMCwyLCJcXHBpXzEiXSxbMCwxLCJcXHBpXzIiLDJdLFszLDIsImZfMSIsMl0sWzMsMSwiZl8yIl0sWzMsMCwiZiIsMV1d&amp;embed&quot; width=&quot;370&quot; height=&quot;216&quot; style=&quot;border-radius: 8px; border: none; width: 370px; height: 216px;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;In other words:&lt;&#x2F;p&gt;
&lt;p&gt;A product of two objects $X_1$ and $X_2$ is the object $X_1\times X_2$ equipped with two projections such that for any other object $Y$ equipped with two projections there is a unique morphism $f$ from $Y$ to $X_1\times X_2$ that factorizes those projections.&lt;&#x2F;p&gt;
&lt;p&gt;Similarly, we can define coproducts:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The coproduct of a family of objects is essentially the &quot;least specific&quot; object to which each object in the family admits a morphism. It is the category-theoretic dual notion to the categorical product, which means the definition is the same as the product but with all arrows reversed. —— Wikipedia&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;!-- https:&#x2F;&#x2F;q.uiver.app&#x2F;?q=WzAsNCxbMiwyLCJYXzErWF8yIl0sWzAsMiwiWF8xIl0sWzQsMiwiWF8yIl0sWzIsMCwiWSJdLFsxLDAsImlfMSIsMl0sWzIsMCwiaV8yIl0sWzAsMywiZiIsMV0sWzEsMywiZl8xIl0sWzIsMywiZl8yIiwyXV0= --&gt;
&lt;iframe class=&quot;quiver-embed&quot; src=&quot;https:&#x2F;&#x2F;q.uiver.app&#x2F;?q=WzAsNCxbMiwyLCJYXzErWF8yIl0sWzAsMiwiWF8xIl0sWzQsMiwiWF8yIl0sWzIsMCwiWSJdLFsxLDAsImlfMSIsMl0sWzIsMCwiaV8yIl0sWzAsMywiZiIsMV0sWzEsMywiZl8xIl0sWzIsMywiZl8yIiwyXV0=&amp;embed&quot; width=&quot;370&quot; height=&quot;216&quot; style=&quot;border-radius: 8px; border: none; width: 370px; height: 216px;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;In other words:&lt;&#x2F;p&gt;
&lt;p&gt;A coproduct of two objects $X_1$ and $X_2$ is the object $X_1 + X_2$ equipped with two injections such that for any other object $Y$ equipped with two injections there is a unique morphism $f$ from $X_1 + X_2$ to $Y$ that factorizes those injections.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Also can be written as &lt;code&gt;Void&lt;&#x2F;code&gt; or $⊥$.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;Also can be written as &lt;code&gt;()&lt;&#x2F;code&gt; or $⊤$.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mem2reg made simple</title>
        <published>2022-11-16T15:17:53.579+00:00</published>
        <updated>2022-11-16T15:17:53.579+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/mem2reg-made-simple/"/>
        <id>https://longfangsong.github.io/en/mem2reg-made-simple/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/mem2reg-made-simple/">&lt;h2 id=&quot;nb&quot;&gt;NB&lt;&#x2F;h2&gt;
&lt;p&gt;This article presumes you know what is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;(LLVM-liked) SSA form IR.&lt;&#x2F;li&gt;
&lt;li&gt;Control-flow graph.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This article will &lt;strong&gt;not&lt;&#x2F;strong&gt; cover:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;How&lt;&#x2F;strong&gt; to find out the dominant relation between nodes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;How&lt;&#x2F;strong&gt; to find the dominance frontier for nodes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I think they are just implementation details, anyone can find out an algorithm to achieve these goals (though might be not very efficient), and there exists some library for out-of-the-box use. If you are implementing your own compiler and do want to implement an efficient algorithm by yourself, you may refer to the paper &lt;a href=&quot;https:&#x2F;&#x2F;www.cs.rice.edu&#x2F;~keith&#x2F;Embed&#x2F;dom.pdf&quot;&gt;&lt;em&gt;A Simple, Fast Dominance Algorithm&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, this article will focus on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What&lt;&#x2F;strong&gt; is the dominance frontier and &lt;strong&gt;why&lt;&#x2F;strong&gt; do we need it?&lt;&#x2F;li&gt;
&lt;li&gt;Giving &lt;strong&gt;examples&lt;&#x2F;strong&gt; on how to use the dominance frontier to convert memory access to register operation, especially insert phi nodes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;&#x2F;h2&gt;
&lt;p&gt;When compiling a high-level language function into LLVM IR, a variable may be used as l-value in different branches:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; c;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(a &amp;lt; b) {
&lt;&#x2F;span&gt;&lt;span&gt;        c = a;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        c = b;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; c;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which can be translated into some IR&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;llvm&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-llvm &quot;&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span&gt;fn f(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%b&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%c.addr&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;alloca i32
&lt;&#x2F;span&gt;&lt;span&gt;    blt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%b&lt;&#x2F;span&gt;&lt;span&gt;, if_taken, if_not_taken
&lt;&#x2F;span&gt;&lt;span&gt;if_taken:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;store &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%c.addr
&lt;&#x2F;span&gt;&lt;span&gt;    j if_end
&lt;&#x2F;span&gt;&lt;span&gt;if_not_taken:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;store &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%c.addr
&lt;&#x2F;span&gt;&lt;span&gt;if_end:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%c&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;load &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%c.addr
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%c
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This IR is correct, but you may see that to prevent assigning to &lt;code&gt;c&lt;&#x2F;code&gt; in two different basic blocks, which makes it no longer a valid SSA, we &quot;cheat&quot; by &quot;leaking&quot; it to the memory and using &lt;code&gt;load&lt;&#x2F;code&gt; and &lt;code&gt;store&lt;&#x2F;code&gt; to access it. You may do this for every local variable you faced when translating a high-level language to SSA-like IR, I can promise the functions will work as expected.&lt;&#x2F;p&gt;
&lt;p&gt;However, memory access is always much slower than register access. So we do want to try to move those in-memory variables to the registers&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; and keep it an SSA meanwhile.&lt;&#x2F;p&gt;
&lt;p&gt;So those crazy computer scientists invented the infamous &lt;code&gt;phi&lt;&#x2F;code&gt; node.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;PHINode - The PHINode class is used to represent the magical mystical PHI node, that can not exist in nature, but can be synthesized in a computer scientist&#x27;s overactive imagination. —— LLVM project, comment of the PHINode class&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;With &lt;code&gt;phi&lt;&#x2F;code&gt; node, we can make the ir into:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;llvm&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-llvm &quot;&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span&gt;fn f(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%b&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%c.addr&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;alloca i32
&lt;&#x2F;span&gt;&lt;span&gt;    blt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%b&lt;&#x2F;span&gt;&lt;span&gt;, if_taken, if_not_taken
&lt;&#x2F;span&gt;&lt;span&gt;if_taken:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%c0&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%a
&lt;&#x2F;span&gt;&lt;span&gt;    j if_end
&lt;&#x2F;span&gt;&lt;span&gt;if_not_taken:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%c1&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%b
&lt;&#x2F;span&gt;&lt;span&gt;if_end:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%c&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;phi&lt;&#x2F;span&gt;&lt;span&gt; if_taken.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%c0&lt;&#x2F;span&gt;&lt;span&gt;, if_not_taken.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%c1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%c
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;%c = phi if_taken.%c0, if_not_taken.%c1&lt;&#x2F;code&gt; means &lt;code&gt;%c&lt;&#x2F;code&gt; equals &lt;code&gt;%c0&lt;&#x2F;code&gt; or &lt;code&gt;%c1&lt;&#x2F;code&gt;, depending which basic block the control flow comes from.&lt;&#x2F;p&gt;
&lt;p&gt;So what a compiler needs to do is find out a way to generate this kind of phi node.&lt;&#x2F;p&gt;
&lt;p&gt;A dumb way is, for each basic block that has multiple predecessors, replace each &lt;code&gt;load&lt;&#x2F;code&gt; with a phi node, and search along the predecessor chain for the source.&lt;&#x2F;p&gt;
&lt;p&gt;However this algorithm is very inefficient, luckily, there&#x27;s an alternative, efficient way to archive this goal.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;where-to-put-phi-nodes-dominance-frontier&quot;&gt;Where to put &lt;code&gt;phi&lt;&#x2F;code&gt; nodes ——— Dominance Frontier&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s re-consider where we need to put a phi node.&lt;&#x2F;p&gt;
&lt;p&gt;We can start with a trivial judgment:&lt;&#x2F;p&gt;
&lt;p&gt;For an existing &lt;code&gt;load&lt;&#x2F;code&gt; statement, if the last &lt;code&gt;store&lt;&#x2F;code&gt; statement can be in two (or more) different basic blocks, then we have to insert a phi node for it&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Then the problem is how to judge whether &quot;the last &lt;code&gt;store&lt;&#x2F;code&gt; statement can be in two (or more) different basic blocks&quot;.
By using a control-flow graph, we can express this as:&lt;&#x2F;p&gt;
&lt;p&gt;There exist two different paths from the entry block to the basic block the &lt;code&gt;load&lt;&#x2F;code&gt; statement is in, and the last &lt;code&gt;store&lt;&#x2F;code&gt;s on these paths are different.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s switch to the &lt;code&gt;store&lt;&#x2F;code&gt;&#x27;s perspective:&lt;&#x2F;p&gt;
&lt;p&gt;A phi node needs to be placed for this &lt;code&gt;store&lt;&#x2F;code&gt; in some basic block that contains a &lt;code&gt;load&lt;&#x2F;code&gt; to the same address when:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There exists a path that comes from the entry, passes the basic block this &lt;code&gt;store&lt;&#x2F;code&gt; is in, and finally reaches the basic block the &lt;code&gt;load&lt;&#x2F;code&gt; is in.&lt;&#x2F;li&gt;
&lt;li&gt;There also exists a path that comes from the entry, but &lt;strong&gt;not&lt;&#x2F;strong&gt; passing the basic block this &lt;code&gt;store&lt;&#x2F;code&gt; is in and reaches the basic block the &lt;code&gt;load&lt;&#x2F;code&gt; is in.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And obviously, the phi node should be placed at the basic node where these two paths meet with each other.&lt;&#x2F;p&gt;
&lt;p&gt;Such a basic block is exactly one of the elements in the &lt;strong&gt;dominance frontier&lt;&#x2F;strong&gt; of the basic block the &lt;code&gt;store&lt;&#x2F;code&gt; statement is in.&lt;&#x2F;p&gt;
&lt;p&gt;Note that newly generated phi nodes will create a new register, which is necessary to be considered (regarded as a &lt;code&gt;store&lt;&#x2F;code&gt;) when trying to insert other phi nodes. You may also do this by calculating the dominant frontier closure of the basic block of the &lt;code&gt;store&lt;&#x2F;code&gt; basic block.&lt;&#x2F;p&gt;
&lt;p&gt;So the process of finding places to insert &lt;code&gt;phi&lt;&#x2F;code&gt; nodes is simple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; return a map which stands for:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;     variable -&amp;gt; basic blocks which need to insert a phi node for this variable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;phi_insert_positions&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Function) -&amp;gt; Map&amp;lt;Variable, Set&amp;lt;&amp;amp;BasicBlock&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; result = Map::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; variable in function.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;alloca_variables&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; blocks_contain_store = function.blocks
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;| block.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;contains_store_to&lt;&#x2F;span&gt;&lt;span&gt;(variable));
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; blocks_to_consider = blocks_contain_store.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;!blocks_to_consider.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; considering_block = block_to_consider.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; dominator_frontier in considering_block.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dorminate_frontiers&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                result[variable].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(dominator_frontier);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!blocks_contain_store.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(dominator_frontier) {
&lt;&#x2F;span&gt;&lt;span&gt;                    blocks_to_consider.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(dominator_frontier);
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    result
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;&#x2F;h3&gt;
&lt;p&gt;Here is a simple example, let&#x27;s find out where to insert phi nodes for the variable &lt;code&gt;a&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    id0(Entry)
    id1[&amp;lt;span&amp;gt;bb1&amp;lt;&amp;#x2F;span&amp;gt;\n store a, 1]
    id2[&amp;lt;span&amp;gt;bb2&amp;lt;&amp;#x2F;span&amp;gt;\n %a0 = load a\n store a, %t0]
    id3[&amp;lt;span&amp;gt;bb3&amp;lt;&amp;#x2F;span&amp;gt;\n%a1 = load a\n store a, %t1]
    id4[&amp;lt;span&amp;gt;bb4&amp;lt;&amp;#x2F;span&amp;gt;\n...]
    id5[&amp;lt;span&amp;gt;bb5&amp;lt;&amp;#x2F;span&amp;gt;\n%a2 = load a\n store a, 2]
    id6[&amp;lt;span&amp;gt;bb6&amp;lt;&amp;#x2F;span&amp;gt;\n%a3 = load a\n store a, 3]
    id7[&amp;lt;span&amp;gt;bb7&amp;lt;&amp;#x2F;span&amp;gt;\n%a4 = load a]
    id8[&amp;lt;span&amp;gt;bb8&amp;lt;&amp;#x2F;span&amp;gt;\n%a5 = load a]
    id9(End)
    id0 --&amp;gt; id1
    id1 --&amp;gt; id2
    id1 --&amp;gt; id4
    id2 --&amp;gt; id3
    id3 --&amp;gt; id2
    id3 --&amp;gt; id8
    id4 --&amp;gt; id5
    id4 --&amp;gt; id6
    id5 --&amp;gt; id7
    id6 --&amp;gt; id7
    id7 --&amp;gt; id8
    id8 --&amp;gt; id9
&lt;&#x2F;div&gt;
&lt;p&gt;So initially we need to consider &lt;code&gt;bb1&lt;&#x2F;code&gt;, &lt;code&gt;bb2&lt;&#x2F;code&gt;, &lt;code&gt;bb3&lt;&#x2F;code&gt;, &lt;code&gt;bb5&lt;&#x2F;code&gt; and &lt;code&gt;bb6&lt;&#x2F;code&gt;, which contain &lt;code&gt;store&lt;&#x2F;code&gt; statements to &lt;code&gt;a&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For &lt;code&gt;bb1&lt;&#x2F;code&gt;, its domination frontiers set is empty, so nothing to do for it.&lt;&#x2F;p&gt;
&lt;p&gt;For &lt;code&gt;bb2&lt;&#x2F;code&gt;, its domination frontiers set is {&lt;code&gt;bb2&lt;&#x2F;code&gt;, &lt;code&gt;bb8&lt;&#x2F;code&gt;}, note &lt;code&gt;bb2&lt;&#x2F;code&gt; itself is in the set, because we can reach &lt;code&gt;bb2&lt;&#x2F;code&gt; in the path &lt;code&gt;Entry&lt;&#x2F;code&gt; → &lt;code&gt;bb1&lt;&#x2F;code&gt; → &lt;code&gt;bb2&lt;&#x2F;code&gt;, which doesn&#x27;t pass &lt;code&gt;bb2&lt;&#x2F;code&gt;, and in the path &lt;code&gt;Entry&lt;&#x2F;code&gt; → &lt;code&gt;bb1&lt;&#x2F;code&gt; → &lt;code&gt;bb2&lt;&#x2F;code&gt; → &lt;code&gt;bb3&lt;&#x2F;code&gt; → &lt;code&gt;bb2&lt;&#x2F;code&gt;, which passes &lt;code&gt;bb2&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So we insert &lt;code&gt;phi&lt;&#x2F;code&gt; nodes in &lt;code&gt;bb2&lt;&#x2F;code&gt; and &lt;code&gt;bb8&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    id2[&amp;lt;span&amp;gt;bb2&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;p&amp;gt;%a_bb2 = phi ...&amp;lt;&amp;#x2F;p&amp;gt; %a0 = load a\n store a, %t0]
    id8[&amp;lt;span&amp;gt;bb8&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;p&amp;gt;%a_bb8 = phi ...&amp;lt;&amp;#x2F;p&amp;gt; %a5 = load a]
&lt;&#x2F;div&gt;
&lt;p&gt;Note we neither fill the source value for &lt;code&gt;phi&lt;&#x2F;code&gt; nodes nor remove the &lt;code&gt;load&lt;&#x2F;code&gt; and &lt;code&gt;store&lt;&#x2F;code&gt; statements here, we&#x27;ll talk about these operations later.&lt;&#x2F;p&gt;
&lt;p&gt;Here &lt;code&gt;bb8&lt;&#x2F;code&gt; is not in our &lt;code&gt;blocks_contain_store&lt;&#x2F;code&gt;, we need to add it to the consideration list. So our remaining consider list is &lt;code&gt;[bb3, bb5, bb6, bb8]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;bb3&lt;&#x2F;code&gt;&#x27;s domination frontiers set is also {&lt;code&gt;bb2&lt;&#x2F;code&gt;, &lt;code&gt;bb8&lt;&#x2F;code&gt;}, so nothing meaningful is done here.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;bb5&lt;&#x2F;code&gt;&#x27;s domination frontiers set is {&lt;code&gt;bb7&lt;&#x2F;code&gt;}, so we add a &lt;code&gt;phi&lt;&#x2F;code&gt; node to &lt;code&gt;bb7&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    id7[&amp;lt;span&amp;gt;bb7&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;p&amp;gt;%a_bb7 = phi ...&amp;lt;&amp;#x2F;p&amp;gt;%a4 = load a]
&lt;&#x2F;div&gt;
&lt;p&gt;Also, &lt;code&gt;bb7&lt;&#x2F;code&gt; needs to be pushed to the consideration list.&lt;&#x2F;p&gt;
&lt;p&gt;Now the consideration list is &lt;code&gt;[bb6, bb8, bb7]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;bb6&lt;&#x2F;code&gt;&#x27;s domination frontiers set is also {&lt;code&gt;bb7&lt;&#x2F;code&gt;}, so nothing to do.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;bb8&lt;&#x2F;code&gt;&#x27;s domination frontier is empty, also nothing to do.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;bb7&lt;&#x2F;code&gt;&#x27;s domination frontier is {&lt;code&gt;bb8&lt;&#x2F;code&gt;}, which is already considered, so nothing to do.&lt;&#x2F;p&gt;
&lt;p&gt;After this process, we have found all places which need to put a &lt;code&gt;phi&lt;&#x2F;code&gt; node:&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    id0(Entry)
    id1[&amp;lt;span&amp;gt;bb1&amp;lt;&amp;#x2F;span&amp;gt;\n store a, 1]
    id2[&amp;lt;span&amp;gt;bb2&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;p&amp;gt;%a_bb2 = phi ...&amp;lt;&amp;#x2F;p&amp;gt; %a0 = load a\n store a, %t0]
    id3[&amp;lt;span&amp;gt;bb3&amp;lt;&amp;#x2F;span&amp;gt;\n%a1 = load a\n store a, %t1]
    id4[&amp;lt;span&amp;gt;bb4&amp;lt;&amp;#x2F;span&amp;gt;\n...]
    id5[&amp;lt;span&amp;gt;bb5&amp;lt;&amp;#x2F;span&amp;gt;\n%a2 = load a\n store a, 2]
    id6[&amp;lt;span&amp;gt;bb6&amp;lt;&amp;#x2F;span&amp;gt;\n%a3 = load a\n store a, 3]
    id7[&amp;lt;span&amp;gt;bb7&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;p&amp;gt;%a_bb7 = phi ...&amp;lt;&amp;#x2F;p&amp;gt;%a4 = load a]
    id8[&amp;lt;span&amp;gt;bb8&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;p&amp;gt;%a_bb8 = phi ...&amp;lt;&amp;#x2F;p&amp;gt; %a5 = load a]
    id9(End)
    id0 --&amp;gt; id1
    id1 --&amp;gt; id2
    id1 --&amp;gt; id4
    id2 --&amp;gt; id3
    id3 --&amp;gt; id2
    id3 --&amp;gt; id8
    id4 --&amp;gt; id5
    id4 --&amp;gt; id6
    id5 --&amp;gt; id7
    id6 --&amp;gt; id7
    id7 --&amp;gt; id8
    id8 --&amp;gt; id9
&lt;&#x2F;div&gt;&lt;h3 id=&quot;decide-which-value-to-use&quot;&gt;Decide which value to use&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Now we should decide the &quot;sources&quot; of the &lt;code&gt;phi&lt;&#x2F;code&gt; nodes, and in the meantime, we can also&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;remove the &lt;code&gt;load&lt;&#x2F;code&gt;s to the variable and replace it with the values generated by &lt;code&gt;phi&lt;&#x2F;code&gt; or &lt;code&gt;store&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;remove the &lt;code&gt;store&lt;&#x2F;code&gt;s.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We can do this by doing DFS over the control flow graph, and keeping track of the current value of each variable.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Value {
&lt;&#x2F;span&gt;&lt;span&gt;    Constant(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    Register(Register),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; decide a variable&amp;#39;s current value with a variable value stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;decide_variable_value&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;variable&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Variable,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;current_variable_value&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Stack&amp;lt;Map&amp;lt;Variable, (&amp;amp;BasicBlock, Value)&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; (&amp;amp;BasicBlock, Value) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; frame in current_variable_value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rev&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(value) = frame.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(variable_name) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; value;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;decide_values_start_from&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; Function,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; BasicBlock,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;visited&lt;&#x2F;span&gt;&lt;span&gt;: Set&amp;lt;&amp;amp;BasicBlock&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;current_variable_value&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Stack&amp;lt;Map&amp;lt;Variable, (&amp;amp;BasicBlock, Value)&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; we presume phi nodes have already inserted before calling this function
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; now we should insert phi sources
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; phi in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; block.phis {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(current_value_from, current_value) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;decide_variable_value&lt;&#x2F;span&gt;&lt;span&gt;(phi.variable, current_variable_value);
&lt;&#x2F;span&gt;&lt;span&gt;        phi.from.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;((current_value_from, current_value));
&lt;&#x2F;span&gt;&lt;span&gt;        current_variable_value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;()[phi.variable] = (block, phi.to);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; it&amp;#39;s necessary to revisit a visited block when inserting phi nodes
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; so we need to put the visited check after the phi source putting
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; visited.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(block) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    visited.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(block);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; statement in block {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; statement {
&lt;&#x2F;span&gt;&lt;span&gt;            Load { to, from_variable, .. } =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(_, load_value) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;decide_variable_value&lt;&#x2F;span&gt;&lt;span&gt;(from_variable, current_variable_value);
&lt;&#x2F;span&gt;&lt;span&gt;                block.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(statement);
&lt;&#x2F;span&gt;&lt;span&gt;                function.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(to, load_value);
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            Store { value, to_variable, .. } =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                current_variable_value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;last_mut&lt;&#x2F;span&gt;&lt;span&gt;()[to_variable] = value;
&lt;&#x2F;span&gt;&lt;span&gt;                block.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(statement);
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            Branch { success_block, fail_block, .. } =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                current_variable_value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(Map::new());
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;decide_values_start_from&lt;&#x2F;span&gt;&lt;span&gt;(function, success_block, visited, current_variable_value);
&lt;&#x2F;span&gt;&lt;span&gt;                current_variable_value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                current_variable_value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(Map::new());
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;decide_values_start_from&lt;&#x2F;span&gt;&lt;span&gt;(function, fail_block, visited, current_variable_value);
&lt;&#x2F;span&gt;&lt;span&gt;                current_variable_value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            Jump { to_block, .. } =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;decide_values_start_from&lt;&#x2F;span&gt;&lt;span&gt;(function, to_block, visited, current_variable_value);
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            _ =&amp;gt; (),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;example-1&quot;&gt;Example&lt;&#x2F;h3&gt;
&lt;p&gt;We still use the control flow graph mentioned in the &lt;code&gt;phi&lt;&#x2F;code&gt;-inserting process, this time I&#x27;ll add some statements that &quot;use&quot; the variable &lt;code&gt;a&lt;&#x2F;code&gt; to show the variable value replacement result.&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    id0(Entry)
    id1[&amp;lt;span&amp;gt;bb1&amp;lt;&amp;#x2F;span&amp;gt;\n store a, 1]
    id2[&amp;lt;span&amp;gt;bb2&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;p&amp;gt;%a_bb2 = phi ...&amp;lt;&amp;#x2F;p&amp;gt; %a0 = load a\n %t0 = add %a0, 1 \n store a, %t0]
    id3[&amp;lt;span&amp;gt;bb3&amp;lt;&amp;#x2F;span&amp;gt;\n%a1 = load a\n %t1 = add %a1, %a1 \n store a, %t1]
    id4[&amp;lt;span&amp;gt;bb4&amp;lt;&amp;#x2F;span&amp;gt;\n...]
    id5[&amp;lt;span&amp;gt;bb5&amp;lt;&amp;#x2F;span&amp;gt;\n%a2 = load a\n store a, 2]
    id6[&amp;lt;span&amp;gt;bb6&amp;lt;&amp;#x2F;span&amp;gt;\n%a3 = load a\n store a, 3]
    id7[&amp;lt;span&amp;gt;bb7&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;p&amp;gt;%a_bb7 = phi ...&amp;lt;&amp;#x2F;p&amp;gt;%a4 = load a]
    id8[&amp;lt;span&amp;gt;bb8&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;p&amp;gt;%a_bb8 = phi ...&amp;lt;&amp;#x2F;p&amp;gt;%a5 = load a\n ret %a5]
    id9(End)
    id0 --&amp;gt; id1
    id1 --&amp;gt; id2
    id1 --&amp;gt; id4
    id2 --&amp;gt; id3
    id3 --&amp;gt; id2
    id3 --&amp;gt; id8
    id4 --&amp;gt; id5
    id4 --&amp;gt; id6
    id5 --&amp;gt; id7
    id6 --&amp;gt; id7
    id7 --&amp;gt; id8
    id8 --&amp;gt; id9
&lt;&#x2F;div&gt;
&lt;p&gt;We start the DFS process from &lt;code&gt;bb1&lt;&#x2F;code&gt;, currently, the value stack of a is &lt;code&gt;[]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;When visiting &lt;code&gt;bb1&lt;&#x2F;code&gt;, we meet up with a &lt;code&gt;store&lt;&#x2F;code&gt; that set &lt;code&gt;a&lt;&#x2F;code&gt; to &lt;code&gt;1&lt;&#x2F;code&gt;, so after visiting &lt;code&gt;bb1&lt;&#x2F;code&gt;, the value stack of &lt;code&gt;a&lt;&#x2F;code&gt; is &lt;code&gt;[(bb1, 1)]&lt;&#x2F;code&gt;. And the &lt;code&gt;store&lt;&#x2F;code&gt; statement is removed.&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    id1[&amp;lt;span&amp;gt;bb1&amp;lt;&amp;#x2F;span&amp;gt;\n...]
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;code&gt;bb1&lt;&#x2F;code&gt; ends with a &lt;code&gt;Branch&lt;&#x2F;code&gt; (didn&#x27;t show on the graph, but you can tell that because the node has two outgoing edges).&lt;&#x2F;p&gt;
&lt;p&gt;First, we visit &lt;code&gt;bb2&lt;&#x2F;code&gt;, and we&#x27;ll come back to &lt;code&gt;bb4&lt;&#x2F;code&gt; later.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;bb2&lt;&#x2F;code&gt; we first met up with a &lt;code&gt;phi&lt;&#x2F;code&gt; node, so we add the current value of &lt;code&gt;a&lt;&#x2F;code&gt; (1, from &lt;code&gt;bb1&lt;&#x2F;code&gt;) to its &lt;code&gt;from&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Then we meet a &lt;code&gt;load&lt;&#x2F;code&gt;, which put the value of &lt;code&gt;a&lt;&#x2F;code&gt; to &lt;code&gt;a0&lt;&#x2F;code&gt;, since &lt;code&gt;a&lt;&#x2F;code&gt; is currently &lt;code&gt;1&lt;&#x2F;code&gt;, we can remove this &lt;code&gt;load&lt;&#x2F;code&gt; and use &lt;code&gt;1&lt;&#x2F;code&gt; to replace all occurrences of &lt;code&gt;a0&lt;&#x2F;code&gt;, this is just what we want to do for the next statement.&lt;&#x2F;p&gt;
&lt;p&gt;And then we have a &lt;code&gt;store&lt;&#x2F;code&gt;, which updates the value stack to &lt;code&gt;[(bb1, 1), (bb2, %t0)]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After all these things, we now have:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    id2[&amp;lt;span&amp;gt;bb2&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;p&amp;gt;%a_bb2 = phi bb1.1&amp;lt;&amp;#x2F;p&amp;gt; %t0 = add 1, 1]
&lt;&#x2F;div&gt;
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Then we go to &lt;code&gt;bb3&lt;&#x2F;code&gt;, similar to &lt;code&gt;bb2&lt;&#x2F;code&gt;, we can replace &lt;code&gt;%a1&lt;&#x2F;code&gt; with &lt;code&gt;%t0&lt;&#x2F;code&gt;, and update the value stack to &lt;code&gt;[(bb1, 1), (bb2, %t0), (bb3, %t1)]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    id3[&amp;lt;span&amp;gt;bb3&amp;lt;&amp;#x2F;span&amp;gt;\n %t1 = add %t0, %t0]
&lt;&#x2F;div&gt;
&lt;p&gt;And then we are led back to &lt;code&gt;bb2&lt;&#x2F;code&gt;, since &lt;code&gt;bb2&lt;&#x2F;code&gt; is already visited, we just need to update &lt;code&gt;phi&lt;&#x2F;code&gt;&#x27;s from with the current value of &lt;code&gt;a&lt;&#x2F;code&gt; now.&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    id2[&amp;lt;span&amp;gt;bb2&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;p&amp;gt;%a_bb2 = phi bb1.1, bb3.%t1 &amp;lt;&amp;#x2F;p&amp;gt; %t0 = add 1, 1]
&lt;&#x2F;div&gt;
&lt;p&gt;And then we come back to &lt;code&gt;bb3&lt;&#x2F;code&gt; and take another branch, which leads us to &lt;code&gt;bb8&lt;&#x2F;code&gt;, and make it:&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    id8[&amp;lt;span&amp;gt;bb8&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;p&amp;gt;%a_bb8 = phi bb3.%t1&amp;lt;&amp;#x2F;p&amp;gt;ret %a_bb8]
&lt;&#x2F;div&gt;
&lt;p&gt;(Remember the value stack becomes &lt;code&gt;[(bb1, 1), (bb2, %t0), (bb3, %t1), (bb8, %a_bb8)]&lt;&#x2F;code&gt; after visiting the &lt;code&gt;phi&lt;&#x2F;code&gt; statement.)&lt;&#x2F;p&gt;
&lt;p&gt;Then we go back to visit &lt;code&gt;bb4&lt;&#x2F;code&gt; from &lt;code&gt;bb1&lt;&#x2F;code&gt;, and then &lt;code&gt;bb5&lt;&#x2F;code&gt;, &lt;code&gt;bb7&lt;&#x2F;code&gt; and &lt;code&gt;bb6&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, we&#x27;ll get:&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    id0(Entry)
    id1[&amp;lt;span&amp;gt;bb1&amp;lt;&amp;#x2F;span&amp;gt;\n ...]
    id2[&amp;lt;span&amp;gt;bb2&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;p&amp;gt;%a_bb2 = phi bb1.1, bb3.%t1 &amp;lt;&amp;#x2F;p&amp;gt; %t0 = add 1, 1]
    id3[&amp;lt;span&amp;gt;bb3&amp;lt;&amp;#x2F;span&amp;gt;\n %t1 = add %t0, %t0]
    id4[&amp;lt;span&amp;gt;bb4&amp;lt;&amp;#x2F;span&amp;gt;\n...]
    id5[&amp;lt;span&amp;gt;bb5&amp;lt;&amp;#x2F;span&amp;gt;\n...]
    id6[&amp;lt;span&amp;gt;bb6&amp;lt;&amp;#x2F;span&amp;gt;\n...]
    id7[&amp;lt;span&amp;gt;bb7&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;p&amp;gt;%a_bb7 = phi bb5.2, bb6.3&amp;lt;&amp;#x2F;p&amp;gt;]
    id8[&amp;lt;span&amp;gt;bb8&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;p&amp;gt;%a_bb8 = phi bb3.%t1, bb7.%a_bb7&amp;lt;&amp;#x2F;p&amp;gt;ret %a_bb8]
    id9(End)
    id0 --&amp;gt; id1
    id1 --&amp;gt; id2
    id1 --&amp;gt; id4
    id2 --&amp;gt; id3
    id3 --&amp;gt; id2
    id3 --&amp;gt; id8
    id4 --&amp;gt; id5
    id4 --&amp;gt; id6
    id5 --&amp;gt; id7
    id6 --&amp;gt; id7
    id7 --&amp;gt; id8
    id8 --&amp;gt; id9
&lt;&#x2F;div&gt;
&lt;p&gt;Now all &lt;code&gt;load&lt;&#x2F;code&gt;s and &lt;code&gt;store&lt;&#x2F;code&gt;s for variable &lt;code&gt;a&lt;&#x2F;code&gt; are eliminated, and we no longer need &lt;code&gt;alloca&lt;&#x2F;code&gt; for variable &lt;code&gt;a&lt;&#x2F;code&gt;. And the function is ready for further optimization.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;This article introduces how to promote variables in memory to register, ie. eliminate &lt;code&gt;load&lt;&#x2F;code&gt;s and &lt;code&gt;store&lt;&#x2F;code&gt;s and insert &lt;code&gt;phi&lt;&#x2F;code&gt;s in SSA form IR. And give a detailed example to show how to do it.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;This is an LLVM-like IR, &lt;code&gt;alloca&lt;&#x2F;code&gt; here means we will save some space on the stack, and we can &lt;code&gt;store&lt;&#x2F;code&gt; values into this space and &lt;code&gt;load&lt;&#x2F;code&gt; from it, I assume every other thing is simple enough to be understood by anyone who knows what SSA is.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;Though these registers are just logical, i.e. they can still be leaked to the stack when doing codegen, optimizing them into logical registers can engage these variables in further optimization and make the codegen process much easier.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;Note the phi node doesn&#x27;t have to be put in the basic block the &lt;code&gt;load&lt;&#x2F;code&gt; statement is in, we can put it in a basic block that after this store but dominate this &lt;code&gt;load&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;LLVM calls this process &quot;renaming&quot;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;5&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;5&lt;&#x2F;sup&gt;
&lt;p&gt;Here we have a good example of why mem2reg is important: obviously, &lt;code&gt;t0&lt;&#x2F;code&gt; can be replaced with constant value &lt;code&gt;2&lt;&#x2F;code&gt;, which is hard to be discovered before mem2reg.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;style&gt;
.nodeLabel &gt; span {
    color: white !important;
    font-size: 10px;
    background: #666;
    padding: 4px;
    border-radius: 8px;
}
.nodeLabel &gt; p {
    color: red;
    margin: 0;
    font-size: 16px;
}
&lt;&#x2F;style&gt;</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Elementary Geometry In Agda</title>
        <published>2022-10-24T03:35:10.362+00:00</published>
        <updated>2022-10-24T03:35:10.362+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/elementary-geometry-in-agda/"/>
        <id>https://longfangsong.github.io/en/elementary-geometry-in-agda/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/elementary-geometry-in-agda/">&lt;p&gt;I&#x27;m playing with Agda recently, and since some of my friends&#x27; teacher are working on human understandable AI assisted theory proving. And IMO type theory base theorem prover is a better way than algebra-based proof methods (eg. Wenjun Wu&#x27;s method) to generate human understandable proofs. And I do hope we can have an AI version of &lt;a href=&quot;https:&#x2F;&#x2F;agda.readthedocs.io&#x2F;en&#x2F;latest&#x2F;tools&#x2F;auto.html&quot;&gt;Agsy&lt;&#x2F;a&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll start with &lt;em&gt;Στοιχεῖα&lt;&#x2F;em&gt;, the source of geometry.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll show how to prove Proposition 1, and introduce how to represent the definitions and postulates here.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;To(We can) construct an equilateral triangle on a given finite straight-line. —— &lt;em&gt;Στοιχεῖα&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So we need to define what is a finite straight-line, and what is an equilateral triangle.&lt;&#x2F;p&gt;
&lt;p&gt;And the proof process use circles, which also needs to be defined.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;definitions&quot;&gt;Definitions&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;point&quot;&gt;Point&lt;&#x2F;h3&gt;
&lt;p&gt;So let&#x27;s start with the most basic thing: a point.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Point &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set where
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;constructor newPoint
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pointId &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℕ
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We give each point an id here, to disguise different points.&lt;&#x2F;p&gt;
&lt;p&gt;And we can represent the proportion two points are identical by the following type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;data PointEq&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Point&lt;&#x2F;span&gt;&lt;span&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Point &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set where
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;PointEq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x x
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;line-segment&quot;&gt;Line Segment&lt;&#x2F;h3&gt;
&lt;p&gt;Now we can define a line segment:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;LineSegment &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set where
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;constructor lineSeg
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Point
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Point
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineLength &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℚ
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nonNegative &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;NonNegative &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineLength
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note we require the length of the line segment&#x27;s length to be a non-negative rational number.&lt;&#x2F;p&gt;
&lt;p&gt;We use rational number here, because we often needs to take point of n-section on a line segment, since rational number is almost closed under division, it&#x27;s convenient to represent line length in this way.&lt;&#x2F;p&gt;
&lt;p&gt;Though not used in this post, we can define a function to cast zero-length line segment back and forth to a single point.&lt;&#x2F;p&gt;
&lt;p&gt;And we can &quot;reverse&quot; a line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;LineSegment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym ls &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineSeg&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to ls&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from ls&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineLength ls&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nonNegative ls&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;circle&quot;&gt;Circle&lt;&#x2F;h3&gt;
&lt;p&gt;Similarly, we can define a circle:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Circle &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set where
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;constructor circle
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;center &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Point
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;radius &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℚ
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nonNegative &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;NonNegative &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;radius
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;triangle&quot;&gt;Triangle&lt;&#x2F;h3&gt;
&lt;p&gt;I adopt the edge based definition of triangle here, which is more easy to use.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Triangle &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set where
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;constructor from&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edges
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edge0 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;LineSegment
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edge1 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;LineSegment
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edge2 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;LineSegment
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edgesConnected &lt;&#x2F;span&gt;&lt;span&gt;: 
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;PointEq&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to edge0&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from edge1&lt;&#x2F;span&gt;&lt;span&gt;)) ×
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;PointEq&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to edge1&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from edge2&lt;&#x2F;span&gt;&lt;span&gt;)) ×
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;PointEq&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to edge2&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from edge0&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we can define equilateral triangle like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equilateral &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Triangle&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equilateral&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edges edge0 edge1 edge2 _&lt;&#x2F;span&gt;&lt;span&gt;) = 
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineLength edge0 ℚ&lt;&#x2F;span&gt;&lt;span&gt;.≃ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineLength edge1&lt;&#x2F;span&gt;&lt;span&gt;) ×
&lt;&#x2F;span&gt;&lt;span&gt;     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineLength edge0 ℚ&lt;&#x2F;span&gt;&lt;span&gt;.≃ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineLength edge2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;postulates&quot;&gt;Postulates&lt;&#x2F;h2&gt;
&lt;p&gt;There are two postulates in &lt;em&gt;Στοιχεῖα&lt;&#x2F;em&gt; hidden in these definitions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We can draw a straight-line from any point to any point.&lt;&#x2F;li&gt;
&lt;li&gt;We can draw a circle with any center and radius.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These two are all we need this time.&lt;&#x2F;p&gt;
&lt;p&gt;However, there&#x27;s several missing postulates in &lt;em&gt;Στοιχεῖα&lt;&#x2F;em&gt;, which made the proof in it not very rigorous, we&#x27;ll see later.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;common-notions&quot;&gt;Common Notions&lt;&#x2F;h2&gt;
&lt;p&gt;These are basically equivalent to the propositions in Agda&#x27;s stdlib, especially &lt;a href=&quot;https:&#x2F;&#x2F;agda.github.io&#x2F;agda-stdlib&#x2F;Data.Rational.Properties.html&quot;&gt;Data.Rational.Properties&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-proof&quot;&gt;The proof&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;the-proposition&quot;&gt;The proposition&lt;&#x2F;h3&gt;
&lt;p&gt;We can write it as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equilateral&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;triangle &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;line &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;) → .{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℚ &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineLength line &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Triangle&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ t &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equilateral t&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which can be read as:&lt;&#x2F;p&gt;
&lt;p&gt;Given a line segment &lt;code&gt;line&lt;&#x2F;code&gt;, which length is &lt;code&gt;&amp;gt; 0&lt;&#x2F;code&gt;, there exist a triangle which is equilateral.&lt;&#x2F;p&gt;
&lt;p&gt;And it&#x27;s equivalent to the origin proposition.&lt;&#x2F;p&gt;
&lt;p&gt;According to the book, we can draw two circles and use the intersection point as the third  vertex of the triangle, however, Εὐκλείδης made a mistake here, since there&#x27;s no way to proof intersection point exists.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s just posulate it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;circle&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;intersection &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c1 c2 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;    → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connectMidLine &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;PointEq&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;center c1&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from connectMidLine&lt;&#x2F;span&gt;&lt;span&gt;)) 
&lt;&#x2F;span&gt;&lt;span&gt;    → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;PointEq&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;center c2&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to connectMidLine&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    → .{
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineLength connectMidLine&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;radius c1&lt;&#x2F;span&gt;&lt;span&gt;) + (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;radius c2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    → .{
&lt;&#x2F;span&gt;&lt;span&gt;        ∣ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;radius c1&lt;&#x2F;span&gt;&lt;span&gt;) - (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;radius c2&lt;&#x2F;span&gt;&lt;span&gt;) ∣ &amp;lt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineLength connectMidLine&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Point &lt;&#x2F;span&gt;&lt;span&gt;× &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Point&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p1 &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p2&lt;&#x2F;span&gt;&lt;span&gt;) →
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;LineSegment &lt;&#x2F;span&gt;&lt;span&gt;× &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;) × (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;LineSegment &lt;&#x2F;span&gt;&lt;span&gt;× &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    ))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;circle&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;intersection c1 c2 connectMidLine c1Mid c2Mid &lt;&#x2F;span&gt;&lt;span&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p0 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newPoint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p1 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newPoint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p0 &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p1&lt;&#x2F;span&gt;&lt;span&gt;) , (
&lt;&#x2F;span&gt;&lt;span&gt;        ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineSeg&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;center c1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p0&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;radius c1&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nonNegative c1&lt;&#x2F;span&gt;&lt;span&gt;)) , 
&lt;&#x2F;span&gt;&lt;span&gt;         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineSeg&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;center c2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p0&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;radius c2&lt;&#x2F;span&gt;&lt;span&gt;)) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nonNegative c2&lt;&#x2F;span&gt;&lt;span&gt;)), 
&lt;&#x2F;span&gt;&lt;span&gt;        ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineSeg&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;center c1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p1&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;radius c1&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nonNegative c1&lt;&#x2F;span&gt;&lt;span&gt;)) , 
&lt;&#x2F;span&gt;&lt;span&gt;         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineSeg&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;center c2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p1&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;radius c2&lt;&#x2F;span&gt;&lt;span&gt;)) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nonNegative c2&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note we have to provide evidence here that the length of the connecting-circle-center line is less than the sum of the radius of the two circles, and abs(difference of the radius of the two circles) is less than the length of the connecting line, so there can be two intersection points exists.&lt;&#x2F;p&gt;
&lt;p&gt;So basically the proof can be written as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equilateral&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;triangle line &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;} = 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c1 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;circle&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from line&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineLength line&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nonNegative line&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c2 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;circle&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to line&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineLength line&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nonNegative line&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p0 &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p1&lt;&#x2F;span&gt;&lt;span&gt;) , ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l0 &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l1&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;circle&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;intersection c1 c2 line PointEq&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl PointEq&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl &lt;&#x2F;span&gt;&lt;span&gt;{?} {?}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edges line l1&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym l0&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;)) , (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;refl&lt;&#x2F;code&gt;s here are just proofs for things that are obviously equal.&lt;&#x2F;p&gt;
&lt;p&gt;For the &lt;code&gt;?&lt;&#x2F;code&gt; parts, we need to fill in evidence for &lt;code&gt;lineLength line + lineLength line &amp;gt; lineLength line&lt;&#x2F;code&gt; and &lt;code&gt;∣ lineLength line - lineLength line ∣ &amp;lt; lineLength line&lt;&#x2F;code&gt;, which is surprisingly hard:&lt;&#x2F;p&gt;
&lt;p&gt;For &lt;code&gt;lineLength line + lineLength line &amp;gt; lineLength line&lt;&#x2F;code&gt;, which is actually means for a positive numbers, sum of two such numbers is greater than itself, we need to use the &lt;code&gt;monoˡ&lt;&#x2F;code&gt; property of &lt;code&gt;+&lt;&#x2F;code&gt; on rational number, which is equivalent with &lt;em&gt;Common Notion 5&lt;&#x2F;em&gt; of the book.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℚ&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℚ &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;→ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x x p &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strict
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x       &lt;&#x2F;span&gt;&lt;span&gt;≡⟨ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym &lt;&#x2F;span&gt;&lt;span&gt;∘ +-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;identityˡ&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;⟩
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℚ &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x  &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;⟨ +-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;monoˡ&lt;&#x2F;span&gt;&lt;span&gt;-&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x p &lt;&#x2F;span&gt;&lt;span&gt;⟩
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x
&lt;&#x2F;span&gt;&lt;span&gt;    ∎)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open ℚ&lt;&#x2F;span&gt;&lt;span&gt;.≤-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Reasoning
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For &lt;code&gt;∣ lineLength line - lineLength line ∣ &amp;lt; lineLength line&lt;&#x2F;code&gt;, first we prove &lt;code&gt;∣x - x∣ ≡ 0&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;≡&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℚ&lt;&#x2F;span&gt;&lt;span&gt;) → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℚ&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;≡&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;begin
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x   &lt;&#x2F;span&gt;&lt;span&gt;≡⟨ +-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;comm&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;) (- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;) ⟩
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;≡⟨ +-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inverseˡ x &lt;&#x2F;span&gt;&lt;span&gt;⟩
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℚ      &lt;&#x2F;span&gt;&lt;span&gt;∎)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open &lt;&#x2F;span&gt;&lt;span&gt;≡-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Reasoning
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;≡&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;⇒∣&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;∣≡&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℚ&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℚ &lt;&#x2F;span&gt;&lt;span&gt;→ ∣ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;∣ ≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℚ
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;≡&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;⇒∣&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;∣≡&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eqz &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trans&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ℚ&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;⇒∣&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;∣≡&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt; (≤-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reflexive&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym eqz&lt;&#x2F;span&gt;&lt;span&gt;))) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eqz
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span&gt;∣&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;∣&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℚ&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℚ &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;→ ∣ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;∣ &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x
&lt;&#x2F;span&gt;&lt;span&gt;∣&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;∣&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x x p &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strict
&lt;&#x2F;span&gt;&lt;span&gt;    ∣ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;∣   ≡⟨ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;≡&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;⇒∣&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;∣≡&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;≡&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;) ⟩
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℚ          &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;⟨ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;⟩
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x           &lt;&#x2F;span&gt;&lt;span&gt;∎)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open ℚ&lt;&#x2F;span&gt;&lt;span&gt;.≤-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Reasoning
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we can fill the &lt;code&gt;?&lt;&#x2F;code&gt;s, and get the final proof:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equilateral&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;triangle &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;line &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;) → .{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℚ &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineLength line &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Triangle&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ t &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equilateral t&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equilateral&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;triangle line &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;} = 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c1 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;circle&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from line&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineLength line&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nonNegative line&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c2 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;circle&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to line&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineLength line&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nonNegative line&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p0 &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p1&lt;&#x2F;span&gt;&lt;span&gt;) , ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l0 &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l1&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;circle&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;intersection c1 c2 line PointEq&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl PointEq&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineLength line&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;} {∣&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;∣&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineSegment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineLength line&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edges line l1&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym l0&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;)) , (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you see the basic idea of how to use the agda to prove propositions in elementary geometry.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What&#x27;s next?&lt;&#x2F;h2&gt;
&lt;p&gt;There remains a lot of work to do. For example, how to define angles (I may use &lt;code&gt;1ℚ&lt;&#x2F;code&gt; as right angle because postulates in the book are based on right angles.), and how to present the relations of lines and points (maybe &lt;code&gt;intersect-on-point&lt;&#x2F;code&gt; and &lt;code&gt;parallel&lt;&#x2F;code&gt;, etc).&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Sometimes even GitHub copilot can generate some correct proof code. But what I had in mind is some kind of AI assisted heuristically proof searching, instead of blindly NLP like code generation.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How to prove 2 ≤ 3 in Agda</title>
        <published>2022-10-14T16:58:06.023+00:00</published>
        <updated>2022-10-14T16:58:06.023+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/decidable-in-agda/"/>
        <id>https://longfangsong.github.io/en/decidable-in-agda/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/decidable-in-agda/">&lt;p&gt;I&#x27;m currently exploring Euclidean geometry with Agda, and sometimes, I need to provide an &lt;strong&gt;evidence&lt;&#x2F;strong&gt; for relations like:&lt;&#x2F;p&gt;
&lt;p&gt;$$
1 + 1 &amp;gt; 1
$$&lt;&#x2F;p&gt;
&lt;p&gt;(This one is used in proving that there must be two different intersection points for two circles with a radius of 1 when proving Proposition 1 in Στοιχεῖα)&lt;&#x2F;p&gt;
&lt;p&gt;In fact, when I first encountered this problem, I found it difficult to prove this &quot;obvious&quot; proposition&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, especially when these &lt;code&gt;1&lt;&#x2F;code&gt;s are actually &lt;code&gt;1ℚ&lt;&#x2F;code&gt;. I tried hard to find a tool to do this in the stdlib and finally discovered those &lt;code&gt;Decidable&lt;&#x2F;code&gt; related concepts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-prove-2-3&quot;&gt;How to prove 2 ≤ 3&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s start small, how can we provide &lt;em&gt;evidence&lt;&#x2F;em&gt; that &lt;code&gt;2 ≤ 3&lt;&#x2F;code&gt;, when &lt;code&gt;2&lt;&#x2F;code&gt; and &lt;code&gt;3&lt;&#x2F;code&gt; are &lt;code&gt;ℕ&lt;&#x2F;code&gt;s in Agda?&lt;&#x2F;p&gt;
&lt;p&gt;Examine the definition of &lt;code&gt;≤&lt;&#x2F;code&gt; in &lt;code&gt;Data.Nat.Base&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Rel ℕ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ℓ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀ &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;}                 → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zero  &lt;&#x2F;span&gt;&lt;span&gt;≤ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀ &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m n&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span&gt;≤ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;suc m &lt;&#x2F;span&gt;&lt;span&gt;≤ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;suc n
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So &lt;code&gt;z≤n&lt;&#x2F;code&gt; is the evidence for &lt;code&gt;0 ≤ n&lt;&#x2F;code&gt;, and &lt;code&gt;s≤s&lt;&#x2F;code&gt; is the evidence for &lt;code&gt;m ≤ n&lt;&#x2F;code&gt; when &lt;code&gt;m ≤ n&lt;&#x2F;code&gt; is given. We can prove &lt;code&gt;2 ≤ 3&lt;&#x2F;code&gt; by using &lt;code&gt;s≤s&lt;&#x2F;code&gt; twice on &lt;code&gt;z≤n&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;≤ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s z&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;push-it-further&quot;&gt;Push it further&lt;&#x2F;h2&gt;
&lt;p&gt;This seems easy, right? But what if we want to prove, say &lt;code&gt;99 ≤ 100&lt;&#x2F;code&gt;? It&#x27;s insane to use &lt;code&gt;s≤s&lt;&#x2F;code&gt; 99 times, right?&lt;&#x2F;p&gt;
&lt;p&gt;We can also find another version of &lt;code&gt;≤&lt;&#x2F;code&gt;, which returns &lt;code&gt;Bool&lt;&#x2F;code&gt;s in &lt;code&gt;Data.Nat&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;≤ᵇ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m n &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℕ&lt;&#x2F;span&gt;&lt;span&gt;) → Bool
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zero  &lt;&#x2F;span&gt;&lt;span&gt;≤ᵇ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;suc m &lt;&#x2F;span&gt;&lt;span&gt;≤ᵇ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ᵇ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ᵇ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Nat &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Nat &lt;&#x2F;span&gt;&lt;span&gt;→ Bool
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_     &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ᵇ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zero  &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zero  &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ᵇ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;suc _ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;suc n &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ᵇ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;suc m &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So we know the value of the term &lt;code&gt;99 ≤ᵇ 100&lt;&#x2F;code&gt; is (&lt;code&gt;≡&lt;&#x2F;code&gt;) &lt;code&gt;true&lt;&#x2F;code&gt;. The &lt;em&gt;computation&lt;&#x2F;em&gt; process of &lt;code&gt;≤ᵇ&lt;&#x2F;code&gt; seems somewhat like, or at least related to, an &lt;em&gt;evidence&lt;&#x2F;em&gt; of &lt;code&gt;99 ≤ 100&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And this is where &lt;code&gt;Decidable&lt;&#x2F;code&gt; things can help.&lt;&#x2F;p&gt;
&lt;p&gt;The proof of &lt;code&gt;99 ≤ 100&lt;&#x2F;code&gt; can be written as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;99&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;99 &lt;&#x2F;span&gt;&lt;span&gt;≤ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;99&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span&gt;= ≤ᵇ⇒≤ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;99 100 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, what is &lt;code&gt;≤ᵇ⇒≤&lt;&#x2F;code&gt;? Why do we need to pass a &lt;code&gt;tt&lt;&#x2F;code&gt; here? Let&#x27;s examine the definition of &lt;code&gt;≤ᵇ⇒≤&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span&gt;≤ᵇ⇒≤ : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m n &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span&gt;≤ᵇ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span&gt;≤ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n
&lt;&#x2F;span&gt;&lt;span&gt;≤ᵇ⇒≤ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zero    n m&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n
&lt;&#x2F;span&gt;&lt;span&gt;≤ᵇ⇒≤ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;suc m&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n m&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;= &amp;lt;ᵇ⇒&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m n m&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span&gt;&amp;lt;⇒&amp;lt;ᵇ : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀ &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m n&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ᵇ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;⇒&amp;lt;ᵇ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s z&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)       = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tt
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;⇒&amp;lt;ᵇ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s m&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)) = &amp;lt;⇒&amp;lt;ᵇ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s m&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span&gt;: Bool → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;true  &lt;&#x2F;span&gt;&lt;span&gt;= ⊤
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span&gt;= ⊥
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, for &lt;code&gt;≤ᵇ⇒≤&lt;&#x2F;code&gt;, we input the numbers we want to compare and then provide a &lt;code&gt;tt&lt;&#x2F;code&gt; to the type checker, which checks whether &lt;code&gt;T (m ≤ᵇ n)&lt;&#x2F;code&gt; is &lt;code&gt;tt&lt;&#x2F;code&gt;. If it is, we obtain the evidence of &lt;code&gt;m ≤ n&lt;&#x2F;code&gt;; otherwise, the type checker will complain.&lt;&#x2F;p&gt;
&lt;p&gt;All other details in &lt;code&gt;≤ᵇ⇒≤&lt;&#x2F;code&gt; are trivial, just naive pattern matching.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;decidable&quot;&gt;Decidable&lt;&#x2F;h3&gt;
&lt;p&gt;You might have noticed another kind of &lt;code&gt;≤&lt;&#x2F;code&gt;: &lt;code&gt;≤?&lt;&#x2F;code&gt;. What&#x27;s that for? Let&#x27;s examine its definition.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;≤?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Decidable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span&gt;≤? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;′ (≤ᵇ⇒≤ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m n&lt;&#x2F;span&gt;&lt;span&gt;) ≤⇒≤ᵇ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;? (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span&gt;≤ᵇ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are several unfamiliar things in this definition, so let&#x27;s examine them one by one.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;decidable-1&quot;&gt;&lt;code&gt;Decidable&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Decidable &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;REL A B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ℓ &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Decidable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;∼&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x y &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Dec&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;∼ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;REL&lt;&#x2F;code&gt; here represents an abstraction of binary relations between two types (in other words, heterogeneous binary relations). So &lt;code&gt;Decidable&lt;&#x2F;code&gt; means that for each &lt;code&gt;x&lt;&#x2F;code&gt; and &lt;code&gt;y&lt;&#x2F;code&gt; in &lt;code&gt;A&lt;&#x2F;code&gt; and &lt;code&gt;B&lt;&#x2F;code&gt;, we have &lt;code&gt;Dec (x op y)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The really interesting part is &lt;code&gt;Dec&lt;&#x2F;code&gt;, which is a record type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Dec &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;P &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;constructor _because_
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;does  &lt;&#x2F;span&gt;&lt;span&gt;: Bool
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;proof &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Reflects P &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;does
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;data Reflects &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;P &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;) : Bool → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ofʸ &lt;&#x2F;span&gt;&lt;span&gt;: ( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Reflects P &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ofⁿ &lt;&#x2F;span&gt;&lt;span&gt;: (¬&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;: ¬ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Reflects P &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;Reflects&lt;&#x2F;code&gt; type indicates that the truth value of the proposition &lt;code&gt;P&lt;&#x2F;code&gt; is reflected (or, in other words, determined) by the &lt;code&gt;Bool&lt;&#x2F;code&gt; value. It has two constructors: &lt;code&gt;ofʸ&lt;&#x2F;code&gt;, which means &lt;code&gt;P&lt;&#x2F;code&gt; is true, and &lt;code&gt;ofⁿ&lt;&#x2F;code&gt;, which means &lt;code&gt;P&lt;&#x2F;code&gt; is false.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Reflects P b&lt;&#x2F;code&gt; is equivalent to &lt;code&gt;if b then P else ¬ P&lt;&#x2F;code&gt;, and these two forms can be converted back and forth using the following two functions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;of &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀ &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then P else &lt;&#x2F;span&gt;&lt;span&gt;¬ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;P &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Reflects P &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;of &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;} ¬&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ofⁿ &lt;&#x2F;span&gt;&lt;span&gt;¬&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;of &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;}  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ofʸ p
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invert &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀ &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Reflects P &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then P else &lt;&#x2F;span&gt;&lt;span&gt;¬ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;P
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invert&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ofʸ  p&lt;&#x2F;span&gt;&lt;span&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invert&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ofⁿ &lt;&#x2F;span&gt;&lt;span&gt;¬&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;) = ¬&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And &lt;code&gt;Dec&lt;&#x2F;code&gt; is simply a combination of a &lt;code&gt;Bool&lt;&#x2F;code&gt; and the proof that a proposition &lt;code&gt;P&lt;&#x2F;code&gt;&#x27;s truth value is reflected by the &lt;code&gt;Bool&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There are also two patterns:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pattern yes p &lt;&#x2F;span&gt;&lt;span&gt;=  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;true because ofʸ  p
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pattern no &lt;&#x2F;span&gt;&lt;span&gt;¬&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;false because ofⁿ &lt;&#x2F;span&gt;&lt;span&gt;¬&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which can be understand from their literal meaning.&lt;&#x2F;p&gt;
&lt;p&gt;Now we know that &lt;code&gt;Decidable&lt;&#x2F;code&gt; means for each &lt;code&gt;x&lt;&#x2F;code&gt; and &lt;code&gt;y&lt;&#x2F;code&gt; in &lt;code&gt;A&lt;&#x2F;code&gt; and &lt;code&gt;B&lt;&#x2F;code&gt;, there is a &lt;code&gt;Bool&lt;&#x2F;code&gt; that reflects the relationship &lt;code&gt;x op y&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;t&quot;&gt;&lt;code&gt;T?&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;? : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Relation&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Unary&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Decidable T
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;does&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;proof&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt; ) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ofʸ _
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;proof&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ofⁿ λ&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Relation.Unary.Decidable&lt;&#x2F;code&gt; is the unary version of &lt;code&gt;Decidable&lt;&#x2F;code&gt; we mentioned earlier (&lt;code&gt;Decidable P = ∀ x → Dec (P x)&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;So, &lt;code&gt;T?&lt;&#x2F;code&gt; is a function that takes a &lt;code&gt;Bool&lt;&#x2F;code&gt; and returns an instance of &lt;code&gt;Decidable&lt;&#x2F;code&gt;, which is a term that demonstrates a certain proposition&#x27;s truth value is reflected by that &lt;code&gt;Bool&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;b&quot;&gt;&lt;code&gt;≤⇒≤ᵇ&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This is just the reverse of &lt;code&gt;≤ᵇ⇒≤&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span&gt;≤⇒≤ᵇ : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀ &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m n&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span&gt;≤ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span&gt;≤ᵇ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;≤⇒≤ᵇ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n         &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tt
&lt;&#x2F;span&gt;&lt;span&gt;≤⇒≤ᵇ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;@(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s _&lt;&#x2F;span&gt;&lt;span&gt;) = &amp;lt;⇒&amp;lt;ᵇ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;map&quot;&gt;&lt;code&gt;map′&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;′ : (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;P &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Q&lt;&#x2F;span&gt;&lt;span&gt;) → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Q &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Dec P &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Dec Q
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;does&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;′ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span&gt;→&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Q Q&lt;&#x2F;span&gt;&lt;span&gt;→&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;P &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;?)                   = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;does p&lt;&#x2F;span&gt;&lt;span&gt;?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;proof&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;′ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span&gt;→&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Q Q&lt;&#x2F;span&gt;&lt;span&gt;→&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;true  because&lt;&#x2F;span&gt;&lt;span&gt;  [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;])) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ofʸ&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span&gt;→&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Q&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invert&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;]))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;proof&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;′ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span&gt;→&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Q Q&lt;&#x2F;span&gt;&lt;span&gt;→&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;false because&lt;&#x2F;span&gt;&lt;span&gt; [¬&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;])) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ofⁿ&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invert&lt;&#x2F;span&gt;&lt;span&gt; [¬&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;] ∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Q&lt;&#x2F;span&gt;&lt;span&gt;→&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So &lt;code&gt;map′&lt;&#x2F;code&gt; means that if two propositions are in an &quot;iff&quot; relation, and one of them is &lt;code&gt;Dec&lt;&#x2F;code&gt;, then the other is also &lt;code&gt;Dec&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now we can return to &lt;code&gt;≤?&lt;&#x2F;code&gt; and understand what it is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;≤?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Decidable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span&gt;≤? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;′ (≤ᵇ⇒≤ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m n&lt;&#x2F;span&gt;&lt;span&gt;) ≤⇒≤ᵇ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;? (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span&gt;≤ᵇ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since &lt;code&gt;≤ᵇ⇒≤&lt;&#x2F;code&gt; and &lt;code&gt;≤⇒≤ᵇ&lt;&#x2F;code&gt; are inverse functions of each other, and &lt;code&gt;T? (m ≤ᵇ n)&lt;&#x2F;code&gt; is a &lt;code&gt;Dec&lt;&#x2F;code&gt; instance for &lt;code&gt;m ≤ᵇ n&lt;&#x2F;code&gt;, we can obtain a &lt;code&gt;Dec&lt;&#x2F;code&gt; instance for &lt;code&gt;m ≤ n&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So, what are the benefits of using &lt;code&gt;≤?&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;Well, we can extract both &lt;code&gt;Bool&lt;&#x2F;code&gt; values from a &lt;code&gt;Dec&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Dec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;does&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;≤? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- or
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isYes&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;≤? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- or
&lt;&#x2F;span&gt;&lt;span&gt;⌊ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;≤? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;⌋
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The advantage of &lt;code&gt;isYes&lt;&#x2F;code&gt; and the &lt;code&gt;⌊⌋&lt;&#x2F;code&gt; operator is that they can retain the typing information, whereas &lt;code&gt;Dec.does&lt;&#x2F;code&gt; is a naive &lt;code&gt;Bool&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We can also extract the evidence using a function called &lt;code&gt;toWitness&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;99&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;99 &lt;&#x2F;span&gt;&lt;span&gt;≤ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;99&lt;&#x2F;span&gt;&lt;span&gt;≤&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toWitness &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Q &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;99 &lt;&#x2F;span&gt;&lt;span&gt;≤? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toWitness &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Q &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Dec P&lt;&#x2F;span&gt;&lt;span&gt;} → True &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Q &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;P
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toWitness &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Q &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;true  because &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;]} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_  &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invert&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toWitness &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Q &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;false because  _ &lt;&#x2F;span&gt;&lt;span&gt;} ()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span&gt;True : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Dec P &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span&gt;True &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Q &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isYes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Q&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see that &lt;code&gt;Decidable&lt;&#x2F;code&gt; can be used in places where either a &lt;code&gt;Bool&lt;&#x2F;code&gt; or evidence is needed.
Therefore, it is always preferable to use &lt;code&gt;Decidable&lt;&#x2F;code&gt; instead of &lt;code&gt;Bool&lt;&#x2F;code&gt; when possible.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;use-cases&quot;&gt;Use cases&lt;&#x2F;h2&gt;
&lt;p&gt;Consider the following constructor of &lt;code&gt;ℚ&lt;&#x2F;code&gt; as an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℤ&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℕ&lt;&#x2F;span&gt;&lt;span&gt;) → {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;≢&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d &lt;&#x2F;span&gt;&lt;span&gt;≢&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℚ
&lt;&#x2F;span&gt;&lt;span&gt;(+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n      &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;) {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;≢&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;} =   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;normalize n       d &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;≢&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;(-[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt; ] &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;) {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;≢&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;} = - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;normalize&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;suc n&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;≢&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, &lt;code&gt;{d≢0 : d ≢0}&lt;&#x2F;code&gt; requires that the denominator of a rational number should not be zero.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;≢0&lt;&#x2F;code&gt; is defined as&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;≢&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;= False (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n ℕ&lt;&#x2F;span&gt;&lt;span&gt;.≟ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And &lt;code&gt;ℕ.≟&lt;&#x2F;code&gt; is very similar with &lt;code&gt;≤?&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;≟&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Decidable &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℕ&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;≡&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span&gt;≟ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;′ (≡ᵇ⇒≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m n&lt;&#x2F;span&gt;&lt;span&gt;) (≡⇒≡ᵇ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m n&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;? (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span&gt;≡ᵇ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By requiring an &lt;code&gt;≢0&lt;&#x2F;code&gt; instance (instead of requiring a &quot;real&quot; evidence of &lt;code&gt;n ≢ 0&lt;&#x2F;code&gt;), we can omit the proof when using number literals:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;half &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℚ
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;half &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℤ &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;I can write an Agda representation of Common Notion 5 in Στοιχεῖα, but I always try to use, and more importantly, understand the stdlib when possible.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Restart learning math • Mathematical logic (8)</title>
        <published>2022-10-05T04:43:34.167+00:00</published>
        <updated>2022-10-05T04:43:34.167+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/restart-math-logic-8/"/>
        <id>https://longfangsong.github.io/en/restart-math-logic-8/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/restart-math-logic-8/">&lt;p&gt;I have learnt a little bit about binary decision diagrams when trying to find out how FPGA synthesis works. The benefits of adopting this form is it is easier to be mapped onto a real life circuit (by comparing a subgraph with the graphs of existing circuit components), and it has a good balance of the complexity of doing $\times$ and $+$.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll start with the algorithms for OBDDs because the definition of BDD and OBDD is simple and intuitive, but I&#x27;ll still put the code which implements this data structure here.&lt;&#x2F;p&gt;
&lt;p&gt;(All BDDs in this article are ordered.)&lt;&#x2F;p&gt;
&lt;p&gt;You can view code of a working implementation &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;longfangsong&#x2F;logic-lab&#x2F;blob&#x2F;main&#x2F;src&#x2F;binary_decision_diagram.rs&quot;&gt;here&lt;&#x2F;a&gt;. And there&#x27;s also a demo of the code (ported to the browser via wasm) by the end of this article.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;convert-from-formulas&quot;&gt;Convert from formulas&lt;&#x2F;h3&gt;
&lt;p&gt;Though the book didn&#x27;t mention this algorithm, I still want to write this,
because in real life, most of times we get logic formulas instead of BDDs as user input.&lt;&#x2F;p&gt;
&lt;p&gt;So suppose we already have a (parsed) logic formula $f$, and we can have all atom variables inside it $v$, we can have a recursive algorithm to convert it into a BDD.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;if $v$ is empty, then the all variables must have had their values assigned, so we can just wrap the value of $f$ in a node and return it.&lt;&#x2F;li&gt;
&lt;li&gt;else, we take the first variable $v_1$ from $v$, generate a node $n$ for it, and then we can have two subformulas $f_1$ and $f_2$ by replacing $v_1$ with $true$ and $false$ respectively, which we can recursive call to get their BDDs&#x27; root $b_1$ and $b_0$. Then connect $n$ to $b_1$ and $b_0$ and return $n$.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In pseudo code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;from_formula&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;formula&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Expression) -&amp;gt; BDD {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;from_formula_recursive&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;formula&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Expression, 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; Graph, 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;known_values&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Map&amp;lt;Atom, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remain_values&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[Atom]
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; NodeRef {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; remain_values.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_empty&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_node = tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_node&lt;&#x2F;span&gt;&lt;span&gt;(formula.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span&gt;(known_values));
&lt;&#x2F;span&gt;&lt;span&gt;            new_node
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if let &lt;&#x2F;span&gt;&lt;span&gt;((consider_variable, remain_values)) = remain_values.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;split_first&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            known_values.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(consider_variable, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b_0 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;from_formula_recursive&lt;&#x2F;span&gt;&lt;span&gt;(formula, tree, known_values, remain_values);
&lt;&#x2F;span&gt;&lt;span&gt;            known_values.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(consider_variable, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b_1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;from_formula_recursive&lt;&#x2F;span&gt;&lt;span&gt;(formula, tree, known_values, remain_values);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_node = tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_node&lt;&#x2F;span&gt;&lt;span&gt;(consider_variable);
&lt;&#x2F;span&gt;&lt;span&gt;            tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_edge&lt;&#x2F;span&gt;&lt;span&gt;(new_node, b_0, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_edge&lt;&#x2F;span&gt;&lt;span&gt;(new_node, b_1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            new_node
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; tree = Graph::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; known_values = Map::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; remain_values = formula.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;all_atoms&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; root = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;from_formula_recursive&lt;&#x2F;span&gt;&lt;span&gt;(formula, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; tree, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; known_values, &amp;amp;remain_values);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;BDD &lt;&#x2F;span&gt;&lt;span&gt;{ root, tree }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Actually this algorithm is similar with &quot;recursive Shannon expansion&quot;, which we&#x27;ll use again in &lt;code&gt;apply&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;complexity&quot;&gt;Complexity&lt;&#x2F;h4&gt;
&lt;p&gt;Once the formula&#x27;s variables count increased by 1, we need to do 2 more recursive calls with 1 less variable.&lt;&#x2F;p&gt;
&lt;p&gt;Presume the graph is implemented in an efficient enough way, we have $T(n)=2T(n-1)+O(1)$, which lead us to $O(2^n)$, where $n$ is variable count.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reduce&quot;&gt;Reduce&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The algorithm reduce now traverses B layer by layer in a bottom-up fashion, beginning with the terminal nodes. In traversing B, it assigns an integer label id(n) to each node n of B, in such a way that the subOBDDs with root nodes n and m denote the same boolean function if, and only if, id(n) equals id(m).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I&#x27;ll write the pseudo code here, with a little more details:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bdd&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;BDD) -&amp;gt; BDD {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; first we need to aggregate the terminal nodes
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; true_nodes = bdd.tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;all_nodes&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;| n.value == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; false_nodes = bdd.tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;all_nodes&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;| n.value == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; true_nodes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;() &amp;amp;&amp;amp; false_nodes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;BDD&lt;&#x2F;span&gt;&lt;span&gt;::Empty;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt; true_nodes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;BDD&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;B0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt; false_nodes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;BDD&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;B1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; new_tree = Graph::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; map from &amp;quot;node in old graph&amp;quot; to &amp;quot;node in new graph&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; node_map = Map::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_true_node = new_tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_node&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_false_node = new_tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_node&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    true_nodes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;| node_map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(n, new_true_node));
&lt;&#x2F;span&gt;&lt;span&gt;    false_nodes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;| node_map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(n, new_false_node));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Since the node with smaller variable may depend on the larger variables,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; we need to use BinaryHeap here, so larger variables could be handled first
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; nodes_to_consider: BinaryHeap&amp;lt;_, &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;it| it.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;()&amp;gt; = true_nodes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;chain&lt;&#x2F;span&gt;&lt;span&gt;(false_nodes)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;it&lt;&#x2F;span&gt;&lt;span&gt;| it.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while let &lt;&#x2F;span&gt;&lt;span&gt;(node_to_consider, nodes_to_consider) = nodes_to_consider.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;split_first&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; node_map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;contains_key&lt;&#x2F;span&gt;&lt;span&gt;(node_to_consider) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; false_child_in_old_tree = node_to_consider.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;child&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; false_child_in_new_tree = node_map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(false_child_in_old_tree);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; true_child_in_old_tree = node_to_consider.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;child&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; true_child_in_new_tree = node_map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(true_child_in_old_tree);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; false_child_in_new_tree == true_child_in_new_tree {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; this node doesn&amp;#39;t make any difference
&lt;&#x2F;span&gt;&lt;span&gt;            node_map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(node_to_consider, false_child_in_new_tree);
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if let &lt;&#x2F;span&gt;&lt;span&gt;Some(equiv_node) = false_child_in_new_tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parents_on_side&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;intersection&lt;&#x2F;span&gt;&lt;span&gt;(true_child_in_new_tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parents_on_side&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; we can keep a &amp;quot;(new_tree.parent_on_side(false), new_tree.parent_on_side(true)) -&amp;gt; node&amp;quot; map to speed up this
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; this node is equivalent to another node
&lt;&#x2F;span&gt;&lt;span&gt;            node_map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(node_to_consider, equiv_node)
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; this node is unique
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_node = new_tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_node&lt;&#x2F;span&gt;&lt;span&gt;(node_to_consider.value);
&lt;&#x2F;span&gt;&lt;span&gt;            new_tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_edge&lt;&#x2F;span&gt;&lt;span&gt;(new_node, false_child_in_new_tree, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            new_tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_edge&lt;&#x2F;span&gt;&lt;span&gt;(new_node, true_child_in_new_tree, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            node_map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(node_to_consider, new_node);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        nodes_to_consider.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span&gt;(node_to_consider.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parents&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;BDD &lt;&#x2F;span&gt;&lt;span&gt;{ root: new_tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;(), tree: new_tree }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;complexity-1&quot;&gt;Complexity&lt;&#x2F;h4&gt;
&lt;p&gt;This algorithm considers each node once, and for &lt;code&gt;BinaryHeap&lt;&#x2F;code&gt; &quot;Insertion and popping the largest element have O(log(n)) time complexity&quot;, so the complexity is $O(nlogn)$, where $n$ is the origin BDD&#x27;s node count.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;apply&quot;&gt;Apply&lt;&#x2F;h3&gt;
&lt;p&gt;We can view this operation as an abstract over $\text{&amp;amp;}$ and $|$ operations on boolean functions, ie. &lt;strong&gt;apply&lt;&#x2F;strong&gt; a &lt;code&gt;fn (bool, bool) -&amp;gt; bool&lt;&#x2F;code&gt; to two boolean functions.&lt;&#x2F;p&gt;
&lt;p&gt;So basically we just split the &lt;code&gt;true&lt;&#x2F;code&gt; and &lt;code&gt;false&lt;&#x2F;code&gt; case for every single variable, and apply the function to the rest of the function.&lt;&#x2F;p&gt;
&lt;p&gt;Pseudo code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lhs&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;BDD, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rhs&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;BDD, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; BDD {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;apply_recursive&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result_tree&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; Graph,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lhs&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;BDD, 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rhs&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;BDD, 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lhs_node&lt;&#x2F;span&gt;&lt;span&gt;: NodeRef, 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rhs_node&lt;&#x2F;span&gt;&lt;span&gt;: NodeRef, 
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; NodeRef {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; these three are helper functions
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; view the large match first
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;explore_left&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lhs_variable&lt;&#x2F;span&gt;&lt;span&gt;: Atom) -&amp;gt; NodeRef {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; node = result_tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_node&lt;&#x2F;span&gt;&lt;span&gt;(lhs_variable);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; solve the problem when lhs_variable is false
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; next_lhs_node = lhs_node.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;child&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lhs_node_left = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;apply_recursive&lt;&#x2F;span&gt;&lt;span&gt;(result_tree, lhs, rhs, f, next_lhs_node, rhs_node);
&lt;&#x2F;span&gt;&lt;span&gt;            result_tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_edge&lt;&#x2F;span&gt;&lt;span&gt;(node, lhs_node_left, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; solve the problem when lhs_variable is true
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; next_lhs_node = lhs_node.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;child&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lhs_node_right = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;apply_recursive&lt;&#x2F;span&gt;&lt;span&gt;(result_tree, lhs, rhs, f, next_lhs_node, rhs_node);
&lt;&#x2F;span&gt;&lt;span&gt;            result_tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_edge&lt;&#x2F;span&gt;&lt;span&gt;(node, lhs_node_right, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            node
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;explore_right&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lhs_variable&lt;&#x2F;span&gt;&lt;span&gt;: Atom) -&amp;gt; NodeRef {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; symmetric to explore_left
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; omitted
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;explore_both&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;variable&lt;&#x2F;span&gt;&lt;span&gt;: Atom) -&amp;gt; NodeRef {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; node = result_tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_node&lt;&#x2F;span&gt;&lt;span&gt;(variable);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; solve the problem when variable is false
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; next_lhs_node = lhs_node.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;child&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; next_rhs_node = rhs_node.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;child&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; node_left = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;apply_recursive&lt;&#x2F;span&gt;&lt;span&gt;(result_tree, lhs, rhs, f, next_lhs_node, next_rhs_node);
&lt;&#x2F;span&gt;&lt;span&gt;            result_tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_edge&lt;&#x2F;span&gt;&lt;span&gt;(node, node_left, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; solve the problem when variable is true
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; next_lhs_node = lhs_node.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;child&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; next_rhs_node = rhs_node.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;child&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; node_left = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;apply_recursive&lt;&#x2F;span&gt;&lt;span&gt;(result_tree, lhs, rhs, f, next_lhs_node, next_rhs_node);
&lt;&#x2F;span&gt;&lt;span&gt;            result_tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_edge&lt;&#x2F;span&gt;&lt;span&gt;(node, node_left, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            node
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;(lhs_node.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;(), rhs_node.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(lhs_node.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;(), rhs_node.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;                graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_node&lt;&#x2F;span&gt;&lt;span&gt;(result)
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            (lhs_variable: Atom, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;) | ((lhs_variable: Atom, rhs_variable: Atom) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; lhs_variable &amp;lt; rhs_variable) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; variable only exists in lhs
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; so we can just dig in on the left side
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;explore_left&lt;&#x2F;span&gt;&lt;span&gt;(lhs_variable)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;, rhs_variable: Atom) | ((lhs_variable: Atom, rhs_variable: Atom) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; lhs_variable &amp;gt; rhs_variable) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; symmetric to the above
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;explore_right&lt;&#x2F;span&gt;&lt;span&gt;(rhs_variable)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            (variable: Atom, _) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; both lhs and rhs have this variable, so we need to explore both sides
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;explore_both&lt;&#x2F;span&gt;&lt;span&gt;(variable)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; new_graph = Graph::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lhs_node = lhs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; rhs_node = rhs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_root = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;apply_recursive&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; new_graph, lhs, rhs, f, lhs_node, rhs_node);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;BDD &lt;&#x2F;span&gt;&lt;span&gt;{ root: new_root, tree: new_graph }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Memoization can be added to &lt;code&gt;apply_recursive&lt;&#x2F;code&gt; to speed up the algorithm.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;complexity-2&quot;&gt;Complexity&lt;&#x2F;h4&gt;
&lt;p&gt;Assume there are $m$ nodes in &lt;code&gt;lhs&lt;&#x2F;code&gt; and $n$ in &lt;code&gt;rhs&lt;&#x2F;code&gt;, each time the recursive function split the problem into two sub-problems which are 1 element less of the original problem (suppose &lt;code&gt;explore_both&lt;&#x2F;code&gt; happens every time), ie. $T(m,n) = T(m-1, n-1) + O(1)$, which is $O(2^{mn})$, however, many of these sub-problems are duplicated. With memoization, we just need to consider each pair of &lt;code&gt;(lhs_node, rhs_node)&lt;&#x2F;code&gt; once, so the complexity is actually $O(mn)$.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;restrict&quot;&gt;Restrict&lt;&#x2F;h3&gt;
&lt;p&gt;Restrict is an operation which gives a new BDD which is the same as the original one, except that one of the variables is forced to be a certain value.&lt;&#x2F;p&gt;
&lt;p&gt;This is quite easy to implement, just connect the parent of the node of variable to the corresponding child of the node directly.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;restrict&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bdd&lt;&#x2F;span&gt;&lt;span&gt;: BDD, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;variable&lt;&#x2F;span&gt;&lt;span&gt;: Atom, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;variable_value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; BDD {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result = bdd.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; variable_nodes = result.tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;nodes&lt;&#x2F;span&gt;&lt;span&gt;(value == variable);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; node in variable_nodes {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; redirect_to = node.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;child&lt;&#x2F;span&gt;&lt;span&gt;(variable_value);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; edge in node.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;incoming_edges&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            result.graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_edge&lt;&#x2F;span&gt;&lt;span&gt;(edge.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;(), redirect_to, edge.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;            result.graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove_edge&lt;&#x2F;span&gt;&lt;span&gt;(edge);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        result.graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove_node&lt;&#x2F;span&gt;&lt;span&gt;(node);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    result
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;complexity-3&quot;&gt;Complexity&lt;&#x2F;h4&gt;
&lt;p&gt;If the data structure is efficient enough, this operation&#x27;s complexity is $O(n\cdot e_{avg})$, where $n$ is the count of nodes of this variable, and $e_{avg}$ is the average incoming edge count of these nodes.&lt;&#x2F;p&gt;
&lt;p&gt;However we always needs to &lt;code&gt;reduce&lt;&#x2F;code&gt; once after &lt;code&gt;restrict&lt;&#x2F;code&gt;, which is usually more expensive than &lt;code&gt;restrict&lt;&#x2F;code&gt; itself.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;exists&quot;&gt;Exists&lt;&#x2F;h3&gt;
&lt;p&gt;$∃x.f$ means &quot;whether $f$ can be true by make $x$ be true or false&quot;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span&gt;(bdd, x) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;restrict&lt;&#x2F;span&gt;&lt;span&gt;(bdd, x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;) | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;restrict&lt;&#x2F;span&gt;&lt;span&gt;(bdd, x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So a naive method is simply calculate &lt;code&gt;restrict(bdd, x, false)&lt;&#x2F;code&gt; and &lt;code&gt;restrict(bdd, x, true)&lt;&#x2F;code&gt;, then apply &lt;code&gt;|&lt;&#x2F;code&gt; on the results.&lt;&#x2F;p&gt;
&lt;p&gt;An possible optimization is that since the structure &quot;before&quot; x in the BDDs are identical, we just needs to do &lt;code&gt;restrict(bdd rooted in x, x, false) | restrict(bdd rooted in x, x, false)&lt;&#x2F;code&gt;, and &lt;code&gt;restrict(bdd rooted in x, x, bool)&lt;&#x2F;code&gt; is actually the left&#x2F;right child of &lt;code&gt;bdd rooted in x&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So the algorithm is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bdd&lt;&#x2F;span&gt;&lt;span&gt;: BDD, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;variable&lt;&#x2F;span&gt;&lt;span&gt;: Atom) -&amp;gt; BDD {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result = bdd.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; variable_nodes = result.tree.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;nodes&lt;&#x2F;span&gt;&lt;span&gt;(value == variable);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; node in variable_nodes {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lhs = result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;subtree&lt;&#x2F;span&gt;&lt;span&gt;(node.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;child&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; rhs = result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;subtree&lt;&#x2F;span&gt;&lt;span&gt;(node.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;child&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;        result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;replace_subtree&lt;&#x2F;span&gt;&lt;span&gt;(result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;subtree&lt;&#x2F;span&gt;&lt;span&gt;(node), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;(lhs, rhs, |));
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    result
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;live-demo&quot;&gt;Live demo&lt;&#x2F;h2&gt;
&lt;input id=&quot;lhs&quot;&gt;
&lt;select id=&quot;op&quot;&gt;
&lt;option value=&quot;&amp;&quot; selected&gt;&amp;&lt;&#x2F;option&gt;
&lt;option value=&quot;|&quot;&gt;|&lt;&#x2F;option&gt;
&lt;&#x2F;select&gt;
&lt;input id=&quot;rhs&quot;&gt;
&lt;p&gt;lhs:&lt;&#x2F;p&gt;
&lt;div id=&quot;lhs-display&quot;&gt;&lt;&#x2F;div&gt;
&lt;p&gt;rhs:&lt;&#x2F;p&gt;
&lt;div id=&quot;rhs-display&quot;&gt;&lt;&#x2F;div&gt;
&lt;p&gt;result:&lt;&#x2F;p&gt;
&lt;div id=&quot;result-display&quot;&gt;&lt;&#x2F;div&gt;
&lt;script type=&quot;module&quot;&gt;
    import { Graphviz } from &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;@hpcc-js&#x2F;wasm&#x2F;dist&#x2F;graphviz.js&quot;;
    import init, { BinaryDecisionDiagram } from &#x27;.&#x2F;logic-lab-wasm&#x2F;logic_lab.js&#x27;;
    (async () =&gt; {
        document.getElementById(&quot;lhs&quot;).value = &quot;&quot;;
        document.getElementById(&quot;rhs&quot;).value = &quot;&quot;;
        const graphvizPromise = Graphviz.load();
        const [graphviz, _] = await Promise.all([graphvizPromise, init()]);
        async function calculate() {
            try {
                let lhs_formula = document.getElementById(&quot;lhs&quot;).value;
                let lhs_bdd = BinaryDecisionDiagram.from_str(lhs_formula);
                let reduced_lhs = lhs_bdd.reduce();
                let dot_lhs = reduced_lhs.dot();
                document.getElementById(&quot;lhs-display&quot;).innerHTML = await graphviz.layout(dot_lhs, &quot;svg&quot;, &quot;dot&quot;);
                let rhs_formula = document.getElementById(&quot;rhs&quot;).value;
                let rhs_bdd = BinaryDecisionDiagram.from_str(rhs_formula);
                let reduced_rhs = rhs_bdd.reduce();
                let dot_rhs = reduced_rhs.dot();
                document.getElementById(&quot;rhs-display&quot;).innerHTML = await graphviz.layout(dot_rhs, &quot;svg&quot;, &quot;dot&quot;);
                let op = document.getElementById(&quot;op&quot;).value;
                let result;
                if (op === &quot;&amp;&quot;) {
                    result = reduced_lhs.and(reduced_rhs);
                } else {
                    result = reduced_lhs.or(reduced_rhs);
                }
                let dot = result.reduce().dot();
                document.getElementById(&quot;result-display&quot;).innerHTML = await graphviz.layout(dot, &quot;svg&quot;, &quot;dot&quot;);
            } catch (e) {
                console.log(e);
            }
        }
        document.getElementById(&quot;lhs&quot;).onkeyup = async (event) =&gt; {
            await calculate();
        }
        document.getElementById(&quot;rhs&quot;).onkeyup = async (event) =&gt; {
            await calculate();
        }
        document.getElementById(&quot;op&quot;).onchange = async (event) =&gt; {
            await calculate();
        }
    })();
&lt;&#x2F;script&gt;</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Restart learning math • Mathematical logic (7)</title>
        <published>2022-10-03T04:43:34.167+00:00</published>
        <updated>2022-10-03T04:43:34.167+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/restart-math-logic-7/"/>
        <id>https://longfangsong.github.io/en/restart-math-logic-7/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/restart-math-logic-7/">&lt;p&gt;Modal logic in the book is very different from what I thought. It turns out what I thought is modal logic is just one kind of its interpreting ($\square$ means always, and $\diamond$ means occasionally).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;basic-modal-logic&quot;&gt;Basic modal logic&lt;&#x2F;h2&gt;
&lt;p&gt;The language of basic modal logic is simple, just add unary connective $\square$ and $\diamond$ to propositional logic then we are done.&lt;&#x2F;p&gt;
&lt;p&gt;The model (Kripke model) of basic modal logic is specified by&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A world set $W$&lt;&#x2F;li&gt;
&lt;li&gt;A relation $R$ on $W$&lt;&#x2F;li&gt;
&lt;li&gt;A function $L : W → \mathcal{P}(Atoms)$, called the labelling function, basically this function give us information about which atom props are true.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Definition 5.4 on the book gives us a method on how we can use the model, basically $x \Vdash \phi$ means &quot;$\phi$ is true in world x&quot;, and we have a bunch of structural induction rules to form such a formula.&lt;&#x2F;p&gt;
&lt;p&gt;A model $\mathcal{M} = (W, R, L)$ of basic modal logic is said to satisfy a formula if every state in the model satisfies it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;formula-scheme&quot;&gt;Formula scheme&lt;&#x2F;h3&gt;
&lt;p&gt;All formulas which are same with each other on several top levels in their parsing tree are in the same formula scheme.&lt;&#x2F;p&gt;
&lt;p&gt;eg.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\phi \rightarrow \square \phi \wedge \phi
$$&lt;&#x2F;p&gt;
&lt;p&gt;is a scheme which contains&lt;&#x2F;p&gt;
&lt;p&gt;$$
p \rightarrow \square q \wedge r
$$&lt;&#x2F;p&gt;
&lt;p&gt;and&lt;&#x2F;p&gt;
&lt;p&gt;$$
q \rightarrow \square p \wedge r
$$&lt;&#x2F;p&gt;
&lt;p&gt;and&lt;&#x2F;p&gt;
&lt;p&gt;$$
(p \vee q) \rightarrow \square (r \vee s) \wedge (u \vee v)
$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;equivalences-between-modal-formulas&quot;&gt;Equivalences between modal formulas&lt;&#x2F;h3&gt;
&lt;p&gt;In any world $x$ of any model $\mathcal{M}=(W,R,L)$, for all $\phi \in \Gamma$, $x ⊫ \phi \rightarrow x ⊫ \psi$, we write this as $\Gamma \models ψ$, which means $\Gamma$ of basic modal logic semantically entails a formula $ψ$ of basic modal logic.&lt;&#x2F;p&gt;
&lt;p&gt;If $\phi \models ψ$ and $\phi \models \psi$, we say $\phi \equiv \psi$.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;valid-formulas&quot;&gt;Valid formulas&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A formula $\phi$ of basic modal logic is said to be valid if it is true in every world of every model, i.e. iff $(nothing) \models \phi$ holds.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;logic-engineering&quot;&gt;Logic engineering&lt;&#x2F;h2&gt;
&lt;p&gt;(Actually this chapter made feel strange, why we re-engineer basic modal logic instead of inventing new logic? These logic seems not that similar.)&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Restart learning math • Mathematical logic (6)</title>
        <published>2022-10-02T07:42:40.869+00:00</published>
        <updated>2022-10-02T07:42:40.869+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/restart-math-logic-6/"/>
        <id>https://longfangsong.github.io/en/restart-math-logic-6/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/restart-math-logic-6/">&lt;p&gt;Personally I don&#x27;t like model based correctness checking methods, they just check every possible states in a system in brute force, without generating any insight (eg. how each statement in a program helps it to reach the overall correctness) of the system or human readable&#x2F;understandable proof of the correctness, which IMO is very disgraceful.&lt;&#x2F;p&gt;
&lt;p&gt;So I think a more reasonable way is using a proof based checking method, which the book explains in chapter 4.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hoare-triples&quot;&gt;Hoare triples&lt;&#x2F;h2&gt;
&lt;p&gt;A Hoare triple is a triple of the form&lt;&#x2F;p&gt;
&lt;p&gt;$$
(|\phi|) P (|\psi|)
$$&lt;&#x2F;p&gt;
&lt;p&gt;Which means in a state where $\phi$ holds, executing $P$ will lead to a state where $\psi$ holds.&lt;&#x2F;p&gt;
&lt;p&gt;For example, if the program $P$ calculate a number whose square is less than $x$, so when input is $x$ and output is $y$, we have&lt;&#x2F;p&gt;
&lt;p&gt;$$
(|x &amp;gt; 0|) P (|y\times y &amp;lt; x|)
$$&lt;&#x2F;p&gt;
&lt;p&gt;So to prove the correctness of any program P, we need to assume a $\phi$ and get a $\psi$ with $P$ in some certain ways.&lt;&#x2F;p&gt;
&lt;p&gt;However, the possible result of P executing in $\phi$ is not just $\psi$ or $\neg\psi$, it&#x27;s also possible that P never terminates (if you are using a turing complete language, it is totally possible to write a dead loop), so we can distinguish partial correctness, which just assume the program will eventually terminate, and complete correctness, which needs a proof of it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;proof-calculus-for-partial-correctness&quot;&gt;Proof calculus for partial correctness&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;rules&quot;&gt;Rules&lt;&#x2F;h4&gt;
&lt;p&gt;Ref figure 4.1 of the book.&lt;&#x2F;p&gt;
&lt;p&gt;Note in &quot;Implied&quot; rule &quot;AR&quot; means arithmetic&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;weakest-precondition&quot;&gt;Weakest Precondition&lt;&#x2F;h4&gt;
&lt;p&gt;For each $\psi&#x27;$ after a $C$, we can get a $\psi$ before $C$, which can lead to $\psi&#x27;$ after $C$ by using one of the rules.&lt;&#x2F;p&gt;
&lt;p&gt;The only difficult rule to apply here is the &quot;Partial-while&quot; rule. Which needs part of $\psi&#x27;$ is a &quot;loop invariant&quot;, which holds before each iteration of the loop starts and still holds after the whole loop.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, finding such a loop invariant is not easy, it needs &quot;intelligence and ingenuity&quot;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;proof-calculus-for-total-correctness&quot;&gt;Proof calculus for total correctness&lt;&#x2F;h3&gt;
&lt;p&gt;Proof calculus for total correctness is similar to partial correctness, we just need to add a proof to show the loops will eventually terminated, this is usually done by &quot;identify an integer expression whose value can be shown to decrease every time we execute the body of the while-statement in question, but which is always non-negative&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;However it is not always possible to find such a proof, for example, I believe Collatz program terminates, but human beings haven&#x27;t found a way to show it terminates.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;programming-by-contract&quot;&gt;Programming by contract&lt;&#x2F;h3&gt;
&lt;p&gt;Good methodology, not feasible in most commercial softwares nowadays.&lt;&#x2F;p&gt;
&lt;p&gt;Nowadays there do exists some languages that support programming by contract, like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dafny-lang&#x2F;dafny&quot;&gt;Dafny&lt;&#x2F;a&gt;, but they are not widely used. It&#x27;s understandable, because it costs too much effort to practice. Most software just want to hit the market fast and get quick responses rather than being correct at the first place.&lt;&#x2F;p&gt;
&lt;p&gt;It might be a serious problem for program verification, few programs can be &quot;specified&quot; before being written, and since requirements changes rapidly, it&#x27;s hard to keep the specification, the requirements and the program in sync. And all the verification work is quiet hard and requires &quot;intelligence and ingenuity&quot;, a verification checker is sometimes annoying&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, even if it is, in most of times, correct.&lt;&#x2F;p&gt;
&lt;p&gt;Honestly, though I love the idea of programming by contract (and I always add as much asserts I can in my programs), I have to admit it&#x27;s not a good idea for nowadays software industry, which develops in a crazy speed. We just pile up shitty code to satisfied the customer. Correctness is not the most important thing here, but profitable is.&lt;&#x2F;p&gt;
&lt;p&gt;Personally I think a gradual way of introducing verification into industrial languages might be a feasible approach. We can provide tools in language to enable the programmer to proof only the core logic of a program, and maybe with several &quot;sorry&quot; or &quot;trustMe&quot; for complex details.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Why you mathematician guys love using abbreviation.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;Many programmers think the convenience of piling up shitty code is an advantage. For example, some people in a company I used to work in prefer Go to Rust, because Go is easier to compile. You don&#x27;t have to fight with the compiler. Most people just want to see the result fast and get into the edit-debug loop fast, instead of understand the whole problem. I cannot blame them of doing so, because sometimes I have such feelings also. Maybe that&#x27;s how human beings are designed, impatience, lazy, and hate deep thinking. Sign.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Category theory Notes 1</title>
        <published>2022-09-29T03:43:34.088+00:00</published>
        <updated>2022-09-29T03:43:34.088+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/category-theory-1/"/>
        <id>https://longfangsong.github.io/en/category-theory-1/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/category-theory-1/">&lt;h2 id=&quot;what-is-category-theory-all-about&quot;&gt;What is category theory all about&lt;&#x2F;h2&gt;
&lt;p&gt;Category theory is all about structures and relations.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;... category theory is the mathematical study of (abstract) algebras of functions. —— &lt;em&gt;Category Theory&lt;&#x2F;em&gt; by &lt;em&gt;Steve Awodey&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;For me, learning category theory enables me to understand what on earth is &quot;a monoid in the category of endofunctors&quot;, and it helps me to learn HoTT.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;function-of-sets&quot;&gt;Function of Sets&lt;&#x2F;h2&gt;
&lt;p&gt;Nothing too much to say here, only some notations here.&lt;&#x2F;p&gt;
&lt;p&gt;Identity function in the books I am using (primary &lt;em&gt;Category Theory&lt;&#x2F;em&gt; by &lt;em&gt;Steve Awodey&lt;&#x2F;em&gt;, but I&#x27;m also referring to &lt;em&gt;Beginning Category Theory&lt;&#x2F;em&gt; by &lt;em&gt;Peter Smith&lt;&#x2F;em&gt;) is written as&lt;&#x2F;p&gt;
&lt;p&gt;$$
1_A : A \rightarrow A
$$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;definition-of-category&quot;&gt;Definition of Category&lt;&#x2F;h2&gt;
&lt;p&gt;Basically, a category is anything which&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Contains objects and arrows (you can consider arrows as something like functions since it makes it simpler, but they don&#x27;t have to be functions actually) between them&lt;&#x2F;li&gt;
&lt;li&gt;The arrows can composite with each other and obey the associativity rule&lt;&#x2F;li&gt;
&lt;li&gt;For each object, there exists an identity arrow, which is also the &quot;unit&quot; arrow when compositing with other arrows.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In Agda, simplified:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Category&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;o ℓ e &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Level&lt;&#x2F;span&gt;&lt;span&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;suc&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;o &lt;&#x2F;span&gt;&lt;span&gt;⊔ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ℓ &lt;&#x2F;span&gt;&lt;span&gt;⊔ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Obj &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;o
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;⇒&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Rel Obj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ℓ
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;≈&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀ &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Rel&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;⇒ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id  &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀ &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;⇒ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;∘&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀ &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B C&lt;&#x2F;span&gt;&lt;span&gt;} → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;⇒ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;) → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;⇒ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;⇒ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assoc     &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀ &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B C D&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;⇒ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;⇒ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;C &lt;&#x2F;span&gt;&lt;span&gt;⇒ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;D&lt;&#x2F;span&gt;&lt;span&gt;} → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;) ∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;≈ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span&gt;∘ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;identityˡ &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀ &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;⇒ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;≈ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;identityʳ &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀ &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;⇒ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;≈ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h2&gt;
&lt;p&gt;The book gives us some examples of categories, I&#x27;ll just take some interesting ones here&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rel&quot;&gt;Rel&lt;&#x2F;h3&gt;
&lt;p&gt;Object: Sets&lt;&#x2F;p&gt;
&lt;p&gt;Arrows : Binary Relations ($f : A → B$, $f ⊆ A×B$)&lt;&#x2F;p&gt;
&lt;p&gt;Identity Arrow :
$$
1_A = {(a,a) ∈ A×A | a∈A} ⊆ A×A
$$&lt;&#x2F;p&gt;
&lt;p&gt;We need to prove $f ◦ 1_A = f = 1_B ◦ f$, which is easy to do by introducing $(a,b) \in f ◦ 1_A$ so there must exists a $p$, and $(a, p) \in 1_A$ ,$(p, b) \in f$, since $1_A$ is by definition $(a,a)$, so $p$ is $a$, so $(a,b) \in f$. Proof of $f = 1_B ◦ f$ is similar.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Composite of Arrows: function composition, obvious
We need to prove $f ◦ (g ◦ h) = (f ◦ g) ◦ h$.&lt;&#x2F;p&gt;
&lt;p&gt;This proof is easy, just assume $(a,b)$, $(b,c)$, $(c,d)$ and apply the definition of composite will lead us to the result.&lt;&#x2F;p&gt;
&lt;p&gt;You can find the definition of &lt;a href=&quot;https:&#x2F;&#x2F;agda.github.io&#x2F;agda-categories&#x2F;Categories.Category.Instance.Rels.html&quot;&gt;&lt;code&gt;Rels&lt;&#x2F;code&gt; category in Agda&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;partially-ordered-set-poset&quot;&gt;Partially ordered set (Poset)&lt;&#x2F;h3&gt;
&lt;p&gt;Object: element in the set&lt;&#x2F;p&gt;
&lt;p&gt;Arrows : $\leq$&lt;&#x2F;p&gt;
&lt;p&gt;Identity Arrow : $a \leq a$&lt;&#x2F;p&gt;
&lt;p&gt;Composite of Arrows : $a \leq b\ \ and\ \ b \leq c \Rightarrow a \leq c$&lt;&#x2F;p&gt;
&lt;p&gt;Category can be considered as a kind of &lt;em&gt;generalized poset&lt;&#x2F;em&gt; with more structure than just $p \leq q$. And functor can be regarded as a generalized monotone map.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;agda.github.io&#x2F;agda-categories&#x2F;Categories.Category.Instance.Posets.html&quot;&gt;Poset category in Agda&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;monoid&quot;&gt;Monoid&lt;&#x2F;h3&gt;
&lt;p&gt;A monoid is a category with only one object, and the arrows are the monoid&#x27;s elements. The identity arrow is the unit element, and the composite of arrows is the monoid&#x27;s operation.&lt;&#x2F;p&gt;
&lt;p&gt;For any object $C$ in any category $\textbf{C}$, the set of arrows from $C$ to $C$, written as $Hom_{\textbf{C}}(C,C)$, is a monoid under the composition operation of $\textbf{C}$&lt;&#x2F;p&gt;
&lt;p&gt;Monoids are structured sets, there is a category $\textbf{Mon}$ whose objects are monoids and arrows are functions that preserve the monoid structure.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;a href=&quot;https:&#x2F;&#x2F;ncatlab.org&#x2F;nlab&#x2F;show&#x2F;homomorphism&quot;&gt;homomorphism&lt;&#x2F;a&gt; from $M$ to $N$ is the same thing as a functor from &quot;$M$ as category&quot; to &quot;$N$ as category&quot;, so:&lt;&#x2F;p&gt;
&lt;p&gt;Category can be considered as a kind of &lt;em&gt;generalized monoid&lt;&#x2F;em&gt;. And functor can be regarded as a generalized homomorphism.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;free-category&quot;&gt;Free category&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The free category on a “set of arrows”, hence on a directed graph, is the category whose morphisms are the tuples of composable arrows, hence the morphisms freely generated from these arrows. These morphisms may also be thought of as the “paths” that one may trace out in the directed graph by traversing in each step along an arrow, and therefore free categories are also called path categories. ——— nLab&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;With any directed graph, we can make it a category by adding more arrows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;For each node, add an identity arrow&lt;&#x2F;li&gt;
&lt;li&gt;For any two composable arrows, add the composite result arrow&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Then this category is called the &lt;em&gt;free category&lt;&#x2F;em&gt; generated by the directed graph.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;isomorphism&quot;&gt;Isomorphism&lt;&#x2F;h2&gt;
&lt;p&gt;In a category, an arrow can be called an isomorphism if it has an inverse.&lt;&#x2F;p&gt;
&lt;p&gt;If there exists an isomorphism between object $A$ and $B$ in category $C$, we say $A$ is isomorphic to $B$, and write $A \cong B$.&lt;&#x2F;p&gt;
&lt;p&gt;Intuitively we can think isomorphism is a way to say that two objects are &quot;similar&quot;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;large-small-category&quot;&gt;Large&#x2F;Small Category&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A category is small if it has a small set of objects and a small set of morphisms. —— nLab&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Where a small set is &lt;strong&gt;really&lt;&#x2F;strong&gt; a set instead of a proper class&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A category is said to be locally small if each of its hom-sets is a small set. —— nLab&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;And large categories are those which are not small.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;del&gt;I&#x27;m considering doing these kinds of proof in Agda, however, I&#x27;m not very sure about to what extent MLTT is compatible with set theory. (It seems like the book is based on ZF.)&lt;&#x2F;del&gt; I think it is OK to do so, ref &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2005.07059.pdf&quot;&gt;this paper&lt;&#x2F;a&gt;. I&#x27;ll use the &lt;code&gt;agda-categories&lt;&#x2F;code&gt; library for explanation.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;For example, the class of all sets is not a set, but a proper class.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>HoTTEST Summer School HoTT Notes 6</title>
        <published>2022-09-12T14:59:04.234+00:00</published>
        <updated>2022-09-12T14:59:04.234+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/hottest-notes-hott-6/"/>
        <id>https://longfangsong.github.io/en/hottest-notes-hott-6/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/hottest-notes-hott-6/">&lt;h2 id=&quot;contractable-types&quot;&gt;Contractable Types&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A contractible type is a type which has, up to identification, only one element. In other words, a contractible type is a type that comes equipped with a point, and an identification of this point with any point. —— Introduction to Homotopy Type Theory&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Basically I think a contractible type is a type that all instances of it are equal.&lt;&#x2F;p&gt;
&lt;p&gt;Formally, we def:&lt;&#x2F;p&gt;
&lt;p&gt;$$
is\text{-}contr(A) := Σ_{(c:A)}\Pi_{(x:A)} c=x
$$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ A&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ c &lt;&#x2F;span&gt;&lt;span&gt;→ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We call $c$ here the &lt;strong&gt;center of contraction&lt;&#x2F;strong&gt;, and call the
$$
C: \Pi_{(x:A)} c=x
$$
part the &lt;strong&gt;contraction&lt;&#x2F;strong&gt; of $A$.&lt;&#x2F;p&gt;
&lt;p&gt;$C$ is a homotopy from the constant function to the identity function.&lt;&#x2F;p&gt;
&lt;p&gt;$$
const_C \sim id_A
$$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ A&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ c &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- prove these two definitions are same
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- helper functions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c x
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c x &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- helper functions end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;def&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;def&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Cdef1&lt;&#x2F;span&gt;&lt;span&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym &lt;&#x2F;span&gt;&lt;span&gt;$
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trans 
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trans 
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq x&lt;&#x2F;span&gt;&lt;span&gt;)) 
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Cdef1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq c x&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;def&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;def&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Cdef2&lt;&#x2F;span&gt;&lt;span&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym &lt;&#x2F;span&gt;&lt;span&gt;$ 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trans
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trans 
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq c x&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Cdef2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq x&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Examples of contractible types includes the unit type and the type $\Sigma_{(x:A)}a=x$.&lt;&#x2F;p&gt;
&lt;p&gt;A type $A$ is contractible if and only if the map $const_{tt} : A \rightarrow \bf{1}$ is an equivalence.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tt &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ ⊤
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tt _ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equ&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tt &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;})) → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equ&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;retrPart&lt;&#x2F;span&gt;&lt;span&gt;)) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h tt &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;retrPart x
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equ&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tt &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;}))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equ&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;) = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;) , (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;C &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;singleton-induction&quot;&gt;Singleton induction&lt;&#x2F;h3&gt;
&lt;p&gt;Let $A$ be a type with an element $a$, we said $A$ satisfies singleton induction if for every type family $B$ over $A$, the map defined by $ev-pt(f) := f(a)$ where&lt;&#x2F;p&gt;
&lt;p&gt;$$
ev\text{-}pt : (\Pi_{(x:A)} B(x)) → B(a)
$$
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ev&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pt &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ev&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pt a f &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f a
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;has a section, ie. has&lt;&#x2F;p&gt;
&lt;p&gt;$$
ind\text{-}sing_a : B(a) → \Pi_{(x:A)} B(x)
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
comp\text{-}sing_a : ev\text{-}pt \cdot ind\text{-}sing_a \sim id
$$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;singleton &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;₁
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;singleton &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sec&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ev&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pt &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ind&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sing &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;singleton &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;) → 
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;→ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ind&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sing &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ c is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fst&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;comp&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sing &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sing &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;singleton &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;) → 
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;) → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ev&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pt &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ind&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sing a is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) ~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;comp&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sing &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ a is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;snd&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And $is-contr A$ is iff to $A$ satisfied to $ind\text{-}sing_a$ with some $a:A$.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&amp;#39;&amp;#39;&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;₁
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&amp;#39;&amp;#39;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;singleton
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equ&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ind&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&amp;#39;&amp;#39;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equ&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ind&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Cdef3&lt;&#x2F;span&gt;&lt;span&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fst&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Cdef3&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;≡&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ c&lt;&#x2F;span&gt;&lt;span&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x y &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;) → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trans p&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym p&lt;&#x2F;span&gt;&lt;span&gt;)) ≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv refl &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equ&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ind&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&amp;#39;&amp;#39;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equ&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ind&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Cdef1&lt;&#x2F;span&gt;&lt;span&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;→ 
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ bc x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;transport &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trans&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Cdef1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Cdef1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;))) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bc&lt;&#x2F;span&gt;&lt;span&gt;) , 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ bc &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cong&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ t &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;transport &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t bc&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Cdef1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;fiber&quot;&gt;Fiber&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The fiber of a morphism or bundle $f : E → B$ over a point of B is the collection of elements of E that are mapped by f to this point. —— nLab&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;$$
fib_f(b) := Σ_{(a:A)}f(a) = b
$$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f b &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ A&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ a &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f a &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And it can be regarded as type version of prop &quot;b is in the image of f&quot;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;identification-of-points-in-the-fiber&quot;&gt;Identification of points in the fiber&lt;&#x2F;h3&gt;
&lt;p&gt;For all $(a, p)$ and $(a&#x27;, p&#x27;)$ of type $fib_f(b)$ we have&lt;&#x2F;p&gt;
&lt;p&gt;$$
((a,p)=(a&#x27;,p&#x27;)) ≃ Eq\text{-}fib_f((a, p),(a&#x27;, p&#x27;))
$$&lt;&#x2F;p&gt;
&lt;p&gt;where&lt;&#x2F;p&gt;
&lt;p&gt;$$
Eq\text{-}fib_f((a, p),(a&#x27;, p&#x27;)) := Σ_{(q : a = a&#x27;)} (p = ap_f(q) ⋅ p&#x27;)
$$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib f b&lt;&#x2F;span&gt;&lt;span&gt;) ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib f b&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ aEq &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trans&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cong f aEq&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The proof of it is a little long:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s t &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib f b&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib s t
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib refl &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s t &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib f b&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib s t &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s t &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib f b&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib s t&lt;&#x2F;span&gt;&lt;span&gt;) →
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq w&lt;&#x2F;span&gt;&lt;span&gt;) ≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s t &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib f b&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;) →
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib w&lt;&#x2F;span&gt;&lt;span&gt;) ≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r refl &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s t &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib f b&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib &lt;&#x2F;span&gt;&lt;span&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt;) , 
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib f b&lt;&#x2F;span&gt;&lt;span&gt;) ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib f b&lt;&#x2F;span&gt;&lt;span&gt;) → 
&lt;&#x2F;span&gt;&lt;span&gt;    ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;) ≡ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)) ≃ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) = 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;contractible-map&quot;&gt;Contractible Map&lt;&#x2F;h3&gt;
&lt;p&gt;We say that a function $f : A → B$ is contractible if it comes equipped with an element of type&lt;&#x2F;p&gt;
&lt;p&gt;$$
is\text{-}contr(f) = \Sigma_{(b:B)} is\text{-}contr(fib_f(b))
$$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- the type which contains &amp;quot;all fibers with same endpoint b&amp;quot; are contractable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ B&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ b &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib f b&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can prove any contractible map is an equivalence.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inverse &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f f &lt;&#x2F;span&gt;&lt;span&gt;→ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inverse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fst &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;center&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- section part is easy, just take the center of the contraction out
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sec &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f f &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sec f
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inverse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;snd &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;center&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- retr part is a little complex
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- we need the following two lemmas
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- &amp;quot;fib f y&amp;quot; is contractable means each two fibs in such type are equal
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} 
&lt;&#x2F;span&gt;&lt;span&gt;    → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f f &lt;&#x2F;span&gt;&lt;span&gt;→ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a b &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib f y&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a b &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trans&lt;&#x2F;span&gt;&lt;span&gt; ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;snd&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym&lt;&#x2F;span&gt;&lt;span&gt; ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;snd&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- construct an instance of fib f f(x)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- the instance is basically (f⁻¹ f(x) , f(f⁻¹(f(x))) ≡ f(x))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fx&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fiber &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → 
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f f&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib f&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f x&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fx&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fiber &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fst&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f x&lt;&#x2F;span&gt;&lt;span&gt;)) , ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;snd&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;)) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f x&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- by contr-f-all-eq, we can know the instance constructed by fx-fiber is equal to (x , refl),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- which is also an instance of fib f f(x)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- so (f⁻¹ f(x) , ...) ≡ (x , ...), thus we have f⁻¹ f(x) ≡ x and it is the retr we need
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;retr &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f f &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;retr f
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;retr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inverse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cong &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fst&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fx&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fiber x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f f &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv f
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;retr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;coherently-invertible-maps&quot;&gt;Coherently Invertible Maps&lt;&#x2F;h3&gt;
&lt;p&gt;Consider an invertible map $f : A → B$, which equipped with an inverse $g : B → A$ and two homotopies : $G : (f ∘ g) \sim id$ and $H : (g ∘ f) \sim id$.&lt;&#x2F;p&gt;
&lt;p&gt;And if there exists another homotopy $K : G ∘ f \sim f ∘ H$, we call that $f$ is coherently invertible.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;coh&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invertible &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;coh&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invertible &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ g &lt;&#x2F;span&gt;&lt;span&gt;→ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ&lt;&#x2F;span&gt;&lt;span&gt; ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;) ~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;G &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ&lt;&#x2F;span&gt;&lt;span&gt; ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) ~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;) (
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;→ ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chain&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;G &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;)) ~ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chain&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    )))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can prove that any coherently invertible map has contractable fibers:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- WIP, I tried hard but it seems to complex 😭
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;coh&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invertible&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contractable&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} 
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;coh&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invertible f &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contr&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f f
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;coh&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invertible&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contractable&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib f&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;G &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ b &lt;&#x2F;span&gt;&lt;span&gt;→ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g b &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;G &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trustMe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;naturality-square-of-the-homotopy&quot;&gt;Naturality Square of the Homotopy&lt;&#x2F;h4&gt;
&lt;p&gt;Let $f, g : A → B$ be functions, and consider $H : f ~ g$ and $p : x =_A y$. We define the identification&lt;&#x2F;p&gt;
&lt;p&gt;$$
nat\text{-}htpy(H, p) := ap_f (p) \cdot H(y) = H(x) \cdot ap_g(p)
$$&lt;&#x2F;p&gt;
&lt;p&gt;ie.&lt;&#x2F;p&gt;
&lt;p&gt;$$
H(x)
$$
$$
\require{amscd}
\begin{CD}
\ \ \ \ \ \ \ \ f(x) @= g(x)\\
@|ap_f(p)   @|ap_g(p)\\
\ \ \ \ \ \ \ \ f(y) @= g(y)
\end{CD}
$$
$$
H(y)
$$&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;$ev\text{-}pt$ is abbreviation for &quot;evaluate at point&quot;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>HoTTEST Summer School HoTT Notes 5</title>
        <published>2022-08-17T06:28:35.637+00:00</published>
        <updated>2022-08-17T06:28:35.637+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/hottest-notes-hott-5/"/>
        <id>https://longfangsong.github.io/en/hottest-notes-hott-5/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/hottest-notes-hott-5/">&lt;h2 id=&quot;homotopies&quot;&gt;Homotopies&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s consider the type theory represent of proposition &quot;$f: A → B$ is surjective&quot;:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\Pi_{(y:B)}\Sigma_{(x:A)} f(x) = y
$$&lt;&#x2F;p&gt;
&lt;p&gt;Note $=$ (or we should use $=_B$) here stands for this is an instance of &quot;identity type&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;Apply AC we introduced in last course:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\Sigma_{(g: B\rightarrow A)} \Pi_{(y:B)} f(g(y)) = y
$$&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;hottest-notes-hott-5&#x2F;.&#x2F;1.svg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;So we can see there&#x27;s some relation between $f \cdot g$ and $id_B$, this relation is similar, but weaker than $f \cdot g \underset{B → B}{=} id_B$.&lt;&#x2F;p&gt;
&lt;p&gt;And this relation is what we call homotopy.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;formal-definition&quot;&gt;Formal definition&lt;&#x2F;h3&gt;
&lt;p&gt;For two dependent functions $f$ and $g$,&lt;&#x2F;p&gt;
&lt;p&gt;$$
f \sim g := \Pi_{(x:A)} f(x) = g(x)
$$&lt;&#x2F;p&gt;
&lt;p&gt;Here $f \sim g$ is the type of homotopies from $f$ to $g$.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l1 l2&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l1&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l2&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f g &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l1 &lt;&#x2F;span&gt;&lt;span&gt;⊔ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f x &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g x
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we can say $g$ is a section of $f$ and $f$ is a retraction of $g$, we&#x27;ll introduce these concepts later.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;: Bool → Bool
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bool true &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bool false &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s no way can we prove:&lt;&#x2F;p&gt;
&lt;p&gt;$$
neg\text{-}bool \cdot neg\text{-}bool ≐ id_{Bool}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Instead, we can define a pointwise identification between the values of $neg\text{-}bool \cdot neg\text{-}bool$ and $id_{Bool}$.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;) ~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bool false &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neg&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bool true &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;commutativity-of-diagrams&quot;&gt;Commutativity of Diagrams&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;We can use homotopies to express the commutativity of diagrams.&lt;&#x2F;p&gt;
&lt;p&gt;For example, we say that a triangle commutes if it comes equipped with a homotopy $H: f \sim g \cdot h$.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{amscd}
\require{cancel}
\def\diaguparrow#1{\smash{\raise.6em\rlap{\ \ \scriptstyle #1}
\lower.6em{\cancelto{}{\Space{2em}{1.7em}{0px}}}}}
\begin{CD}
A @&amp;gt;f&amp;gt;&amp;gt;X\\
@VhVV \diaguparrow{g}\\
B
\end{CD}
$$&lt;&#x2F;p&gt;
&lt;p&gt;A square is similar:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{amscd}
\begin{CD}
A @&amp;gt;g&amp;gt;&amp;gt; A&#x27;\\
@VfVV  @Vf&#x27;VV\\
B @&amp;gt;h&amp;gt;&amp;gt; B&#x27;
\end{CD}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Here $h \cdot f \sim f&#x27; \cdot g$.&lt;&#x2F;p&gt;
&lt;p&gt;And we can have homotopies between homotopies:&lt;&#x2F;p&gt;
&lt;p&gt;If $H, K: f \sim g$ are two homotopies, ie&lt;&#x2F;p&gt;
&lt;p&gt;$$
f,g: \Pi_{(x:A)}B(x)
$$
$$
H,K: f \sim g
$$&lt;&#x2F;p&gt;
&lt;p&gt;then the type of homotopies $f \sim g$ between them is just the type&lt;&#x2F;p&gt;
&lt;p&gt;$$
\alpha: \Pi_{(x:A)}H(x) = K(x)
$$&lt;&#x2F;p&gt;
&lt;p&gt;And we can push this further, homotopies of homotopies of homotopies, homotopies&lt;sup&gt;4&lt;&#x2F;sup&gt;, etc.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;hottest-notes-hott-5&#x2F;.&#x2F;2.svg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;operations-on-homotopies&quot;&gt;Operations on Homotopies&lt;&#x2F;h3&gt;
&lt;p&gt;refl-htpy: $\Pi_{(f:\Pi_{(x:A)}B(x))} f \sim f$&lt;&#x2F;p&gt;
&lt;p&gt;inv-htpy: $\Pi_{(f,g:\Pi_{(x:A)}B(x))} (f \sim g) → (g \sim f)$&lt;&#x2F;p&gt;
&lt;p&gt;concat-htpy: $\Pi_{(f,g,h:\Pi_{(x:A)}B(x))} (f \sim g) → (g \sim h) \rightarrow (f \sim h)$&lt;&#x2F;p&gt;
&lt;p&gt;We will often write $H^{-1}$ for $inv\text{-}htpy(H)$, and $H \cdot K$ for $concat\text{-}htpy(H, K)$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ f x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f g &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy htpy &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy x&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;concat&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f g h &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;concat&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy htpy1 htpy2 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trans&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy1 x&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy2 x&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;·&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f g h &lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;·&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;concat&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;laws-of-homotopies&quot;&gt;Laws of Homotopies&lt;&#x2F;h3&gt;
&lt;p&gt;Homotopies satisfy the groupoid laws, ie. associative, has left and right unit (refl-htpy), left and right inverse law.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assoc&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f g h i &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) → (((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;· &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;) · &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;) ~ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;· (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span&gt;· &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assoc&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H K L &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trans&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assoc&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;) {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unit&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f g &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;) → ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy f &lt;&#x2F;span&gt;&lt;span&gt;· &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;) ~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unit&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unit &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x y &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;} → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trans p&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;})) ≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unit &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unit&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f g &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;) → ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;· (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy g&lt;&#x2F;span&gt;&lt;span&gt;)) ~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unit&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x y &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;) → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trans p&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym p&lt;&#x2F;span&gt;&lt;span&gt;)) ≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv refl &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x y &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;) → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trans&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym p&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;) ≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv refl &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f g &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;) → (((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;) · &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;) ~ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy g&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f g &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;) → ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;· (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;)) ~ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy f&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;whiskering&quot;&gt;Whiskering&lt;&#x2F;h4&gt;
&lt;p&gt;Whiskering operations are operations that allow us to compose homotopies with functions.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Suppose $H: f \sim g$ for two functions $f,g: A → B$, and let $h:B→C$. We define&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;$$
h \cdot H := λx.ap_h(H(x)) : h \cdot f \sim h \cdot g
$$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chain&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B C &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f g &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;) → ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) ~ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chain&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cong h&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Suppose $f: A → B$ and $H: g \sim h$ for two functions $g,h:B→C$. We define&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;$$
H \cdot f := λx.H(f(x)) : h \cdot f \sim g \cdot f
$$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chain&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B C &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g h &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) → ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) ~ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chain&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f x&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bi-invertible-maps&quot;&gt;Bi-invertible maps&lt;&#x2F;h3&gt;
&lt;p&gt;We can use homotopies to define sections, retractions and equivalence of a map.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A section is a right inverse of some morphism.&lt;&#x2F;p&gt;
&lt;p&gt;$$
sec(f) := \Sigma_{(g:B\rightarrow A)} f\cdot g \sim id_B
$$&lt;&#x2F;p&gt;
&lt;p&gt;For any equivalence $e : 𝐴 ≃ 𝐵$ we define $e^{-1}$ to be the section of $e$.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sec &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l1 l2 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Level&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l1&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l2&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l1 &lt;&#x2F;span&gt;&lt;span&gt;⊔ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sec &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ g &lt;&#x2F;span&gt;&lt;span&gt;→ ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;) ~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;A retraction is a left inverse of some morphism.&lt;&#x2F;p&gt;
&lt;p&gt;$$
retr(f) := \Sigma_{(h:B\rightarrow A)} h\cdot f \sim id_A
$$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;retr &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l1 l2 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Level&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l1&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l2&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l1 &lt;&#x2F;span&gt;&lt;span&gt;⊔ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;retr &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ h &lt;&#x2F;span&gt;&lt;span&gt;→ ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) ~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;equivalence = section + retraction&lt;&#x2F;p&gt;
&lt;p&gt;$$
is\text{-}equiv(f) := sec(f) × retr(f)
$$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l1 l2 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Level&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l1&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l2&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l1 &lt;&#x2F;span&gt;&lt;span&gt;⊔ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sec f &lt;&#x2F;span&gt;&lt;span&gt;× &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;retr f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or &quot;f is bi-invertible&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;We will write $A ≃ B$ for the type $\Sigma_{(f:A→B)} is\text{-}equiv(f)$ of all equivalences from $A$ to $B$.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Besides, we can define $has\text{-}inverse$:&lt;&#x2F;p&gt;
&lt;p&gt;$$
has\text{-}inverse(f) := \Sigma_{(g:B→A)} (f\cdot g \sim id_B) \times (g\cdot f \sim id_A)
$$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inverse &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l1 l2 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Level&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l1&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l2&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l1 &lt;&#x2F;span&gt;&lt;span&gt;⊔ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inverse&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ g &lt;&#x2F;span&gt;&lt;span&gt;→ ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;) ~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;) × ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span&gt;∘ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) ~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We can prove that $has\text{-}inverse(f) \leftrightarrow is\text{-}equiv(f)$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inverse &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv f &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inverse f
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inverse &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;} ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;homo&lt;&#x2F;span&gt;&lt;span&gt;), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;homo&lt;&#x2F;span&gt;&lt;span&gt;)) = 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv &lt;&#x2F;span&gt;&lt;span&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;homo &lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htpy 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;homo &lt;&#x2F;span&gt;&lt;span&gt;· (
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chain&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chain&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f l&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;homo r&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv &lt;&#x2F;span&gt;&lt;span&gt;· &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chain&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv r&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;homo&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f
&lt;&#x2F;span&gt;&lt;span&gt;            )
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inverse&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inverse f &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv f
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inverse&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equiv&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv &lt;&#x2F;span&gt;&lt;span&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;homo &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;homo&lt;&#x2F;span&gt;&lt;span&gt;)) = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;homo&lt;&#x2F;span&gt;&lt;span&gt;) , (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;homo&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;example-of-equivalences&quot;&gt;Example of Equivalences&lt;&#x2F;h4&gt;
&lt;p&gt;Ref section 9.2.9 and 9.2.10 of the book &lt;em&gt;Introduction to Homotopy Type Theory&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;laws-operations-on-equivalences&quot;&gt;Laws &amp;amp; Operations on Equivalences&lt;&#x2F;h4&gt;
&lt;p&gt;We have $refl\text{-}eqiv$, $inv\text{-}eqiv$ and $concat\text{-}eqiv$.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;function-extensionality-univalence-axiom&quot;&gt;Function Extensionality &amp;amp; Univalence Axiom&lt;&#x2F;h3&gt;
&lt;p&gt;Let $P := \Pi_{(x:A)}B(x)$, because both $\sim$ and $≃$ are refl. we get&lt;&#x2F;p&gt;
&lt;p&gt;$$
id\text{-}to\text{-}\sim: \Pi_{(f,g:P)}(f \underset{P}{=} g \rightarrow f \sim g)
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
id\text{-}to\text{-}≃: \Pi_{(A,B:\mathcal{U})}(A\underset{\mathcal{U}}{=}B \rightarrow A ≃ B)
$$&lt;&#x2F;p&gt;
&lt;p&gt;With these, we can define function extensionality:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The principle of functional extensionality states that two functions are equal if their values are equal at every argument. —— nLab&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;$$
funext:\Pi_{(f,g:P)}is\text{-}equiv(id\text{-}to\text{-}\sim(f, g))
$$&lt;&#x2F;p&gt;
&lt;p&gt;Similarly, we can define the univalence axiom (UA):&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In intensional type theory, identity types behave like path space objects; this viewpoint is called homotopy type theory. This induces furthermore a notion of homotopy fibers, hence of homotopy equivalences between types.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;On the other hand, if type theory contains a universe Type, so that types can be considered as points of Type, then between two types we also have an identity type Paths $Paths_{Type}(X,Y)$. The univalence axiom says that these two notions of “sameness” for types are the same. —— nLab&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;$$
UA^{\mathcal{U}}:\Pi_{(A,B:\mathcal{U})}is\text{-}eqiv(id\text{-}to\text{-}≃(A,B))
$$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;identification-in-s-types&quot;&gt;Identification in Σ-types&lt;&#x2F;h2&gt;
&lt;p&gt;We can characterize the identity type of Σ-type as a Σ-type of identity types.&lt;&#x2F;p&gt;
&lt;p&gt;Fix an $A$ type, $x: A ⊢ B(x)\ \ type$, $S := Σ_{(x:A)}B(x)$,
we want a reflexive relation $z, z&#x27;: S ⊢ R(z,z&#x27;)\ \ type$, we can call this type $Eq\text{-}Σ$&lt;&#x2F;p&gt;
&lt;p&gt;Assume&lt;&#x2F;p&gt;
&lt;p&gt;$$
z ≐ (x, y)
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
z&#x27; ≐ (x&#x27;, y&#x27;)
$$&lt;&#x2F;p&gt;
&lt;p&gt;By $ap_{pr_{1}}$&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; we should have a $p: x \underset{A}= x&#x27;$&lt;&#x2F;p&gt;
&lt;p&gt;Recall the $tr_B$ function we &lt;a href=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;hottest-notes-hott-3&#x2F;#transport&quot;&gt;mentioned before&lt;&#x2F;a&gt;, with this, we can define &quot;type of identifications of $y$ with $y&#x27;$ over $p$&quot;:&lt;&#x2F;p&gt;
&lt;p&gt;$$
(y \overset{B}{\underset{p}=} y&#x27;) := (tr_B(p,y) \underset{B(x&#x27;)}{=} y&#x27;)
$$&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;hottest-notes-hott-5&#x2F;.&#x2F;3.svg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And we can then define $Eq\text{-}Σ$:&lt;&#x2F;p&gt;
&lt;p&gt;$$
Eq\text{-}Σ(z, z&#x27;) := Σ_{(p:x=x&#x27;)} (y \overset{B}{\underset{p}=} y&#x27;)
$$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ A B&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ A B&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z z&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fst &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fst &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ p &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;transport &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;snd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;) ≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;snd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To show this is reflexive, we should have a term:&lt;&#x2F;p&gt;
&lt;p&gt;$$
refl\text{-}Eq\text{-}Σ : \Pi_{(z:S)}Eq\text{-}\Sigma(z, z)
$$&lt;&#x2F;p&gt;
&lt;p&gt;This is easy to construct such a term with a pair of &lt;code&gt;refl&lt;&#x2F;code&gt; (notice &lt;code&gt;fst&lt;&#x2F;code&gt; &lt;code&gt;refl&lt;&#x2F;code&gt; and &lt;code&gt;snd&lt;&#x2F;code&gt; &lt;code&gt;refl&lt;&#x2F;code&gt; in this pair is in different types &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ A B&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z z
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With path induction&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, we can push this a step further to:&lt;&#x2F;p&gt;
&lt;p&gt;$$
pair\text{-}Eq : \Pi_{(z,z&#x27;:S)} ((z\underset{S}=z&#x27;) \rightarrow Eq\text{-}\Sigma(z, z&#x27;))
$$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ A B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ A B&lt;&#x2F;span&gt;&lt;span&gt;} →
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z z&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And reversely:&lt;&#x2F;p&gt;
&lt;p&gt;$$
Eq\text{-}pair : \Pi_{(z,z&#x27;:S)} (Eq\text{-}\Sigma(z, z&#x27;) \rightarrow (z\underset{S}=z&#x27;))
$$
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pair &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ A B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ A B&lt;&#x2F;span&gt;&lt;span&gt;} →
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z z&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;→ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we can find that $Eq\text{-}pair$ and $pair\text{-}Eq$ are &quot;inverse&quot; of each other:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\Pi_{(z,z&#x27;:S)} \Pi_{(w:Eq\text{-}Σ(z,z&#x27;))} Eq\text{-}pair(pair\text{-}Eq(w)) = w
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\Pi_{(z,z&#x27;:S)} \Pi_{(r:z=z&#x27;)} pair\text{-}Eq(Eq\text{-}pair(w)) = w
$$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ A B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ A B&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z z&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) →
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt; ( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pair w&lt;&#x2F;span&gt;&lt;span&gt; ) ≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl&lt;&#x2F;span&gt;&lt;span&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ A B&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ A B&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) →
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt; ( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Eq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt; ) ≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r refl &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So we can find out that $Eq\text{-}pair$ is a section of $pair\text{-}Eq$ and $pair\text{-}Eq$ is a retraction of $Eq\text{-}pair$.&lt;&#x2F;p&gt;
&lt;p&gt;Thus we can form an equivalence between $z = z&#x27;$ and $Eq\text{-}Σ(z, z&#x27;)$:&lt;&#x2F;p&gt;
&lt;p&gt;$$
(z \underset{S}= z&#x27;) ≃ Eq\text{-}Σ(z, z&#x27;)
$$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;materials&quot;&gt;Materials&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;lecture-note&quot;&gt;Lecture Note&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;martinescardo&#x2F;HoTTEST-Summer-School&#x2F;blob&#x2F;main&#x2F;HoTT&#x2F;HoTTEST_Lecture_5.pdf&quot;&gt;HoTTEST_Lecture_5.pdf&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;record-on-youtube&quot;&gt;Record on Youtube&lt;&#x2F;h3&gt;
&lt;div &gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;M5BD5BvQCjw&quot; webkitallowfullscreen
        mozallowfullscreen allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;todo: &lt;strong&gt;DO&lt;&#x2F;strong&gt; learn the category theory.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;Ref &lt;a href=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;hottest-notes-hott-3&#x2F;#functoriality&quot;&gt;Note 3&lt;&#x2F;a&gt; if you forget the definition of $ap$.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;You may see a lot of proofs in this section of course are just simple combination of &lt;code&gt;refl&lt;&#x2F;code&gt;s in different types. When writing Agda code, &lt;code&gt;refl&lt;&#x2F;code&gt;s&#x27; types are omitted, one need to read the type signature of the whole function. Is letting the same notation stands for things in different types and leave the hard work to a type inference program a good idea? Or, should the IDE at least &quot;expand&quot; the type when human beings are reading the code?&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;planetmath.org&#x2F;1121pathinduction&quot;&gt;Ref&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;5&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;5&lt;&#x2F;sup&gt;
&lt;p&gt;It is so easy to write such a proof in Agda, comparing with the difficulty of writing a proof with hands (thinking about applying path induction again and again). I can hardly believe that this proof is correct, but it is just identical to the term on the book, those proof assistant tools are all magic.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>HoTTEST Summer School HoTT Notes 4</title>
        <published>2022-07-20T16:35:09.859+00:00</published>
        <updated>2022-07-20T16:35:09.859+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/hottest-notes-hott-4/"/>
        <id>https://longfangsong.github.io/en/hottest-notes-hott-4/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/hottest-notes-hott-4/">&lt;h2 id=&quot;universes&quot;&gt;Universes&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;why&quot;&gt;Why&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;We need to define type families by induction, so that we can prove things like
$$
0 \underset{\mathbb{N}}{=} 1 \rightarrow \varnothing
$$&lt;&#x2F;li&gt;
&lt;li&gt;We should have a method to abstract over types, eg.
instead of writing $id_A:A\rightarrow A$ for each type, we can write $id^{\mathcal{U}}:\Pi_{(X:\mathcal{U})} \mathcal{T}(X) \rightarrow \mathcal{T}(X)$&lt;&#x2F;li&gt;
&lt;li&gt;To do category theory in a streamlined way. (Grothendieck universe&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;what-is-a-universe&quot;&gt;What is a Universe?&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In some type theories, especially in systems with dependent types, types themselves can be regarded as terms. There is a type called the universe (often denoted $\mathcal {U}$) which has types as its elements. To avoid paradoxes such as Girard&#x27;s paradox (an analogue of Russell&#x27;s paradox for type theory), type theories are often equipped with a countably infinite hierarchy of such universes, with each universe being a term of the next one. —— Wikipedia&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Basically it is type of types.&lt;&#x2F;p&gt;
&lt;p&gt;A universe in type theory is a type $\mathcal{U}$ in the empty context, equipped with a type family&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; $\mathcal{T}$&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; over $\mathcal{U}$ called a universal family, that is closed under the type forming operations in the sense that it comes equipped with many existing structures&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-we-prevent-russell-s-paradox&quot;&gt;How we prevent Russell’s paradox&lt;&#x2F;h3&gt;
&lt;p&gt;As I mentioned before, universe is type of types, so a universe can technically in another universe, and this leads to the famous Russell’s paradox.&lt;&#x2F;p&gt;
&lt;p&gt;To prevent this paradox from happening, and keep enough universes to use meanwhile, we organize the universes and types in them in this way:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For every finite list of types：
$$
\Gamma_1 \vdash A_1\ type\ \ \ \ \cdots \ \ \ \ \Gamma_n \vdash A_n\ type
$$
there is a universe $\mathcal{U}$ that contains each $A_i$ in the sense that $\mathcal{U}$ comes equipped with
$$
\Gamma_i\vdash \check{A_i}:U
$$
for which the judgement
$$
\Gamma_i\vdash \mathcal{T}(\check{A_i}) \doteq A_i\ type
$$
holds.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;$\mathcal{U_0}$ is the universe which contains no types.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;For each universe $\mathcal{U}$, there is a successor universe $\mathcal{U^+}$ that
$$
\vdash \mathcal{U}\ type
$$
$$
X: \mathcal{U} \vdash \mathcal{T}(X)\ type
$$
$$
\vdash \check{\mathcal{U}}: \mathcal{U^+}
$$
$$
\vdash \mathcal{T}^+(\check{\mathcal{U}})\doteq \mathcal{U}\ type
$$
$$
X:\mathcal{U} \vdash \check{\mathcal{T}}(X): \mathcal{U^+}
$$
$$
X:\mathcal{U} \vdash \mathcal{T}^+(\check{\mathcal{T}}(X)) \doteq \mathcal{T}(X)\ type
$$
We can have an infinite tower with these universes:
$$
\mathcal{U}, \mathcal{U^+}, \mathcal{U^{++}}, \mathcal{U^{+++}}, \cdots
$$
and each universe is contained in the next.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We can join universes, ie.
$\mathcal{U} \sqcup \mathcal{V}$ contains all types in $\mathcal{U}$ and $\mathcal{V}$.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;&#x2F;h3&gt;
&lt;p&gt;Now we&#x27;ll show why we need these universes.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll prove:&lt;&#x2F;p&gt;
&lt;p&gt;$$
true \neq_{bool} false
$$&lt;&#x2F;p&gt;
&lt;p&gt;or in other words:&lt;&#x2F;p&gt;
&lt;p&gt;$$
true \underset{bool}{=} false \rightarrow \varnothing
$$&lt;&#x2F;p&gt;
&lt;p&gt;So what we want to do is find a term:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC {}
\UnaryInfC{$?: true \underset{bool}{=}false \rightarrow \varnothing $}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Start with $\rightarrow-intro$ as usual:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC {$t: true \underset{bool}{=}false \vdash ?:\varnothing$}
\UnaryInfC{$?: true \underset{bool}{=}false \rightarrow \varnothing$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;We need a term of $\varnothing$, which can be constructed with &quot;proof with contradiction&quot;, we pick $True → False$ and $\neg(True → False)$.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$t: true \underset{bool}{=}false \vdash\ ? :True → False$}
\AxiomC{$?:\neg(True → False)$}
\BinaryInfC {$t: true \underset{bool}{=}false \vdash ?:\varnothing$}
\UnaryInfC{$?: true \underset{bool}{=}false \rightarrow \varnothing$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;For $True → False$, we can use transport we mentioned in last lecture with a function (or dependent type constructor) $boolToType$. And you&#x27;ll see why we need universes here, we need it to write the return type of this function.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\displaylines {
boolToType : Bool \rightarrow \mathcal{U}\\
boolToType true \doteq \mathbb{1}\\
boolToType false \doteq \varnothing\\
}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$t: true \underset{bool}{=}false \vdash tr_{bool}(t): True → False$}
\AxiomC{$?:\neg(True → False)$}
\BinaryInfC {$t: true \underset{bool}{=}false \vdash ?:\varnothing$}
\UnaryInfC{$?: true \underset{bool}{=}false \rightarrow \varnothing$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;For $\neg(True → False)$, it&#x27;s quiet easy to construct a term.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$t: true \underset{bool}{=}false \vdash tr_{bool}(t): True → False$}
\AxiomC{$h: True \rightarrow False \vdash ind_{\varnothing}(h\ True):(True → False) → False$}
\BinaryInfC {$t: true \underset{bool}{=}false, h:True \rightarrow False \vdash ?:\varnothing$}
\UnaryInfC{$?: true \underset{bool}{=}false \rightarrow \varnothing$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;And fill the $?$s:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$t: true \underset{bool}{=}false \vdash tr_{bool}(t): True → False$}
\AxiomC{$h: True \rightarrow False \vdash ind_{\varnothing}(h\ True):(True → False) → False$}
\BinaryInfC {$t: true \underset{bool}{=}false \vdash absurd(tr_{bool}(t), \lambda h.ind_{\varnothing}(h\ True)):\varnothing$}
\UnaryInfC{$\lambda t.absurd(tr_{bool}(t), \lambda h.ind_{\varnothing}(h\ True)): true \underset{bool}{=}false \rightarrow \varnothing$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;In lean, I won&#x27;t use Agda this time since in Agda a simple &lt;code&gt;λ ()&lt;&#x2F;code&gt; will do the prove, it&#x27;s convenient but too far from what we want to show here:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lean&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-lean &quot;&gt;&lt;code class=&quot;language-lean&quot; data-lang=&quot;lean&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;boolToType x &lt;&#x2F;span&gt;&lt;span&gt;:=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with
&lt;&#x2F;span&gt;&lt;span&gt;  | true   =&amp;gt; True
&lt;&#x2F;span&gt;&lt;span&gt;  | false  =&amp;gt; False
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;theorem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;notTrueImpliesFalseType &lt;&#x2F;span&gt;&lt;span&gt;: ¬(True → False) :=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;λ&lt;&#x2F;span&gt;&lt;span&gt; (h: True → False) =&amp;gt; False.elim (h True.intro)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;theorem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;trueIsNotFalse &lt;&#x2F;span&gt;&lt;span&gt;: true ≠ false :=
&lt;&#x2F;span&gt;&lt;span&gt;  Ne.intro
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;λ&lt;&#x2F;span&gt;&lt;span&gt; (t: true = false) =&amp;gt; absurd (Eq.mp (congrArg boolToType t)) notTrueImpliesFalseType
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;observational-equality-of-the-natural-numbers&quot;&gt;Observational equality of the natural numbers&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In dependent type theory, sometimes one could inductively define an equality type directly on an inductive type, rather than using Martin-Loef’s identity types using the j-rule. This equality type is called observational equality. —— nLab&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We define the observational equality of natural numbers like:&lt;&#x2F;p&gt;
&lt;p&gt;$$
Eq_{\mathbb{N}} : \mathbb{N} → (\mathbb{N} → \mathcal{U}_0)
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
Eq_{\mathbb{N}}\ 0\ 0 \doteq \mathbb{1}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
Eq_{\mathbb{N}}\ succ(n)\ 0 \doteq \varnothing
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
Eq_{\mathbb{N}}\ 0\ succ(n) \doteq \varnothing
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
Eq_{\mathbb{N}}\ succ(m)\ succ(n) \doteq Eq_{\mathbb{N}}\ m\ n
$$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;curry-howard-interpretation&quot;&gt;Curry-Howard interpretation&lt;&#x2F;h2&gt;
&lt;p&gt;Definition omitted, since we&#x27;ve already very familiar with it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;example-1&quot;&gt;Example&lt;&#x2F;h3&gt;
&lt;p&gt;We define: if $d, n: \mathbb{N}$,
then we can say d divides n if there exists an element of type&lt;&#x2F;p&gt;
&lt;p&gt;$$
m | n := \Sigma_{(k:ℕ)}{k \times m = n}
$$&lt;&#x2F;p&gt;
&lt;p&gt;And we can write some properties of division like:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;every-natural-number-is-divisible-by-1-and-itself&quot;&gt;Every natural number is divisible by 1 and itself&lt;&#x2F;h4&gt;
&lt;p&gt;$$
\Pi_{(n:ℕ)}{1 | n ∧ n | n}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Proof&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Nat using&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℕ&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Nat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Divisibility using&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;∣&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;divides&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Nat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Properties using&lt;&#x2F;span&gt;&lt;span&gt; (*-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;identityʳ&lt;&#x2F;span&gt;&lt;span&gt;; *-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;identityˡ&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Relation&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Binary&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PropositionalEquality using&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Product renaming&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;×&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ to _&lt;&#x2F;span&gt;&lt;span&gt;∧&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div1 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℕ&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;∣ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div1 n &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;divides n&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym&lt;&#x2F;span&gt;&lt;span&gt; (*-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;identityʳ n&lt;&#x2F;span&gt;&lt;span&gt;)) 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;divn &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℕ&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;∣ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;divn n &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;divides &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sym&lt;&#x2F;span&gt;&lt;span&gt; (*-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;identityˡ n&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div1n &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℕ&lt;&#x2F;span&gt;&lt;span&gt;) → (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;∣ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;) ∧ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;∣ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div1n n &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div1 n&lt;&#x2F;span&gt;&lt;span&gt;) , (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;divn n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;every-natural-number-divides-0&quot;&gt;Every natural number divides 0&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div0 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℕ&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;∣ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div0 n &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;divides zero refl
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;axiom-of-choice-in-type-theory&quot;&gt;Axiom of Choice in Type Theory&lt;&#x2F;h2&gt;
&lt;p&gt;I knew what AC is intuitively, it means we can find a choice function for any set in a collection of sets to select an element of it out, now I&#x27;ll show the formalized form:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\forall X [\varnothing \notin X \Rightarrow \exists f:X\rightarrow \bigcup X \ \ \ \ \forall A \in X(f(A) \in A)]
$$&lt;&#x2F;p&gt;
&lt;p&gt;Or in type theory:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\Pi_{(x:A)}\Sigma_{(y:B)}R(x, y) \rightarrow \Sigma_{(f: A\rightarrow B)} \Pi_{(x:A)} R(x, f(x))
$$&lt;&#x2F;p&gt;
&lt;p&gt;This is actually provable:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Product
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;choice &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;R &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} →
&lt;&#x2F;span&gt;&lt;span&gt;   ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ B&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ y &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;R &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x y&lt;&#x2F;span&gt;&lt;span&gt;)) →
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ f &lt;&#x2F;span&gt;&lt;span&gt;→ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;R &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f x&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;choice h &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ z &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fst&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h z&lt;&#x2F;span&gt;&lt;span&gt;)) , (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;snd&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h x&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And the reverse proposition is also provable:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\Sigma_{(f: A\rightarrow B)} \Pi_{(x:A)} R(x, f(x)) \rightarrow \Pi_{(x:A)}\Sigma_{(y:B)}R(x, y)
$$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;choice&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rev &lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;R &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;) →
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ f &lt;&#x2F;span&gt;&lt;span&gt;→ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;R &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f x&lt;&#x2F;span&gt;&lt;span&gt;)) →
&lt;&#x2F;span&gt;&lt;span&gt;   ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ B&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ y &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;R &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x y&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;choice&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rev &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;R &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fst &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h&amp;#39; x&lt;&#x2F;span&gt;&lt;span&gt;) , (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;snd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h&amp;#39; x&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However this direct &quot;Curry-Howard translation&quot; of AC is not as powerful as it is in set theory, I guess we move the complexity of AC to somewhere else in the type theory. Anyway, we&#x27;ll see a more complex form of AC representing in later courses.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;materials&quot;&gt;Materials&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;lecture-note&quot;&gt;Lecture Note&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;martinescardo&#x2F;HoTTEST-Summer-School&#x2F;blob&#x2F;main&#x2F;HoTT&#x2F;HoTTEST_Lecture_4.pdf&quot;&gt;HoTTEST_Lecture_4.pdf&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;record-on-youtube&quot;&gt;Record on Youtube&lt;&#x2F;h3&gt;
&lt;div &gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Pjgath72Ja0&quot; webkitallowfullscreen
        mozallowfullscreen allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Grothendieck_universe&quot;&gt;ref&lt;&#x2F;a&gt;, &lt;code&gt;to_learn++&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;In computer science, a type family associates data types with other data types, using a type-level function defined by an open-ended collection of valid instances of input types and the corresponding output types. —— Wikipedia&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;Seems the book of this course is using a “Tarski-style universes”, personally I think “Russell-style universes”, which doesn&#x27;t have $\mathcal{T}$, is more easy to understand. The origin &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Homotopy_type_theory&quot;&gt;&lt;em&gt;HoTT Book&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; uses Russell-style universes. I guess the reason we are using “Tarski-style universes” here might be that in “Tarski-style universes” we can separate types and terms, ie. universe is still a type which contains terms, and $\mathcal{T}$, as a dependent function, is used to mapping these terms to actual types. After all, even if we are using Tarski-style universes in this course, in most of times $\mathcal{T}$s and  $\check{\ }$s are omitted and won&#x27;t cause any problem.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;Ref section 6.1 of the book &lt;em&gt;Introduction to Homotopy Type Theory&lt;&#x2F;em&gt; by Egbert Rijke for these structures, I&#x27;m too tired to type all these with latex.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;5&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;5&lt;&#x2F;sup&gt;
&lt;p&gt;Unless necessary, I&#x27;ll write all proofs in Agda in the future, since typing proof tree in latex is too tiring.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>HoTTEST Summer School HoTT Notes 3</title>
        <published>2022-07-18T05:15:33.302+00:00</published>
        <updated>2022-07-18T05:15:33.302+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/hottest-notes-hott-3/"/>
        <id>https://longfangsong.github.io/en/hottest-notes-hott-3/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/hottest-notes-hott-3/">&lt;h2 id=&quot;identity-types&quot;&gt;Identity Types&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In intensional type theory under the propositions as types paradigm, an identity type (or equality type) is the incarnation of equality. That is, for any type $A$ and any terms $x,y:A$, the type $Id_A(x,y)$ is “the type of proofs that $x=y$” or “the type of reasons why $x=y$”. —— nLab&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;judgemental-equality-vs-propositional-equality&quot;&gt;Judgemental Equality vs Propositional Equality&lt;&#x2F;h3&gt;
&lt;p&gt;Judgemental equality, or definitional equality since we won&#x27;t pay much attention to the difference in this course, is intensional equality, or equality of meaning (synonymy).
Or in words understandable for normal human beings, definitional equality is something equals to another thing &quot;magically&quot;, they are equal to each other just because we SAY IT.&lt;&#x2F;p&gt;
&lt;p&gt;For example, in all the rules mentioned in past several notes and proofs built by these rules, we use judgemental equality $\doteq$.&lt;&#x2F;p&gt;
&lt;p&gt;As we all see, there are many terms which are judgmental equal and we can prove them, but there&#x27;re also some terms which &quot;should&quot; be equal but we cannot prove, eg. we cannot find a proof for $add(0, x) \doteq x$, and that&#x27;s where propositional equality and identity types come for help, which basically is a type which stands for &quot;equal&quot;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;type-constructors-often-internalize-structure&quot;&gt;Type Constructors Often Internalize Structure&lt;&#x2F;h3&gt;
&lt;p&gt;(Don&#x27;t really get what the teacher want to show by saying these.)&lt;&#x2F;p&gt;
&lt;p&gt;Maybe used to show that types are used to describe some certain property of something, so we can think identity types internalize the property that something is propositional equal to another thing.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rules-on-identity-types&quot;&gt;Rules on Identity Types&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;two-variable-version&quot;&gt;Two variable version&lt;&#x2F;h4&gt;
&lt;p&gt;$$
\text{=-form}:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$A\ type\ a:A\ b:A$}
\UnaryInfC{$a\underset{A}{=} b\ type$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{=-intro}:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$a:A$}
\UnaryInfC{$refl_a : a\underset{A}{=} a$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{=-elim}:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$x:A, y:A, p:x\underset{A}{=} y \vdash D(x,y,p)\ type$}
\AxiomC{$x:A \vdash d:D(x,x,refl_x)\ type$}
\BinaryInfC{$x:A, y:A, p:x\underset{A}{=} y \vdash ind_=(d,x,y,p) : D(x,y,p)\ type$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{=-comp}:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$x:A, y:A, p:x\underset{A}{=} y \vdash D(x,y,p)\ type$}
\AxiomC{$x:A \vdash d:D(x,x,refl_x)\ type$}
\BinaryInfC{$x:A \vdash ind_=(d,x,x,refl_x) \doteq d: D(x,x,refl_x)$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;h4 id=&quot;single-variable-version&quot;&gt;Single variable version&lt;&#x2F;h4&gt;
&lt;p&gt;$$
\text{=-form}:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$a:A$}
\UnaryInfC{$x : A \vdash a \underset{A}{=} x\ type$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{=-intro}:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$a:A$}
\UnaryInfC{$refl_a : a\underset{A}{=} a$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{=-elim}:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$a : A$}
\AxiomC{$x : A, p : a\ {=_A}\ x ⊢ P(x, p)\ type$}
\BinaryInfC{$ind_= : P(a, refl_a) \rightarrow \Pi_{(x:A)}{\Pi_{(p:a{=_A}x)} P(x, p)}$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\text{=-comp}:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$a : A$}
\AxiomC{$x : A, p : a\ {=_A}\ x ⊢ P(x, p)\ type$}
\BinaryInfC{$u : P(a, refl_a) \vdash ind_=(u, a, refl_a) : P(a, refl_a)$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reflexivity&quot;&gt;Reflexivity&lt;&#x2F;h3&gt;
&lt;p&gt;We can use $refl_x$ to internalize (or &quot;downgrade&quot;, if you prefer human being&#x27;s language) judgmental equality to propositional equality, ie.&lt;&#x2F;p&gt;
&lt;p&gt;Since we have&lt;&#x2F;p&gt;
&lt;p&gt;If $a \doteq b : A$, then $(a \underset{A}{=} b) \doteq (a \underset{A}{=} a)$, and&lt;&#x2F;p&gt;
&lt;p&gt;if $refl_a:a \underset{A}{=} a$ and $(a \underset{A}{=} b) \doteq (a \underset{A}{=} a)$, then $refl_a:a=_Ab$.&lt;&#x2F;p&gt;
&lt;p&gt;So we can internalize $a \doteq b : A$ with $refl_a:a\underset{A}{=}b$.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;functoriality&quot;&gt;Functoriality&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Functoriality means that something is a functor. e.g. when someone asks about the functoriality of some construction, they&#x27;re asking whether or not it can be upgraded to a functor. —— &lt;a href=&quot;https:&#x2F;&#x2F;math.stackexchange.com&#x2F;questions&#x2F;1922113&#x2F;what-exactly-is-functoriality&quot;&gt;stackexchange problem&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So basically it is the property of whether a construction is a functor.&lt;&#x2F;p&gt;
&lt;p&gt;Arrrrgh, functor, another classical Haskell thing.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In functional programming, a functor is a design pattern inspired by the definition from category theory, that allows for a generic type to apply a function inside without changing the structure of the generic type. —— Wikipedia&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Or, functors are functions act on paths&#x2F;terms of the identity type.&lt;&#x2F;p&gt;
&lt;p&gt;For any two types $A$, $B$, any function $f:A\rightarrow B$, and any two terms $a:A, a&#x27;:A$, there exists a functor:
$$
ap_f: a\underset{A}{=}a&#x27; \rightarrow f\ a\underset{B}{=} f\ a&#x27;
$$&lt;&#x2F;p&gt;
&lt;p&gt;Or in math language:&lt;&#x2F;p&gt;
&lt;p&gt;$$
ap: \Pi_{(f:A\rightarrow B)} \Pi_{(a,a&#x27;:A)} a \underset{A}{=} a&#x27; \rightarrow b \underset{A}{=} b&#x27;
$$&lt;&#x2F;p&gt;
&lt;p&gt;We can prove this by using $=-elim$ rule.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$f:A\rightarrow B, a:A \vdash refl_{f\ a}:f\ a\underset{B}{=} f\ a$}
\UnaryInfC{$f:A\rightarrow B, a:A, a&#x27;:A, p: a\underset{A}{=}a&#x27; \vdash ind_=(refl_{f\ a},a,a&#x27;,p): f\ a \underset{B}{=} f\ a&#x27; $}
\UnaryInfC{$\lambda f. \lambda a.\lambda a&#x27;. ind_=(refl_{f\ a},a,a&#x27;,p):\Pi_{(f:A\rightarrow B)} \Pi_{(a,a&#x27;:A)} a \underset{A}{=} a&#x27; \rightarrow f\ a \underset{B}{=} f\ a&#x27;$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;proof-example&quot;&gt;Proof Example&lt;&#x2F;h3&gt;
&lt;p&gt;Prove: $\Pi_{(n:\mathbb N)} add(0,n) = n$.&lt;&#x2F;p&gt;
&lt;p&gt;You can use the following two judgemental equality rules, which is provable before we have $refl$ or such things:
$$
add(n, 0) \doteq n
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
add(n, succ(m)) \doteq succ(add(n, m))
$$&lt;&#x2F;p&gt;
&lt;p&gt;We start as normal:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$$}
\UnaryInfC{$?:\Pi_{(n:\mathbb N)} add(0,n)=n$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Then let&#x27;s use $\Pi-intro$:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$n:\mathbb N \vdash ?:add(0,n)=n$}
\UnaryInfC{$?:\Pi_{(n:\mathbb N)} add(0,n)=n$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Then $\mathbb N-elim$:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$?: add(0,0)=0$}
\AxiomC{$n:\mathbb N, p: add(0, n)=n \vdash ?: add(0,succ(n))=succ(n)$}
\BinaryInfC{$n:\mathbb N \vdash ?:add(0,n)=n$}
\UnaryInfC{$?:\Pi_{(n:\mathbb N)} add(0,n)=n$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;For $add(0,0)=0$, we can downgrade judgemental equal rule $add(n, 0) \doteq n$ where $n=0$ with $refl_0$.&lt;&#x2F;p&gt;
&lt;p&gt;For $add(0,succ(n))=succ(n)$, we can use $ap_{succ}$ on $p$:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\displaylines {
ap_{succ}: a=a&#x27; \rightarrow succ(a)=succ(a&#x27;)\\
ap_{succ}\ p: (a=a&#x27; \rightarrow succ(a)=succ(a&#x27;))\ (add(0, n)=n)  \\
ap_{succ}\ p: succ(add(0, n))=succ(n)
}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s put them in:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$refl_0: add(0,0)=0$}
\AxiomC{$n:\mathbb N, p: add(0, n)=n \vdash ap_{succ}\ p: add(0,succ(n))=succ(n)$}
\BinaryInfC{$n:\mathbb N \vdash ?:add(0,n)=n$}
\UnaryInfC{$?:\Pi_{(n:\mathbb N)} add(0,n)=n$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;And fill the holes:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$refl_0: add(0,0)=0$}
\AxiomC{$n:\mathbb N, p: add(0, n)=n \vdash ap_{succ}\ p: add(0,succ(n))=succ(n)$}
\BinaryInfC{$n:\mathbb N \vdash ind_{\mathbb N}(refl_0, ap_{succ}\ p, n):add(0,n)=n$}
\UnaryInfC{$\lambda n. ind_{\mathbb N}(refl_0, ap_{succ}\ p, n):\Pi_{(n:\mathbb N)} add(0,n)=n$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;In agda, note &lt;code&gt;ap&lt;&#x2F;code&gt; is called &lt;code&gt;cong&lt;&#x2F;code&gt; in agda:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ℕ&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n zero &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;suc n&lt;&#x2F;span&gt;&lt;span&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cong suc refl 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-groupoidal-behaviour-of-types&quot;&gt;The Groupoidal Behaviour of Types&lt;&#x2F;h2&gt;
&lt;p&gt;We can think terms as points, and we can use paths&#x2F;homotopies which stands for identity to connect them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;hottest-notes-hott-3&#x2F;.&#x2F;connected.png&quot; alt=&quot;connected&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here are three terms a, b and c, and a is proportional equal to b and b is proportional equal to c, which we represent with p and q.&lt;&#x2F;p&gt;
&lt;p&gt;And we can play freely with these terms and equals, eg.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We can have multiple equalities of the same type
&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;hottest-notes-hott-3&#x2F;&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;We can take the inverse of an equality
&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;hottest-notes-hott-3&#x2F;&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;We can take composition of equalities
&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;hottest-notes-hott-3&#x2F;&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;We can have equalities of equalities
&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;hottest-notes-hott-3&#x2F;&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And that&#x27;s how homotopies in space behave.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;proof-of-these-properties&quot;&gt;Proof of these properties&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;inverse-of-an-equality&quot;&gt;Inverse of an Equality&lt;&#x2F;h4&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$a:A\vdash refl_a:a\underset{A}{=} a$}
\UnaryInfC{$a,b:A, p: a\underset{A}{=} b \vdash ind_=(refl_a,a,b,p):b\underset{A}{=} a$}
\UnaryInfC{$\lambda a,b,p. ind_=(refl_a,a,b,p):\Pi_{(a,b:A)}a\underset{A}{=}b \rightarrow b\underset{A}{=}a$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;h4 id=&quot;composition-of-equalities&quot;&gt;Composition of Equalities&lt;&#x2F;h4&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$a,c:A\vdash \lambda x.x: a\underset{A}{=}c \rightarrow a\underset{A}{=} c$}
\UnaryInfC{$a,b,c:A, p:a\underset{A}{=}b \vdash ind_=(\lambda x.x, a, b,p):b\underset{A}{=}c \rightarrow a\underset{A}{=}c$}
\UnaryInfC{$\lambda a,b,c,p. ind_=(\lambda x.x, a, b,p): \Pi_{(a,b,c:A)} a\underset{A}{=}b \rightarrow b\underset{A}{=}c \rightarrow a\underset{A}{=}c$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-space-interpretation-of-types&quot;&gt;The Space Interpretation of Types&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s an interpretation of dependent type theory into space (the category of Kan complexes&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;) in which:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Type theory&lt;&#x2F;th&gt;&lt;th&gt;Homotopy theory&lt;&#x2F;th&gt;&lt;th&gt;Kan complexes&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Types&lt;&#x2F;td&gt;&lt;td&gt;Spaces&lt;&#x2F;td&gt;&lt;td&gt;Kan complexes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Terms&lt;&#x2F;td&gt;&lt;td&gt;Points&lt;&#x2F;td&gt;&lt;td&gt;0-Cells&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Equalities&lt;&#x2F;td&gt;&lt;td&gt;Path fibration&lt;&#x2F;td&gt;&lt;td&gt;0-Cells of path object&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;$\pi: \Sigma_{(b:B)}E(b)\rightarrow B$&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;Kan fibrations&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;$\pi: \Pi_{(b:B)}E(b)$&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;The space of sections of $\pi: \Pi_{(b:B)}E(b)$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Dependent types&lt;&#x2F;td&gt;&lt;td&gt;Fibrations&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Dependent pair type&lt;&#x2F;td&gt;&lt;td&gt;Total Space&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;transport&quot;&gt;Transport&lt;&#x2F;h2&gt;
&lt;p&gt;For any dependent type $x:B\vdash E(B)\ type$,
any terms $b,b&#x27;:B$ and any equality $p:b=_Bb&#x27;$, there is
a function $tr_B:E(b)\rightarrow E(b&#x27;)$&lt;&#x2F;p&gt;
&lt;p&gt;Basically it means propositional equality remains when apply some dependent type &quot;over&quot; it.&lt;&#x2F;p&gt;
&lt;p&gt;This is part of a more sophisticated relationship between type theory and homotopy theory (Quillen model category theory)
Transport says
that $\pi: \Sigma_{(b:B)}E(b)\rightarrow B$ behaves like a fibration in a QMC.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;proof&quot;&gt;Proof&lt;&#x2F;h3&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$b:B\vdash \lambda x.x: E(b) \rightarrow E(b)$}
\UnaryInfC{$b,b&#x27;:B,p:b\underset{B}{=}b&#x27;\vdash ind_=(\lambda x.x, b, b&#x27;, p): E(b) \rightarrow E(b&#x27;)$}
\UnaryInfC{$\lambda b,b&#x27;,p.ind_=(\lambda x.x, b, b&#x27;, p): \Pi_{(b,b&#x27;:B)}(b\underset{B}{=}b&#x27;) \rightarrow E(b) \rightarrow E(b&#x27;)$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;transport &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀ &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;} (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;) {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b b&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;≡ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;transport &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;refl &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;λ x &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;materials&quot;&gt;Materials&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;lecture-note&quot;&gt;Lecture Note&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;martinescardo&#x2F;HoTTEST-Summer-School&#x2F;blob&#x2F;main&#x2F;HoTT&#x2F;HoTTEST_Lecture_3.pdf&quot;&gt;HoTTEST_Lecture_3.pdf&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;record-on-youtube&quot;&gt;Record on Youtube&lt;&#x2F;h3&gt;
&lt;div &gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;oMKl7pBRg1E&quot; webkitallowfullscreen
        mozallowfullscreen allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;It&#x27;s actually judgmentally equal, &lt;a href=&quot;https:&#x2F;&#x2F;jozefg.bitbucket.io&#x2F;posts&#x2F;2014-08-06-equality.html&quot;&gt;ref&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;The VSCode spell checker told me this is not even an existing word, and so do many mathematic terms in this article, mathematicians are really good at inventing terms!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;WTF is that 😭 TODO: learn it.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>HoTTEST Summer School HoTT Notes 2</title>
        <published>2022-07-16T05:45:57.294+00:00</published>
        <updated>2022-07-16T05:45:57.294+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/hottest-notes-hott-2/"/>
        <id>https://longfangsong.github.io/en/hottest-notes-hott-2/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/hottest-notes-hott-2/">&lt;h2 id=&quot;inductive-types&quot;&gt;Inductive Types&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In type theory, a system has inductive types if it has facilities for creating a new type from constants and functions that create terms of that type. —— Wikipedia&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;eg.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;Bool: Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;true false&lt;&#x2F;span&gt;&lt;span&gt;: Bool
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;bool&quot;&gt;bool&lt;&#x2F;h4&gt;
&lt;p&gt;$$
bool\text{-}form:
\require{bussproofs}
\begin{prooftree}
\AxiomC{}
\UnaryInfC{$\Gamma \vdash bool\ type$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
bool\text{-}intro:
\require{bussproofs}
\begin{prooftree}
\AxiomC{}
\UnaryInfC{$\Gamma \vdash true:bool$}
\end{prooftree}
\ \ \ \
\require{bussproofs}
\begin{prooftree}
\AxiomC{}
\UnaryInfC{$\Gamma \vdash false:bool$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
bool\text{-}elim:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma,x:bool \vdash D(x)\ type$}
\AxiomC{$\Gamma \vdash a: D(true)$}
\AxiomC{$\Gamma \vdash a: D(false)$}
\TrinaryInfC{$\Gamma,x:bool \vdash ind_{bool}(a,b,x):D(x)$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
bool\text{-}comp:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma,x:bool \vdash D(x)\ type$}
\AxiomC{$\Gamma \vdash a: D(true)$}
\AxiomC{$\Gamma \vdash a: D(false)$}
\TrinaryInfC{$\displaylines {\Gamma \vdash ind_{bool}(a,b,true) \doteq a:D(true)\\ \Gamma \vdash ind_{bool}(a,b,false) \doteq b:D(false)}$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;h4 id=&quot;coproduct&quot;&gt;Coproduct&lt;&#x2F;h4&gt;
&lt;p&gt;$$
+\text{-}form:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma \vdash P\ type$}
\AxiomC{$\Gamma \vdash Q\ type$}
\BinaryInfC{$\Gamma \vdash P+Q\ type$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
+\text{-}intro:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma \vdash p:P$}
\UnaryInfC{$\Gamma \vdash inl(p):P+Q$}
\end{prooftree}
\ \ \ \
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma \vdash q:Q$}
\UnaryInfC{$\Gamma \vdash inr(q):P+Q$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
+\text{-}elim:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma,x:P+Q \vdash D(x)\ type$}
\AxiomC{$\Gamma \vdash a: D(inl(p))$}
\AxiomC{$\Gamma \vdash b: D(inr(q))$}
\TrinaryInfC{$\Gamma,x:P+Q \vdash ind_+(a,b,x):D(x)$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
+\text{-}comp:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma,x:P+Q \vdash D(x)\ type$}
\AxiomC{$\Gamma \vdash a: D(inl(p))$}
\AxiomC{$\Gamma \vdash b: D(inr(q))$}
\TrinaryInfC{$\displaylines {\Gamma \vdash ind_+(a,b,inl(p)) \doteq a:D(inl(p))\\ \Gamma \vdash ind_+(a,b,inr(q)) \doteq b:D(inr(q))}$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;h5 id=&quot;proving-example&quot;&gt;Proving example&lt;&#x2F;h5&gt;
&lt;p&gt;Prove: For any types A,B,C, there&#x27;s a function $A\times B + A\times C \rightarrow A \times (B+C)$.&lt;&#x2F;p&gt;
&lt;p&gt;We start from writing what we want to prove down:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{}
\UnaryInfC{$\vdash\ \ ?:A\times B + A\times C \rightarrow A \times (B+C)$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;When we want to construct a term which is of type $P\rightarrow Q$, the most natural way is to use the $\rightarrow-intro$ rule, ie. assume there exists a term which is of type $A\times B + A\times C$.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$x:A\times B + A\times C \vdash\ ?\ : A \times (B+C)$}
\UnaryInfC{$\Gamma\ \ ?:A\times B + A\times C \rightarrow A \times (B+C)$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Now on the left side of $\vdash$, we have a term in the form of $P + Q$, which leads us to use
$+-elim$.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$x_1: A\times B \vdash\ ?\ : A \times (B+C)$}
\AxiomC{$x_2: A\times C \vdash\ ?\ : A \times (B+C)$}
\BinaryInfC{$x:A\times B + A\times C \vdash\ ?\ : A \times (B+C)$}
\UnaryInfC{$\Gamma\ \ ?:A\times B + A\times C \rightarrow A \times (B+C)$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take the left one for example, to construct a term in type $A \times (B+C)$, we can just use pairing to construct a term in type $P\times Q$.&lt;&#x2F;p&gt;
&lt;p&gt;So now we just need to construct a term like $(p, q): (A, B+C)$, note $()$s here means pair.&lt;&#x2F;p&gt;
&lt;p&gt;For the first element of the pair, which type is A, we just need to take the first element of the pair $x_1$, ie $pr_1x_1$.&lt;&#x2F;p&gt;
&lt;p&gt;And for the second element, which type is B+C, we should use the $+-intro$ rule and put the second element of the pair $x_2$ in with $inl$.&lt;&#x2F;p&gt;
&lt;p&gt;And this is what we got:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$x_1: A\times B \vdash(pr_1x_1, inl(pr_2x_1)): A \times (B+C)$}
\AxiomC{$x_2: A\times C \vdash\ ?\ : A \times (B+C)$}
\BinaryInfC{$x:A\times B + A\times C \vdash\ ?\ : A \times (B+C)$}
\UnaryInfC{$\Gamma\ \ ?:A\times B + A\times C \rightarrow A \times (B+C)$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;The similar technique can be used on the right side:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$x_1: A\times B \vdash(pr_1x_1, inl(pr_2x_1)): A \times (B+C)$}
\AxiomC{$x_2: A\times C \vdash(pr_1x_2, inr(pr_2x_2)): A \times (B+C)$}
\BinaryInfC{$x:A\times B + A\times C \vdash\ ?\ : A \times (B+C)$}
\UnaryInfC{$\Gamma\ \ ?:A\times B + A\times C \rightarrow A \times (B+C)$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Then fill the hole we left when applying $+-elim$:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$x_1: A\times B \vdash(pr_1x_1, inl(pr_2x_1)): A \times (B+C)$}
\AxiomC{$x_2: A\times C \vdash(pr_1x_2, inr(pr_2x_2)): A \times (B+C)$}
\BinaryInfC{$x:A\times B + A\times C \vdash ind_+((pr_1x_1, inl(pr_2x_1)), (pr_1x_2, inr(pr_2x_2)), x) : A \times (B+C)$}
\UnaryInfC{$\Gamma\ \ ?:A\times B + A\times C \rightarrow A \times (B+C)$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Now fill the last hole by introducing a $λ$ and we are done:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$x_1: A\times B \vdash(pr_1x_1, inl(pr_2x_1)): A \times (B+C)$}
\AxiomC{$x_2: A\times C \vdash(pr_1x_2, inr(pr_2x_2)): A \times (B+C)$}
\BinaryInfC{$x:A\times B + A\times C \vdash ind_+((pr_1x_1, inl(pr_2x_1)), (pr_1x_2, inr(pr_2x_2)), x) : A \times (B+C)$}
\UnaryInfC{$\vdash\ \lambda\ x. ind_+((pr_1x_1, inl(pr_2x_1)), (pr_1x_2, inr(pr_2x_2)), x): A\times B + A\times C \rightarrow A \times (B+C)$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;In agda:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Product
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Sum renaming&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;⊎&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ to _&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B C &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;× &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;× &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;C &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;× (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B C&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inj&lt;&#x2F;span&gt;&lt;span&gt;₁ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fst &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;snd&lt;&#x2F;span&gt;&lt;span&gt;)) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fst &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inj&lt;&#x2F;span&gt;&lt;span&gt;₁ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;snd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B C&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inj&lt;&#x2F;span&gt;&lt;span&gt;₂ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fst &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;snd&lt;&#x2F;span&gt;&lt;span&gt;)) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fst &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inj&lt;&#x2F;span&gt;&lt;span&gt;₂ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;snd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;dependent-pair-type-s-type&quot;&gt;Dependent Pair Type (Σ type)&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;In computer science, a tagged union, also called a variant, variant record, choice type, discriminated union, disjoint union, sum type or coproduct, is a data structure used to hold a value that could take on several different, but fixed, types. —— Wikipedia&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;$$
\Sigma-form:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma, x: P \vdash Q(x)$}
\UnaryInfC{$\Gamma \vdash \Sigma_{(x:P)} Q(x)$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\Sigma-intro:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma \vdash p:P$}
\AxiomC{$\Gamma \vdash q:Q(p)$}
\BinaryInfC{$\Gamma \vdash pair(p, q):\Sigma_{(x:P)} Q(x)$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\Sigma-elim:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma,z:\Sigma_{(x:P)} Q(x) \vdash D(z)\ type$}
\AxiomC{$\Gamma,x:P,y:Q(x) \vdash a: D(pair(x,y))$}
\BinaryInfC{$\Gamma,z:\Sigma_{(x:P)} \vdash ind_{\Sigma}(a,z):D(z)$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\Sigma-comp:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma,z:\Sigma_{(x:P)} Q(x) \vdash D(z)\ type$}
\AxiomC{$\Gamma,x:P,y:Q(x) \vdash a: D(pair(x,y))$}
\BinaryInfC{$\Gamma,x:P,y:Q(x) \vdash ind_{\Sigma} (a, pair(x,y)) \doteq a:D(pair(x,y))$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;h5 id=&quot;how-to-view-s-type&quot;&gt;How to view Σ type&lt;&#x2F;h5&gt;
&lt;p&gt;Assume there&#x27;s a set named as P and a predicate named as Q, then $\Sigma_{(x:P)}Q(x)$ means there &lt;strong&gt;exists&lt;&#x2F;strong&gt; an element $x$ in $P$ such that $Q(x)$ holds, ie. we can regard Σ in types as ∃ in logic.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;proving-example-1&quot;&gt;Proving example&lt;&#x2F;h5&gt;
&lt;p&gt;Prove: for any $x:P\vdash Q(x)\ type$, there exists a projection function $\pi : \Sigma_{(x:P)} Q(x) \rightarrow P$.&lt;&#x2F;p&gt;
&lt;p&gt;By using $\rightarrow-intro$ and $\Sigma-elim$, we can prove it like this:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{$x:P,y:Q(x) \vdash x:P$}
\UnaryInfC{$z:\Sigma_{(x:P)}Q(x)\vdash ind_{\Sigma}(x,z):P$}
\UnaryInfC{$\vdash \lambda z.ind_{\Sigma}(x,z):\Sigma_{(x:P)}Q(x)\rightarrow P$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;In agda:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-agda &quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;π &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;∀&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;) → &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Σ A B &lt;&#x2F;span&gt;&lt;span&gt;→ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;π &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;A B&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fst &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;snd&lt;&#x2F;span&gt;&lt;span&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fst
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;natural-numbers&quot;&gt;Natural Numbers&lt;&#x2F;h4&gt;
&lt;p&gt;$$
\mathbb N-form:
\require{bussproofs}
\begin{prooftree}
\AxiomC{}
\UnaryInfC{$\Gamma \vdash \mathbb N\ type$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\mathbb N-intro:
\require{bussproofs}
\begin{prooftree}
\AxiomC{}
\UnaryInfC{$\Gamma \vdash 0:\mathbb N$}
\end{prooftree}
\ \ \ \
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma \vdash n:\mathbb N$}
\UnaryInfC{$\Gamma \vdash succ(n):\mathbb N$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\mathbb N-elim:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma,x:\mathbb N \vdash D(x)\ type$}
\AxiomC{$\Gamma \vdash a:D(0)$}
\AxiomC{$\Gamma,x:\mathbb N,y:D(x) \vdash b: D(succ(x))$}
\TrinaryInfC{$\Gamma,x:\mathbb N \vdash ind_{\mathbb N}(a,b,x):D(x)$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\mathbb N-comp:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma,x:\mathbb N \vdash D(x)\ type$}
\AxiomC{$\Gamma \vdash a:D(0)$}
\AxiomC{$\Gamma,x:\mathbb N,y:D(x) \vdash b: D(succ(x))$}
\TrinaryInfC{$\displaylines {\Gamma \vdash ind_{\mathbb N}(a,b,0) \doteq a:D(0)\\ \Gamma,x:\mathbb N \vdash ind_{\mathbb N}(a,b,succ(x)) \doteq b[ind_{\mathbb N}(a,b,x)&#x2F;y]:D(succ(x))}$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;materials&quot;&gt;Materials&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;lecture-note&quot;&gt;Lecture Note&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;martinescardo&#x2F;HoTTEST-Summer-School&#x2F;blob&#x2F;main&#x2F;HoTT&#x2F;HoTTEST_Lecture_2.pdf&quot;&gt;HoTTEST_Lecture_2.pdf&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;record-on-youtube&quot;&gt;Record on Youtube&lt;&#x2F;h3&gt;
&lt;div &gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;GW0jV0l5NB4&quot; webkitallowfullscreen
        mozallowfullscreen allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;It&#x27;s actually judgmentally equal, &lt;a href=&quot;https:&#x2F;&#x2F;jozefg.bitbucket.io&#x2F;posts&#x2F;2014-08-06-equality.html&quot;&gt;ref&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>HoTTEST Summer School HoTT Notes 1</title>
        <published>2022-07-14T02:51:09.783+00:00</published>
        <updated>2022-07-14T02:51:09.783+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/hottest-notes-hott-1/"/>
        <id>https://longfangsong.github.io/en/hottest-notes-hott-1/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/hottest-notes-hott-1/">&lt;h2 id=&quot;natural-deduction&quot;&gt;Natural deduction&lt;&#x2F;h2&gt;
&lt;p&gt;Trivial, not necessary to say too much here.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;simple-typed-lambda-calculus-stlc-or-stlc&quot;&gt;Simple typed lambda calculus (STλC or STLC)&lt;&#x2F;h2&gt;
&lt;p&gt;Still trivial, just need to clarify some notations the teacher is using.&lt;&#x2F;p&gt;
&lt;p&gt;$pr_1 (p, q)$ means take the first element out from pair $(p, q)$, which is always write as $(p, q).1$, eg.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\require{bussproofs}
\begin{prooftree}
\AxiomC{p: P}
\AxiomC{q: Q}
\BinaryInfC{$pr_1 (p, q) \doteq p: P$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Here $\doteq$ is by definition equal&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, which I always use $\equiv$.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dependent-type-theory&quot;&gt;Dependent type theory&lt;&#x2F;h2&gt;
&lt;p&gt;Though I had some basic knowledge of this before (eg. Dependent types can be viewed as predicates due to Curry-Howard Corresponding), but I do learned some more.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-meaning-of-the-word-dependent&quot;&gt;The meaning of the word &quot;dependent&quot;&lt;&#x2F;h3&gt;
&lt;p&gt;I used to understand this in an intuitive way, in the class the teacher introduced a semi-formal definition of &quot;dependent&quot;, ie. the items on the right side of $\vdash$ depends on those on the left side.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rules-of-p-types&quot;&gt;Rules of π-types&lt;&#x2F;h3&gt;
&lt;p&gt;$$
\Pi-form:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma ,x:P \vdash Q\ type$}
\UnaryInfC{$\Gamma \vdash \Pi_{(x:P)} Q\ type$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\Pi-intro:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma ,x:P \vdash q:Q$}
\UnaryInfC{$\Gamma \vdash \lambda x.q: \Pi_{(x:P)} Q$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\Pi-elim:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma \vdash f:\Pi_{(x:P)} Q$}
\AxiomC{$\Gamma \vdash p:P$}
\BinaryInfC{$\Gamma \vdash f\ p:Q[p&#x2F;x]$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\Pi-comp-\beta:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma ,x:P \vdash q:Q$}
\AxiomC{$\Gamma \vdash p:P$}
\BinaryInfC{$\Gamma \vdash (\lambda x.q) p \doteq q[p&#x2F;x]:Q[p&#x2F;x]$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\Pi-comp-\eta:
\require{bussproofs}
\begin{prooftree}
\AxiomC{$\Gamma \vdash f:\Pi_{x:P} Q$}
\UnaryInfC{$\Gamma \vdash \lambda x.f\ x\doteq f:\Pi_{(x:P)} Q$}
\end{prooftree}
$$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;materials&quot;&gt;Materials&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;lecture-note&quot;&gt;Lecture Note&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;martinescardo&#x2F;HoTTEST-Summer-School&#x2F;blob&#x2F;main&#x2F;HoTT&#x2F;HoTTEST_Lecture_1.pdf&quot;&gt;HoTTEST_Lecture_1.pdf&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;record-on-youtube&quot;&gt;Record on Youtube&lt;&#x2F;h3&gt;
&lt;div &gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;HvYYCHMeM-8&quot; webkitallowfullscreen
        mozallowfullscreen allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;It&#x27;s actually judgmentally equal, &lt;a href=&quot;https:&#x2F;&#x2F;jozefg.bitbucket.io&#x2F;posts&#x2F;2014-08-06-equality.html&quot;&gt;ref&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Automata Theory • Finite State Machines</title>
        <published>2021-07-22T10:55:33.427+00:00</published>
        <updated>2021-07-22T10:55:33.427+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/automata-2/"/>
        <id>https://longfangsong.github.io/en/automata-2/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/automata-2/">&lt;p&gt;A finite state machine is an automaton that can recognize regular grammars (regular expressions).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;deterministic-finite-automata-dfa&quot;&gt;Deterministic Finite Automata (DFA)&lt;&#x2F;h2&gt;
&lt;p&gt;A DFA contains the following elements:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A finite set of states, commonly denoted as $Q$&lt;&#x2F;li&gt;
&lt;li&gt;A finite set of input symbols, commonly denoted as $\Sigma$&lt;&#x2F;li&gt;
&lt;li&gt;A state transition function that takes a state (call it $B$) and an input symbol (call it $a$) as parameters and returns a state (call it $C$), representing that when the machine is in state $B$ and receives input $a$, it should transition to state $C$. This is commonly denoted as $\delta$, written as $C = \delta(B, a)$&lt;&#x2F;li&gt;
&lt;li&gt;An initial state, commonly denoted as $q_0$, where $q_0 \in Q$&lt;&#x2F;li&gt;
&lt;li&gt;A set of final or accepting states, commonly denoted as $F$, where $F \subseteq Q$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;A DFA is commonly represented as a 5-tuple of these elements, written as $A = (Q, \Sigma, \delta, q_0, F)$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nondeterministic-finite-automaton-nfa&quot;&gt;Nondeterministic Finite Automaton (NFA)&lt;&#x2F;h2&gt;
&lt;p&gt;An NFA extends a DFA by changing the state transition function to return a set of states rather than a single state, and allowing the empty string $\epsilon$ as an input symbol.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nfa-determinization&quot;&gt;NFA Determinization&lt;&#x2F;h3&gt;
&lt;p&gt;An NFA can be converted to an equivalent DFA.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;example&quot;&gt;Example&lt;&#x2F;h4&gt;
&lt;p&gt;Let&#x27;s start with an example:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-2&#x2F;.&#x2F;nfa-example.png&quot; alt=&quot;nfa-example&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This NFA recognizes $(a|b)*abb$.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll convert this NFA to a DFA.&lt;&#x2F;p&gt;
&lt;p&gt;Starting from the start state, even without any input, from state $0$ we can reach states ${0,1,2,4,7}$ via $\epsilon$ transitions. Since DFAs don&#x27;t have $\epsilon$ transitions but must have a start state, in our generated DFA these states must be combined into a single state, which we&#x27;ll call $A$.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-2&#x2F;.&#x2F;A.png&quot; alt=&quot;a&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Next, let&#x27;s look at which states we can reach from state $A$ (which represents NFA states ${0,1,2,4,7}$) with input $a$:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;From $2$, we can reach $3$&lt;&#x2F;li&gt;
&lt;li&gt;From $7$, we can reach $8$&lt;&#x2F;li&gt;
&lt;li&gt;From states $3$ and $8$, we can reach ${1,2,3,4,6,7,8}$ via $\epsilon$ transitions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So after input $a$ from state $A$ in the original NFA, we can reach NFA states ${1,2,3,4,6,7,8}$. This combination is clearly not state $A$, so we&#x27;ll create a new state $B$ and connect it after $A$:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-2&#x2F;.&#x2F;AB.png&quot; alt=&quot;ab&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Similarly for input $b$ from state $A$:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-2&#x2F;.&#x2F;ABC.png&quot; alt=&quot;abc&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ve now examined all paths from state $A$ in the DFA.&lt;&#x2F;p&gt;
&lt;p&gt;For clarity, I&#x27;ve annotated the corresponding NFA states on the DFA diagram:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-2&#x2F;annotated1.png&quot; alt=&quot;annotated1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s continue examining from state $B$:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;From this state via $a$, we can reach states ${1,2,3,4,6,7,8}$, which takes us back to $B$, so $B$ transitions to itself on input $a$&lt;&#x2F;li&gt;
&lt;li&gt;From this state via $b$, we can reach states ${1,2,4,5,6,7,9}$, which is a new combination of NFA states, so we&#x27;ll create a new DFA state $D$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This gives us:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-2&#x2F;.&#x2F;ABCD.png&quot; alt=&quot;abcd&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-2&#x2F;annotated2.png&quot; alt=&quot;annotated2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Next examining state $C$:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$C+a \rightarrow {1,2,3,4,6,7,8}$, which takes us to $B$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;$C+b \rightarrow {1,2,4,5,6,7}$, which takes us back to $C$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-2&#x2F;.&#x2F;ABCD2.png&quot; alt=&quot;abcd2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Then state $D$:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$D+a \rightarrow {1,2,3,4,6,7,8}$, which takes us to $B$&lt;&#x2F;li&gt;
&lt;li&gt;$D+b \rightarrow {1,2,4,5,6,7,10}$, creating new state $E$. Since $E$ contains the accepting state $10$ from the original NFA, it becomes an accepting state in the DFA.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This gives us:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-2&#x2F;.&#x2F;ABCDE.png&quot; alt=&quot;abcde&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-2&#x2F;annotated2.png&quot; alt=&quot;annotated3&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Finally, for state $E$:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$E+a→B$&lt;&#x2F;li&gt;
&lt;li&gt;$E+b→C$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So we get:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;automata-2&#x2F;final.png&quot; alt=&quot;final&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Since all states in this DFA have been examined, this is our final result.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the final mapping table from NFA states to DFA states:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;NFA&lt;&#x2F;th&gt;&lt;th&gt;DFA&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;0,1,2,4,7&lt;&#x2F;td&gt;&lt;td&gt;A&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;1,2,3,4,6,7,8&lt;&#x2F;td&gt;&lt;td&gt;B&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;1,2,4,5,6,7&lt;&#x2F;td&gt;&lt;td&gt;C&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;1,2,4,5,6,7,9&lt;&#x2F;td&gt;&lt;td&gt;D&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;1,2,4,5,6,7,10&lt;&#x2F;td&gt;&lt;td&gt;E&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;algorithm&quot;&gt;Algorithm&lt;&#x2F;h4&gt;
&lt;p&gt;Summarizing the above process, we can derive the NFA determinization algorithm:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Map the NFA&#x27;s start state and all states reachable via $\epsilon$ transitions to the DFA&#x27;s start state&lt;&#x2F;li&gt;
&lt;li&gt;If all states in the DFA have been &quot;examined&quot;, the algorithm is complete&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise, consider an unexamined state $N$ in the DFA:
&lt;ol&gt;
&lt;li&gt;For each symbol $ch$ in the alphabet&lt;&#x2F;li&gt;
&lt;li&gt;Find the set of all states reachable from this node&#x27;s corresponding NFA states via $ch$ and any number of $\epsilon$ transitions
&lt;ol&gt;
&lt;li&gt;If this set is a subset of the NFA states corresponding to an existing DFA state $M$, add a transition $N + ch = M$&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise add a new DFA state $P$ corresponding to this set of NFA states. If this set contains an accepting state, make this node an accepting state, and add the transition $N+ch=P$&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;The resulting DFA is the solution&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;code&quot;&gt;Code&lt;&#x2F;h4&gt;
&lt;p&gt;Code available in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;longfangsong&#x2F;RegexCalculator&#x2F;blob&#x2F;master&#x2F;src&#x2F;finiteAutomata&#x2F;Nondeterministic.kt&quot;&gt;Github repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;toDFA&lt;&#x2F;span&gt;&lt;span&gt;(): Deterministic {
&lt;&#x2F;span&gt;&lt;span&gt;        start as Nondeterministic.State
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; States not yet examined, equivalentStates: states reachable via ε transitions
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Since DFA states aren&amp;#39;t fully constructed yet, storing them can be difficult
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; So we store the corresponding set of NFA states
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;statesToFind = mutableSetOf(start.equivalentStates())
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Transition relation table for result
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;result = mutableMapOf&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Nondeterministic.State&amp;gt;, Deterministic.State&amp;gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;nextChar = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Construct DFA start state
&lt;&#x2F;span&gt;&lt;span&gt;    result[start.equivalentStates()] = Deterministic.State(
&lt;&#x2F;span&gt;&lt;span&gt;                nextChar++.toString(),
&lt;&#x2F;span&gt;&lt;span&gt;                start.equivalentStates().any { it.accept },
&lt;&#x2F;span&gt;&lt;span&gt;                mutableMapOf())
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; (!statesToFind.isEmpty()) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Now consider this set of NFA states corresponding to a DFA state
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;theStates = statesToFind.first()
&lt;&#x2F;span&gt;&lt;span&gt;        statesToFind.remove(theStates)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; (ch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; alphabet) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;canGoTo = theStates.directConnectedTo(ch)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;equivalenteStates = canGoTo.equivalentStates
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If corresponding DFA state doesn&amp;#39;t exist, construct it
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (equivalenteStates !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; result.keys) {
&lt;&#x2F;span&gt;&lt;span&gt;                result[equivalenteStates] = Deterministic.State(nextChar++.toString(), equivalenteStates.any { it.accept }, mutableMapOf())
&lt;&#x2F;span&gt;&lt;span&gt;                statesToFind.add(equivalenteStates)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Add transition from this state to other states
&lt;&#x2F;span&gt;&lt;span&gt;            result[theStates]!!.transitions[ch] = result[equivalenteStates]!!
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Save as DFA and return
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Deterministic(result.values.toSet(), result.values.minBy { it.name }!!)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Hello zola!</title>
        <published>2020-01-02T15:00:00+00:00</published>
        <updated>2020-01-02T15:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/hello-zola/"/>
        <id>https://longfangsong.github.io/en/hello-zola/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/hello-zola/">&lt;p&gt;I wrote a lot of blogs, and I used to use hexo as a static site generator, it kind of work well, but I&#x27;m afraid with more and more posts I have, the speed of hexo become unacceptable, moreover, the plugin system works well if I add only one plugin, but become odd if there&#x27;re many plugins work together:&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an image from my origin blog, powered by hexo:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;hello-zola&#x2F;ouch.png&quot; alt=&quot;ouch&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Ouch!&lt;&#x2F;p&gt;
&lt;p&gt;And then, since I&#x27;m a big fan of Rust, I found zola, though this tool is not as complete as hexo, I can use its shortcodes feature to embed different of things to my blog!&lt;&#x2F;p&gt;
&lt;p&gt;For example, terminal record:&lt;&#x2F;p&gt;
&lt;script id=&quot;asciicast-9EhVw8rujVjpPVBV5kQMdAIHe&quot; src=&quot;https:&#x2F;&#x2F;asciinema.org&#x2F;a&#x2F;9EhVw8rujVjpPVBV5kQMdAIHe.js&quot; async&gt;&lt;&#x2F;script&gt;
&lt;p&gt;Which I never imagined when using hexo!&lt;&#x2F;p&gt;
&lt;p&gt;And zola do make it easier to customize a theme, in hexo, if I want to customize a theme, I have to fork it, and do some edit on it. But in zola I can do this easily by override a template block.&lt;&#x2F;p&gt;
&lt;p&gt;But there remains some problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;translations&lt;&#x2F;code&gt; in a theme cannot be used in the site based on that theme. Hope will fixed after &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;pull&#x2F;1148&quot;&gt;#1148&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Cannot paginate over another section.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Anyway, I&#x27;ll absolutly move my blog to zola.&lt;&#x2F;p&gt;
&lt;p&gt;Also I&#x27;m looking forward to contribute something to this project, and I started with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;themes&#x2F;pull&#x2F;49&quot;&gt;migrating a theme&lt;&#x2F;a&gt;, which I&#x27;ll also used on my blog.&lt;&#x2F;p&gt;
&lt;p&gt;Hope zola will become a better project in the future!&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Or maybe I misunderstood the &lt;code&gt;pagination&lt;&#x2F;code&gt; feature ...&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How to implement an easiest compiler</title>
        <published>2019-05-21T16:39:56.026+00:00</published>
        <updated>2019-05-21T16:39:56.026+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/build-a-compiler-in-the-easiest-way/"/>
        <id>https://longfangsong.github.io/en/build-a-compiler-in-the-easiest-way/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/build-a-compiler-in-the-easiest-way/">&lt;p&gt;This article will lead the reader to make a simple C-like (but much simpler than C) language compiler.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;longfangsong&#x2F;toylang&#x2F;tree&#x2F;db02558dd658c0cf667f60c822eb4bd42ecb9ee7&quot;&gt;Here&lt;&#x2F;a&gt;, is the reference code.&lt;&#x2F;p&gt;
&lt;p&gt;This language supports:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;2 basic types: &lt;code&gt;int&lt;&#x2F;code&gt; and &lt;code&gt;double&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Arrays in these basic types&lt;&#x2F;li&gt;
&lt;li&gt;2 kinds of control flow statements &lt;code&gt;if&lt;&#x2F;code&gt; (with optionally &lt;code&gt;else&lt;&#x2F;code&gt;) and &lt;code&gt;while&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Basic mathematical operators &lt;code&gt;+&lt;&#x2F;code&gt;、&lt;code&gt;-&lt;&#x2F;code&gt;、&lt;code&gt;*&lt;&#x2F;code&gt;、&lt;code&gt;&#x2F;&lt;&#x2F;code&gt;、&lt;code&gt;&amp;lt;&lt;&#x2F;code&gt;、&lt;code&gt;&amp;lt;=&lt;&#x2F;code&gt;、&lt;code&gt;&amp;gt;&lt;&#x2F;code&gt;、&lt;code&gt;&amp;gt;=&lt;&#x2F;code&gt;、&lt;code&gt;==&lt;&#x2F;code&gt;、&lt;code&gt;!=&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The author assumes the user has a good command of C language&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; and knows how to use regex, flex and bison.&lt;&#x2F;p&gt;
&lt;p&gt;If you are not familiar with flex and bison, refer to &lt;a href=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;build-a-compiler-in-the-easiest-way&#x2F;.&quot;&gt;another article of mine&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-whole-compiling-process&quot;&gt;The whole compiling process&lt;&#x2F;h2&gt;
&lt;p&gt;The compiler follows the following process&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;build-a-compiler-in-the-easiest-way&#x2F;.&#x2F;routine.en.svg&quot; alt=&quot;routine&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Obviously there are a lot of code which we don&#x27;t need to write, and it is both fortunate and unfortunate for us to be born in such an era with rich tools.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lexical-analysis&quot;&gt;Lexical Analysis&lt;&#x2F;h3&gt;
&lt;p&gt;Here is the key part of flex code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;l&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-l &quot;&gt;&lt;code class=&quot;language-l&quot; data-lang=&quot;l&quot;&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                      {yylval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=Char; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; TYPE;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                       {yylval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=Int; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; TYPE;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                    {yylval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=Double; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; TYPE;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                    {yylval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=String; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; TYPE;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                        {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; IF;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                      {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; ELSE;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                     {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; WHILE;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                     {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; PRINT;}
&lt;&#x2F;span&gt;&lt;span&gt;([-])?[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;]+                {yylval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int_value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;atoi&lt;&#x2F;span&gt;&lt;span&gt;(yytext); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; INT_LITERAL;}
&lt;&#x2F;span&gt;&lt;span&gt;([-])?[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;]+\.[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;]*        {yylval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;double_value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;atof&lt;&#x2F;span&gt;&lt;span&gt;(yytext); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; DOUBLE_LITERAL;}
&lt;&#x2F;span&gt;&lt;span&gt;[a-zA-Z][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;-9a-zA-Z_]*       {yylval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string_value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strdup&lt;&#x2F;span&gt;&lt;span&gt;(yytext); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; IDENTIFY;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                        {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; EQUAL;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                        {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; NONEQUAL;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                         {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;*yytext;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                        {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; LESSEQ;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                         {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;*yytext;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                        {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; GREATEREQ;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                         {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;*yytext;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                         {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;*yytext;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                         {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;*yytext;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                         {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;*yytext;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                         {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;*yytext;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                         {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;*yytext;}
&lt;&#x2F;span&gt;&lt;span&gt;[ \t]                       {}
&lt;&#x2F;span&gt;&lt;span&gt;.                           {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;*yytext;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;gramma-analysis&quot;&gt;Gramma analysis&lt;&#x2F;h3&gt;
&lt;p&gt;Here is the key part of the bison code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bison&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bison &quot;&gt;&lt;code class=&quot;language-bison&quot; data-lang=&quot;bison&quot;&gt;&lt;span&gt;program:
&lt;&#x2F;span&gt;&lt;span&gt;    program statement           
&lt;&#x2F;span&gt;&lt;span&gt;    |                          
&lt;&#x2F;span&gt;&lt;span&gt;    ;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assign:
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;=&amp;#39; expression             
&lt;&#x2F;span&gt;&lt;span&gt;    ;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;defineStatement:
&lt;&#x2F;span&gt;&lt;span&gt;    TYPE IDENTIFY &amp;#39;;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    | TYPE IDENTIFY &amp;#39;[&amp;#39; INT_LITERAL &amp;#39;]&amp;#39; &amp;#39;;&amp;#39; 
&lt;&#x2F;span&gt;&lt;span&gt;    | TYPE IDENTIFY assign &amp;#39;;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    ;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;assignStatement:
&lt;&#x2F;span&gt;&lt;span&gt;    referenceExpression assign &amp;#39;;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    ;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;statementList:
&lt;&#x2F;span&gt;&lt;span&gt;    statementList statement                 
&lt;&#x2F;span&gt;&lt;span&gt;    |                                       
&lt;&#x2F;span&gt;&lt;span&gt;    ;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;block:
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;{&amp;#39; statementList &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; 
&lt;&#x2F;span&gt;&lt;span&gt;    ;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;ifStatement:
&lt;&#x2F;span&gt;&lt;span&gt;    IF expression block                   
&lt;&#x2F;span&gt;&lt;span&gt;    | IF expression block ELSE block        
&lt;&#x2F;span&gt;&lt;span&gt;    ;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;whileStatement:
&lt;&#x2F;span&gt;&lt;span&gt;    WHILE expression block                  
&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;printStatement:
&lt;&#x2F;span&gt;&lt;span&gt;    PRINT &amp;#39;(&amp;#39; expression &amp;#39;)&amp;#39; &amp;#39;;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;statement:
&lt;&#x2F;span&gt;&lt;span&gt;    defineStatement
&lt;&#x2F;span&gt;&lt;span&gt;    | assignStatement
&lt;&#x2F;span&gt;&lt;span&gt;    | block
&lt;&#x2F;span&gt;&lt;span&gt;    | ifStatement
&lt;&#x2F;span&gt;&lt;span&gt;    | whileStatement
&lt;&#x2F;span&gt;&lt;span&gt;    | printStatement
&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;referenceExpression:
&lt;&#x2F;span&gt;&lt;span&gt;    IDENTIFY 
&lt;&#x2F;span&gt;&lt;span&gt;    | IDENTIFY &amp;#39;[&amp;#39; expression &amp;#39;]&amp;#39; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;atomExpression:
&lt;&#x2F;span&gt;&lt;span&gt;    INT_LITERAL                            
&lt;&#x2F;span&gt;&lt;span&gt;    | DOUBLE_LITERAL                      
&lt;&#x2F;span&gt;&lt;span&gt;    | referenceExpression                  
&lt;&#x2F;span&gt;&lt;span&gt;    | &amp;#39;(&amp;#39; expression &amp;#39;)&amp;#39;                  
&lt;&#x2F;span&gt;&lt;span&gt;    ;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;unaryOperator:
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;+&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    | &amp;#39;-&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    | &amp;#39;!&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    ;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;unaryExpression:
&lt;&#x2F;span&gt;&lt;span&gt;    atomExpression                        
&lt;&#x2F;span&gt;&lt;span&gt;    | unaryOperator atomExpression         
&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;binaryOrAtomExpression:
&lt;&#x2F;span&gt;&lt;span&gt;    unaryExpression                                    
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression &amp;#39;+&amp;#39; unaryExpression       
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression &amp;#39;-&amp;#39; unaryExpression   
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression &amp;#39;*&amp;#39; unaryExpression        
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression &amp;#39;&#x2F;&amp;#39; unaryExpression      
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression &amp;#39;&amp;lt;&amp;#39; unaryExpression       
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression &amp;#39;&amp;gt;&amp;#39; unaryExpression       
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression LESSEQ     unaryExpression 
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression GREATEREQ  unaryExpression
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression EQUAL      unaryExpression 
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression NONEQUAL   unaryExpression 
&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;expression:
&lt;&#x2F;span&gt;&lt;span&gt;    binaryOrAtomExpression 
&lt;&#x2F;span&gt;&lt;span&gt;    ;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that the corresponding behavior code is not given here, because we need to understand AST  first to understand these behaviors.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ast-abstract-syntax-tree&quot;&gt;AST（abstract syntax tree）&lt;&#x2F;h3&gt;
&lt;p&gt;An abstract syntax tree organizes the parsed syntax units into a tree.&lt;&#x2F;p&gt;
&lt;p&gt;Basically each statement and expression has a correspond node on the AST.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ast-design-of-this-compiler&quot;&gt;AST design of this compiler&lt;&#x2F;h4&gt;
&lt;p&gt;Some key concepts are borrowed from LLVM&#x27;s AST design.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;build-a-compiler-in-the-easiest-way&#x2F;.&#x2F;AST.svg&quot; alt=&quot;ast&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;So we have &lt;code&gt;%union&lt;&#x2F;code&gt; and &lt;code&gt;%type&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bison&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bison &quot;&gt;&lt;code class=&quot;language-bison&quot; data-lang=&quot;bison&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;%union &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    int int_value;
&lt;&#x2F;span&gt;&lt;span&gt;    double double_value;
&lt;&#x2F;span&gt;&lt;span&gt;    char* string_value;
&lt;&#x2F;span&gt;&lt;span&gt;    ASTNode* node;
&lt;&#x2F;span&gt;&lt;span&gt;    SymbolType type;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;%token &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; TYPE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;%token &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string_value&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; IDENTIFY
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;%token &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int_value&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; INT_LITERAL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;%token &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double_value&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; DOUBLE_LITERAL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;%token &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; STRING INT DOUBLE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;%token &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; IF ELSE WHILE FOR
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;%token &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; LESSEQ GREATEREQ EQUAL NONEQUAL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;%token &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; PRINT
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;%left &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; LESSEQ GREATEREQ EQUAL NONEQUAL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;%left &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;%left &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;%type &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; statement assignStatement statementList block ifStatement whileStatement defineStatement printStatement
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;%type &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; expression referenceExpression assign atomExpression unaryExpression binaryOrAtomExpression
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;%type &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; program
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The whole program is a &lt;code&gt;CompoundStatement&lt;&#x2F;code&gt;, we need to store the result in a global variable:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;CompoundStatement *result;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we can finally add the behavior part in the &lt;code&gt;bison&lt;&#x2F;code&gt; code, take &lt;code&gt;program&lt;&#x2F;code&gt; and &lt;code&gt;binaryOrAtomExpression&lt;&#x2F;code&gt; as an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bison&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bison &quot;&gt;&lt;code class=&quot;language-bison&quot; data-lang=&quot;bison&quot;&gt;&lt;span&gt;program:
&lt;&#x2F;span&gt;&lt;span&gt;    program statement           {add_statement((CompoundStatement *)$1, (Statement*)$2);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    |                           {result=create_compound_statement(); $$=(ASTNode*)result;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;binaryOrAtomExpression:
&lt;&#x2F;span&gt;&lt;span&gt;    unaryExpression                                     {$$=$1;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression &amp;#39;+&amp;#39; unaryExpression        {$$=(ASTNode*)create_binary_operation_result(&amp;#39;+&amp;#39;,(RValue*)$1,(RValue*)$3);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression &amp;#39;-&amp;#39; unaryExpression        {$$=(ASTNode*)create_binary_operation_result(&amp;#39;-&amp;#39;,(RValue*)$1,(RValue*)$3);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression &amp;#39;*&amp;#39; unaryExpression        {$$=(ASTNode*)create_binary_operation_result(&amp;#39;*&amp;#39;,(RValue*)$1,(RValue*)$3);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression &amp;#39;&#x2F;&amp;#39; unaryExpression        {$$=(ASTNode*)create_binary_operation_result(&amp;#39;&#x2F;&amp;#39;,(RValue*)$1,(RValue*)$3);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression &amp;#39;&amp;lt;&amp;#39; unaryExpression        {$$=(ASTNode*)create_binary_operation_result(&amp;#39;&amp;lt;&amp;#39;,(RValue*)$1,(RValue*)$3);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression &amp;#39;&amp;gt;&amp;#39; unaryExpression        {$$=(ASTNode*)create_binary_operation_result(&amp;#39;&amp;gt;&amp;#39;,(RValue*)$1,(RValue*)$3);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression LESSEQ     unaryExpression {$$=(ASTNode*)create_binary_operation_result(LESSEQ, (RValue*)$1,(RValue*)$3);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression GREATEREQ  unaryExpression {$$=(ASTNode*)create_binary_operation_result(GREATEREQ,(RValue*)$1,(RValue*)$3);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression EQUAL      unaryExpression {$$=(ASTNode*)create_binary_operation_result(EQUAL, (RValue*)$1,(RValue*)$3);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    | binaryOrAtomExpression NONEQUAL   unaryExpression {$$=(ASTNode*)create_binary_operation_result(NONEQUAL, (RValue*)$1,(RValue*)$3);&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;symbol-table-and-scope&quot;&gt;Symbol Table and Scope&lt;&#x2F;h3&gt;
&lt;p&gt;Since this compiler does not support multiple source files and we don&#x27;t have complex data types, design of symbol table here is relatively simple, and a global symbol table stack can be maintained to handle scopes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef enum &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Bool,
&lt;&#x2F;span&gt;&lt;span&gt;    Int,
&lt;&#x2F;span&gt;&lt;span&gt;    String,
&lt;&#x2F;span&gt;&lt;span&gt;    Double,
&lt;&#x2F;span&gt;&lt;span&gt;    Array
&lt;&#x2F;span&gt;&lt;span&gt;} SymbolType;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    SymbolType type;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; mutable;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;*name;
&lt;&#x2F;span&gt;&lt;span&gt;    size_t namespace_id;
&lt;&#x2F;span&gt;&lt;span&gt;} Symbol;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Symbol base;
&lt;&#x2F;span&gt;&lt;span&gt;    SymbolType elementType;
&lt;&#x2F;span&gt;&lt;span&gt;    size_t length;
&lt;&#x2F;span&gt;&lt;span&gt;} ArraySymbol;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    size_t length;
&lt;&#x2F;span&gt;&lt;span&gt;    Symbol **symbols;
&lt;&#x2F;span&gt;&lt;span&gt;    size_t namespace_id;
&lt;&#x2F;span&gt;&lt;span&gt;} SymbolTableFrame;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    size_t length;
&lt;&#x2F;span&gt;&lt;span&gt;    SymbolTableFrame **frames;
&lt;&#x2F;span&gt;&lt;span&gt;} SymbolTableStack;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;SymbolTableStack symbol_table_stack = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;push_frame&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;pop_frame&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;add_symbol&lt;&#x2F;span&gt;&lt;span&gt;(Symbol *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;symbol&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Symbol *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_symbol&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;get_symbol&lt;&#x2F;code&gt; look for symbol which name is &lt;code&gt;name&lt;&#x2F;code&gt; for the top to button of the stack.&lt;&#x2F;p&gt;
&lt;p&gt;On &lt;code&gt;add_symbol&lt;&#x2F;code&gt;, the &lt;code&gt;namespace_id&lt;&#x2F;code&gt; of &lt;code&gt;symbol&lt;&#x2F;code&gt; is set to the &lt;code&gt;namespace_id&lt;&#x2F;code&gt; of &lt;code&gt;frame&lt;&#x2F;code&gt;, which appears as part of the variable name during code generation.&lt;&#x2F;p&gt;
&lt;p&gt;When parsing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bison&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bison &quot;&gt;&lt;code class=&quot;language-bison&quot; data-lang=&quot;bison&quot;&gt;&lt;span&gt;block:
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;{&amp;#39; {push_frame();&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt; statementList &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;   {$$=$3;pop_frame();&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在使用 &lt;code&gt;symbol&lt;&#x2F;code&gt; 时，由于刚刚进入的 &lt;code&gt;block&lt;&#x2F;code&gt; 对应的 &lt;code&gt;frame&lt;&#x2F;code&gt; 在栈顶附近，故会优先在这个 &lt;code&gt;frame&lt;&#x2F;code&gt; 中寻找名字为 &lt;code&gt;name&lt;&#x2F;code&gt;的符号，在这个 &lt;code&gt;frame&lt;&#x2F;code&gt; 中找不到时才会逐级向上寻找，这样就实现了作用域。&lt;&#x2F;p&gt;
&lt;p&gt;Every time we encounter a &lt;code&gt;block&lt;&#x2F;code&gt;, just &lt;code&gt;push&lt;&#x2F;code&gt; a &lt;code&gt;frame&lt;&#x2F;code&gt;, and when you leave the &lt;code&gt;block&lt;&#x2F;code&gt;, you &lt;code&gt;pop&lt;&#x2F;code&gt; the &lt;code&gt;frame&lt;&#x2F;code&gt; out, so that the &lt;code&gt;symbol&lt;&#x2F;code&gt; declared in the &lt;code&gt;block&lt;&#x2F;code&gt; will get the corresponding &lt;code&gt;block&lt;&#x2F;code&gt;&#x27;s &lt;code&gt;namespace_id&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;When using &lt;code&gt;symbol&lt;&#x2F;code&gt;, since the &lt;code&gt;frame&lt;&#x2F;code&gt; corresponding to the &lt;code&gt;block&lt;&#x2F;code&gt; you just entered is near the top of the stack, the symbol named &lt;code&gt;name&lt;&#x2F;code&gt; will be searched first in this &lt;code&gt;frame&lt;&#x2F;code&gt;, and searched up level by level if not found. In such a way we implemented scoping of variables.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;target-code-generation&quot;&gt;Target Code Generation&lt;&#x2F;h3&gt;
&lt;p&gt;In order to let our software cross-platform and make use of llvm&#x27;s excellent code optimization capabilities&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, our target code is LLVM IR.&lt;&#x2F;p&gt;
&lt;p&gt;LLVM IR兼有高级语言和汇编的特点，比如：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;LLVM IR is strongly typed&lt;&#x2F;li&gt;
&lt;li&gt;Many control structures in LLVM IR are similar to assembly, such as if, while and other control structures are represented by &lt;code&gt;br&lt;&#x2F;code&gt; jumps&lt;&#x2F;li&gt;
&lt;li&gt;The &quot;local variable&quot; in LLVM IR is quite a &quot;register&quot;, but LLVM IR has an infinite number of such kind of &quot;registers&quot;&lt;&#x2F;li&gt;
&lt;li&gt;LLVM IR is an SSA form of IR, so a &quot;register&quot; can only be assigned a value once.&lt;&#x2F;li&gt;
&lt;li&gt;Many operations of LLVM are similar to assembly code, for example &lt;code&gt;%a = add i32 1, %b&lt;&#x2F;code&gt; is similar to &lt;code&gt;add %a, 1, %b&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;variable-definition&quot;&gt;Variable definition&lt;&#x2F;h4&gt;
&lt;p&gt;Use &lt;code&gt;alloca&lt;&#x2F;code&gt; to allocate a space on stack:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;llvm&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-llvm &quot;&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%i_0&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;alloca i32
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note &lt;code&gt;alloca&lt;&#x2F;code&gt; returns an address.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;assign-value-to-variable&quot;&gt;Assign value to variable&lt;&#x2F;h4&gt;
&lt;p&gt;Use &lt;code&gt;store&lt;&#x2F;code&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;llvm&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-llvm &quot;&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;store i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%i_0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It means we put &lt;code&gt;0&lt;&#x2F;code&gt; into the space pointed by &lt;code&gt;%i_0&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;read-the-value-of-variable&quot;&gt;Read the value of variable&lt;&#x2F;h4&gt;
&lt;p&gt;Use &lt;code&gt;load&lt;&#x2F;code&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;llvm&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-llvm &quot;&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%temp&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;load i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%i_0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which means take the value in the space pointed by &lt;code&gt;%i_0&lt;&#x2F;code&gt; to register &lt;code&gt;%temp&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;calculation&quot;&gt;Calculation&lt;&#x2F;h4&gt;
&lt;p&gt;Take &lt;code&gt;+&lt;&#x2F;code&gt; as an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;llvm&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-llvm &quot;&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%temp_22&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%temp_21&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which means put &lt;code&gt;%temp_21 + 1&lt;&#x2F;code&gt; into &lt;code&gt;%temp_22&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For float numbers, use &lt;code&gt;fadd&lt;&#x2F;code&gt; instead of &lt;code&gt;add&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;compare&quot;&gt;Compare&lt;&#x2F;h4&gt;
&lt;p&gt;Use &lt;code&gt;icmp&lt;&#x2F;code&gt; and the way you want to compare:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;llvm&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-llvm &quot;&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%temp_2&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;icmp slt i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%temp_1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;slt&lt;&#x2F;code&gt; is &quot;Signed Less Than&quot;, ie. &lt;code&gt;&amp;lt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For floats, there are &lt;code&gt;fcmp&lt;&#x2F;code&gt;, &lt;code&gt;olt&lt;&#x2F;code&gt;, etc.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;jump&quot;&gt;Jump&lt;&#x2F;h4&gt;
&lt;p&gt;Use &lt;code&gt;br&lt;&#x2F;code&gt; for jumping&lt;&#x2F;p&gt;
&lt;h5 id=&quot;conditionless&quot;&gt;Conditionless&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;llvm&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-llvm &quot;&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;br label &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%label1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;with-condition&quot;&gt;With condition&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;llvm&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-llvm &quot;&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;br i1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%condition&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;label &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%condition_true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;label &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;%condition_false
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s all we need to know for accomplishing our task.&lt;&#x2F;p&gt;
&lt;p&gt;Then let&#x27;s do the code generation.&lt;&#x2F;p&gt;
&lt;p&gt;Take variable declaration as an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_code&lt;&#x2F;span&gt;&lt;span&gt;(DeclareStatement *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%%%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%zu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; = alloca &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, node-&amp;gt;variable-&amp;gt;name, node-&amp;gt;variable-&amp;gt;namespace_id, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type_name&lt;&#x2F;span&gt;&lt;span&gt;(node-&amp;gt;variable));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Generate an assign statement if there is an initial value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(node-&amp;gt;initial != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        ((Statement *) (node-&amp;gt;initial))-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generate_code&lt;&#x2F;span&gt;&lt;span&gt;((Statement *) (node-&amp;gt;initial));
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Assign:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_code&lt;&#x2F;span&gt;&lt;span&gt;(AssignStatement *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    ((LValue *) (node-&amp;gt;lhs))-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generate_lvalue_code&lt;&#x2F;span&gt;&lt;span&gt;((LValue *) (node-&amp;gt;lhs));
&lt;&#x2F;span&gt;&lt;span&gt;    node-&amp;gt;rhs-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generate_rvalue_code&lt;&#x2F;span&gt;&lt;span&gt;(node-&amp;gt;rhs);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;*rvalue_ir = node-&amp;gt;rhs-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rvalue_ir&lt;&#x2F;span&gt;&lt;span&gt;(node-&amp;gt;rhs);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;*lvalue_ir = node-&amp;gt;lhs-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lvalue_ir&lt;&#x2F;span&gt;&lt;span&gt;(node-&amp;gt;lhs);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;store &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s %s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type_string&lt;&#x2F;span&gt;&lt;span&gt;(((RValue *) (node-&amp;gt;lhs))-&amp;gt;type),
&lt;&#x2F;span&gt;&lt;span&gt;           rvalue_ir,
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type_string&lt;&#x2F;span&gt;&lt;span&gt;(((RValue *) (node-&amp;gt;lhs))-&amp;gt;type),
&lt;&#x2F;span&gt;&lt;span&gt;           lvalue_ir);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;free&lt;&#x2F;span&gt;&lt;span&gt;(rvalue_ir);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;free&lt;&#x2F;span&gt;&lt;span&gt;(lvalue_ir);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For an expression we heed to handle it&#x27;s rvalue and lvalue separately.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; rvalue needs to read to the register first
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_rvalue_code&lt;&#x2F;span&gt;&lt;span&gt;(VariableReference *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rValue&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;*rvalue_ir_string = ((RValue *) rValue)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rvalue_ir&lt;&#x2F;span&gt;&lt;span&gt;((RValue*) rValue);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;*lvalue_ir_string = ((LValue*) rValue)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lvalue_ir&lt;&#x2F;span&gt;&lt;span&gt;((LValue *) rValue);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; = load &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;           rvalue_ir_string,
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type_name&lt;&#x2F;span&gt;&lt;span&gt;(rValue-&amp;gt;variable),
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type_name&lt;&#x2F;span&gt;&lt;span&gt;(rValue-&amp;gt;variable),
&lt;&#x2F;span&gt;&lt;span&gt;           lvalue_ir_string);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;free&lt;&#x2F;span&gt;&lt;span&gt;(rvalue_ir_string);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;free&lt;&#x2F;span&gt;&lt;span&gt;(lvalue_ir_string);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; while lvalue doesn&amp;#39;t
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_lvalue_code&lt;&#x2F;span&gt;&lt;span&gt;(VariableReference *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lValue&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; variable name when it is used as a lvalue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static char &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;lvalue_ir&lt;&#x2F;span&gt;&lt;span&gt;(VariableReference *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lValue&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;*result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;malloc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;128&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sprintf&lt;&#x2F;span&gt;&lt;span&gt;(result, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%%%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%zu&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, lValue-&amp;gt;variable-&amp;gt;name, lValue-&amp;gt;variable-&amp;gt;namespace_id);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; result;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; variable name when it is used as a rvalue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static char &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;rvalue_ir&lt;&#x2F;span&gt;&lt;span&gt;(VariableReference *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rValue&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;*result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;malloc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;128&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sprintf&lt;&#x2F;span&gt;&lt;span&gt;(result, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;temp_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%zu&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, rValue-&amp;gt;temp_register_id);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; result;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;How to generate other codes can be easily figured out by the reader. If you are interested in my implementation, please &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;longfangsong&#x2F;toylang&#x2F;tree&#x2F;deprecated&quot;&gt;read the code&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;compilation-principle&quot;&gt;Compilation principle&lt;&#x2F;h3&gt;
&lt;p&gt;Three famous animal books:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&quot;Compilers: Principles, Techniques, and Tools&quot; - &quot;Dragon Book&quot;&lt;&#x2F;li&gt;
&lt;li&gt;&quot;Modern Compiler Implementation&quot; - &quot;Tiger Book&quot;&lt;&#x2F;li&gt;
&lt;li&gt;&quot;Advanced Compiler Design and Implementation&quot; - &quot;Whale Book&quot;, however this book is mostly about backend optimization&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;lex-grammar-you-may-refer-to&quot;&gt;Lex &amp;amp; Grammar you may refer to&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.lysator.liu.se&#x2F;c&#x2F;ANSI-C-grammar-l.html&quot;&gt;Lex for C&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.lysator.liu.se&#x2F;c&#x2F;ANSI-C-grammar-y.html&quot;&gt;Grammar for C&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;llvm-ir&quot;&gt;LLVM IR&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;llvm.org&#x2F;&quot;&gt;llvm official cite&lt;&#x2F;a&gt;, especially its &lt;a href=&quot;https:&#x2F;&#x2F;llvm.org&#x2F;docs&#x2F;LangRef.html&quot;&gt;language reference&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mapping-high-level-constructs-to-llvm-ir.readthedocs.io&#x2F;&quot;&gt;mapping high level constructs to llvm ir&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;The code will use object-oriented programming in C language, see &lt;a href=&quot;https:&#x2F;&#x2F;longfangsong.github.io&#x2F;en&#x2F;build-a-compiler-in-the-easiest-way&#x2F;.&quot;&gt;Implementing object-oriented programming in pure C&lt;&#x2F;a&gt;. Using this technique makes me feel that using C language is far more better than using C++ (Linus is not wrong at all).&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;In fact, I did a little bit of semantic analysis when constructing the AST.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;Actually it&#x27;s because I&#x27;m lazy. ;)&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Regular Expressions &lt;-&gt; Regular Grammar</title>
        <published>2018-04-12T20:38:07.894+00:00</published>
        <updated>2018-04-12T20:38:07.894+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://longfangsong.github.io/en/regex-to-and-from-syntax/"/>
        <id>https://longfangsong.github.io/en/regex-to-and-from-syntax/</id>
        
        <content type="html" xml:base="https://longfangsong.github.io/en/regex-to-and-from-syntax/">&lt;h2 id=&quot;basic-theory&quot;&gt;Basic Theory&lt;&#x2F;h2&gt;
&lt;p&gt;Theoretical stuff gives everyone a headache, so I&#x27;ll keep it minimal and just cover a few points.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;regular-expressions&quot;&gt;Regular Expressions&lt;&#x2F;h3&gt;
&lt;p&gt;Regular expressions are similar to the ones we commonly use, but for simplicity we only use three operators: $\cdot$, $*$ and $|$. In fact, most other operators&#x27; functionality can be replaced by these three operators&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$\cdot$ represents concatenation of two regular strings, like $a\cdot b$ matches ab, $\cdot$ are usually omitted by convention.&lt;&#x2F;li&gt;
&lt;li&gt;$|$ represents union, like $a|b$ can match either $a$ or $b$&lt;&#x2F;li&gt;
&lt;li&gt;$*$ represents zero or more repetitions, like $a*$ can match $\epsilon$, $a$, $aa$, $aaa$ etc., where $\epsilon$ represents empty string.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;By convention, $*$ has highest precedence, followed by $\cdot$, and $|$ has lowest precedence. Of course we also have $()$ to indicate priority.
Obviously:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$\cdot$ and $|$ are associative&lt;&#x2F;li&gt;
&lt;li&gt;$\cdot$ is distributive over $|$, like $a(b|c)\leftrightarrow ab|ac$&lt;&#x2F;li&gt;
&lt;li&gt;$|$ is commutative&lt;&#x2F;li&gt;
&lt;li&gt;$*$ is idempotent, $(a*)* \leftrightarrow a*$&lt;&#x2F;li&gt;
&lt;li&gt;$\epsilon|a\leftrightarrow a$，$\epsilon \cdot a\leftrightarrow a$，$a \cdot \epsilon \leftrightarrow a$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;regular-grammar-productions&quot;&gt;Regular Grammar Productions&lt;&#x2F;h3&gt;
&lt;p&gt;A production is something like this:&lt;&#x2F;p&gt;
&lt;p&gt;$$
A \rightarrow \epsilon
$$
or
$$
A \rightarrow abc
$$
or
$$
B \rightarrow aA
$$
or
$$
aC \rightarrow aAbBc
$$
or
$$
aAb \rightarrow Bac
$$
or
$$
A \rightarrow a|b*
$$&lt;&#x2F;p&gt;
&lt;p&gt;The meaning is that the thing on the left represents the thing on the right. By convention we use lowercase letters to represent actual letters (called terminals) and uppercase letters to represent symbols that stand for other letters (called non-terminals).&lt;&#x2F;p&gt;
&lt;p&gt;Just having an intuitive understanding is enough - the formal definition just gives headaches without much value.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;regular-grammar&quot;&gt;Regular Grammar&lt;&#x2F;h3&gt;
&lt;p&gt;A regular grammar&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; is:&lt;&#x2F;p&gt;
&lt;p&gt;A regular grammar is a set of productions&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; that satisfy these conditions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The left side has exactly one non-terminal&lt;&#x2F;li&gt;
&lt;li&gt;The right side is:
&lt;ul&gt;
&lt;li&gt;$\epsilon$&lt;&#x2F;li&gt;
&lt;li&gt;A terminal&lt;&#x2F;li&gt;
&lt;li&gt;A terminal $\cdot$ a non-terminal&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These productions are clearly convenient for substitution and later converting to NFA.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;practice&quot;&gt;Practice&lt;&#x2F;h2&gt;
&lt;p&gt;In practice, the algorithms in textbooks are too theoretical and have many issues in actual implementation. A lot of considerations are needed when implementing yourself.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s analyze with my code. The code is written in Kotlin, project at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;longfangsong&#x2F;RegexCalculator&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;regular-expression&quot;&gt;Regular Expression&lt;&#x2F;h3&gt;
&lt;p&gt;First we abstract the elements in regular expressions as an interface&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;RegexComponent
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So what should implement this interface?&lt;&#x2F;p&gt;
&lt;h4 id=&quot;letters&quot;&gt;Letters&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;abstract class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Character&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span&gt;name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RegexComponent&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Comparable&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Character&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;NonTerminalCharacter&lt;&#x2F;span&gt;&lt;span&gt;(name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Character&lt;&#x2F;span&gt;&lt;span&gt;(name)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;open class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TerminalCharacter&lt;&#x2F;span&gt;&lt;span&gt;(name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Character&lt;&#x2F;span&gt;&lt;span&gt;(name)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;nullCharacter &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TerminalCharacter&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ε&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;results-of-operations-between-regular-expression-elements&quot;&gt;Results of Operations Between Regular Expression Elements&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Concated&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;components: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;RegexComponent&amp;gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RegexComponent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optioned&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;components: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;RegexComponent&amp;gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RegexComponent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Repeated&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;toRepeat: RegexComponent) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RegexComponent
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Initially I was uncertain about where to put the business logic for various operations, because while I wanted to maximize use of distributive and associative laws to simplify later work, this inevitably required runtime type checking, which feels like an anti-pattern since Replace Conditional with Polymorphism is typically recommended. However polymorphism actually makes this problem harder and would cause Duplicated Code, like when applying distributive law over $|$ we need to check for Optioned type separately in Character, Repeated and Concated. If we try using Polymorphism to add a property to all RegexComponents to return what should be distributed out, the code would unnecessarily increase and I couldn&#x27;t even name this property properly (which usually indicates introducing it is not a good idea).&lt;&#x2F;p&gt;
&lt;p&gt;I finally decided to just put all business logic in one place, since this kind of academic problem won&#x27;t have changing requirements anyway.&lt;&#x2F;p&gt;
&lt;p&gt;So I made a factory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;RegexComponentFactory&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;concated&lt;&#x2F;span&gt;&lt;span&gt;(component1: RegexComponent, component2: RegexComponent): RegexComponent
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;optioned&lt;&#x2F;span&gt;&lt;span&gt;(component1: RegexComponent, component2: RegexComponent): RegexComponent
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;repeated&lt;&#x2F;span&gt;&lt;span&gt;(component: RegexComponent): RegexComponent
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since it&#x27;s a factory, might as well add methods for constructing RegexComponent from strings:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;	* Add omitted &amp;#39;.&amp;#39; operators
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;	*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;addOmittedDotOperator&lt;&#x2F;span&gt;&lt;span&gt;(str: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;theString = StringBuilder()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; ((index, ch) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; str.withIndex()) {
&lt;&#x2F;span&gt;&lt;span&gt;        theString.append(ch)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (index != str.length - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ((ch.isLowerCase() || ch.isDigit() || ch == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;                    (str[index + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].isLowerCase() || str[index + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].isDigit() || str[index + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) ||
&lt;&#x2F;span&gt;&lt;span&gt;                    (ch == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;amp;&amp;amp; !isRegexOperator(str[index + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]) &amp;amp;&amp;amp; str[index + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] != &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)) {
&lt;&#x2F;span&gt;&lt;span&gt;                theString.append(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; theString.toString()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* Actual construction process
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fromFormalString&lt;&#x2F;span&gt;&lt;span&gt;(string: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): RegexComponent {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (string == &amp;quot;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; nullCharacter
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return when&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            string.startsWith(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &amp;amp;&amp;amp; pairedRightBracketIndex(string) == string.length - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                fromFormalString(eraseUselessBracketPairs(string))
&lt;&#x2F;span&gt;&lt;span&gt;            string.length == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                TerminalCharacter(string)
&lt;&#x2F;span&gt;&lt;span&gt;            string.firstLayerContain(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                string.splitFirstLayerBy(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).map { fromFormalString(it) }.reduce { acc, regexPart -&amp;gt; acc or regexPart }
&lt;&#x2F;span&gt;&lt;span&gt;            string.firstLayerContain(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                string.splitFirstLayerBy(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).map { fromFormalString(it) }.reduce { acc, regexPart -&amp;gt; acc concat regexPart }
&lt;&#x2F;span&gt;&lt;span&gt;            string.endsWith(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (string.startsWith(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)) {
&lt;&#x2F;span&gt;&lt;span&gt;                    fromFormalString(string.slice(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; until string.length - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)).repeat()
&lt;&#x2F;span&gt;&lt;span&gt;                } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                    fromFormalString(string.slice(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; until string.length - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)).repeat()
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throw&lt;&#x2F;span&gt;&lt;span&gt; IllegalArgumentException(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Can not construct from string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$string&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span&gt; (_: StringIndexOutOfBoundsException) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throw&lt;&#x2F;span&gt;&lt;span&gt; IllegalArgumentException(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Can not construct from string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$string&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span&gt; (_: IllegalArgumentException) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throw&lt;&#x2F;span&gt;&lt;span&gt; IllegalArgumentException(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Can not construct from string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$string&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;	* Construct RegexComponent from string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;	*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fromString&lt;&#x2F;span&gt;&lt;span&gt;(string: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): RegexComponent {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; fromFormalString(addOmittedDotOperator(string))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Some helper functions used above can be found in &lt;code&gt;Tools.kt&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;	* Check if @arg char is a regex operator
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;	*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;isRegexOperator&lt;&#x2F;span&gt;&lt;span&gt;(char: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Char&lt;&#x2F;span&gt;&lt;span&gt;) = char == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; || char == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; || char == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;	* Find matching &amp;#39;)&amp;#39; for a &amp;#39;(&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;	*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;pairedRightBracketIndex&lt;&#x2F;span&gt;&lt;span&gt;(str: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, leftBracketIndex: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;	* Remove useless brackets pairs from string sides
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;	*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;eraseUselessBracketPairs&lt;&#x2F;span&gt;&lt;span&gt;(str: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;	* Check if a string contains char at first layer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;	* &amp;quot;First layer&amp;quot; means outside all brackets
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;	*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span&gt; String.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;firstLayerContain&lt;&#x2F;span&gt;&lt;span&gt;(char: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Char&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Boolean
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;	* Split first layer by @arg char
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;	*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span&gt; String.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;splitFirstLayerBy&lt;&#x2F;span&gt;&lt;span&gt;(char: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Char&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At this point, we can make the computer &quot;understand&quot; a regex from our input string.&lt;&#x2F;p&gt;
&lt;p&gt;Now let&#x27;s look at the grammar side.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;regular-grammar-1&quot;&gt;Regular Grammar&lt;&#x2F;h3&gt;
&lt;p&gt;For regular grammar, first we need productions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Generator&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;from: NonTerminalCharacter,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;to: RegexComponent
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our grammar follows the regular grammar from the textbook:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;kotlin&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-kotlin &quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Grammar&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;nonTerminals: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;NonTerminalCharacter&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;terminals: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;TerminalCharacter&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;rules: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Generator&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;start: NonTerminalCharacter
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We know we can initialize with some Generators
&lt;&#x2F;span&gt;&lt;span&gt;	constructor(rles: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Collection&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Generator&amp;gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		rles.map { it.from }.toSet(),
&lt;&#x2F;span&gt;&lt;span&gt;		rles.map { it.alphabet }.reduce { acc, set -&amp;gt; acc + set },
&lt;&#x2F;span&gt;&lt;span&gt;		rles.toSet(),
&lt;&#x2F;span&gt;&lt;span&gt;		rles.minBy { it.from }!!.from
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;conversion&quot;&gt;Conversion&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;regular-expression-rightarrow-regular-grammar&quot;&gt;Regular Expression $\rightarrow$ Regular Grammar&lt;&#x2F;h4&gt;
&lt;p&gt;First we construct a production with a new non-terminal on the left and the regex to convert on the right.&lt;&#x2F;p&gt;
&lt;p&gt;For any production, we may face these situations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The production&#x27;s right side has outermost $\cdot$ operation
In this case, we need to consider:
- If the right side ends with a non-terminal, like $A → a ⋅ b ⋅ B$ or $A → ( a | b ) ⋅ B$ or $A → a ∗ ⋅ B$, we need to analyze the type of expression left of this non-terminal:
- If this expression has outermost $\cdot$ operation, we can directly combine the rightmost two letters:
$$
C → b ⋅ B
$$
Then add the front part:
$$
A → a ⋅ C
$$
- We won&#x27;t encounter cases where this expression has outermost $|$ operation because we already distributed $|$ operator using distributive law&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;
- If this expression has outermost $*$ operation, we can construct:
$$
A → a A
$$
and
$$
A → B
$$
- Otherwise, it&#x27;s an expression like
$$
A → a ⋅ b ⋅ c
$$
We can convert it to
$$
A → a ⋅ B
$$
$$
B → b c
$$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The production&#x27;s right side has outermost $|$ operation, like
$$
A → a | b | c
$$
Just convert to
$$
A → a
$$
and
$$
A → b
$$
and
$$
A → c
$$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The production&#x27;s right side has outermost $*$ operation, like
$$
A → a ∗
$$
This is simplest, just convert to:
$$
A → ϵ
$$
and
$$
A → a ⋅ A
$$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We just need to repeatedly apply these rules to productions that don&#x27;t yet conform to regular grammar until no production can be further simplified.&lt;&#x2F;p&gt;
&lt;p&gt;At this point the result is not completely regular grammar yet, as there are productions like $A\rightarrow B$ that directly derive to another non-terminal.&lt;&#x2F;p&gt;
&lt;p&gt;We can replace all $A$ in other productions with $B$ and remove this production.&lt;&#x2F;p&gt;
&lt;p&gt;Also remove any unused productions.&lt;&#x2F;p&gt;
&lt;p&gt;After this we&#x27;ve completed converting regex to regular grammar.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;regular-grammar-rightarrow-regular-expression&quot;&gt;Regular Grammar $\rightarrow$ Regular Expression&lt;&#x2F;h4&gt;
&lt;p&gt;To convert a regular grammar to regex, just follow this algorithm:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Combine productions with same left side but different right sides using $|$
Like $B\rightarrow b$ and $B → b ⋅ A$ and $B → b ⋅ B$ becomes $B\rightarrow a|b\cdot A|b\cdot B$&lt;&#x2F;li&gt;
&lt;li&gt;Convert productions where left side appears in right side to ones where it doesn&#x27;t, like:
$A → a ⋅ A$ becomes $A\rightarrow a*$
$B → a | b ⋅ A | b ⋅ B$ becomes $B \rightarrow b* \cdot a|b* \cdot b \cdot A$&lt;&#x2F;li&gt;
&lt;li&gt;Take a production whose left side is not the grammar start symbol, replace its left side non-terminal in other productions with its corresponding string&lt;&#x2F;li&gt;
&lt;li&gt;Repeat 3. until only one production remains.&lt;&#x2F;li&gt;
&lt;li&gt;The right side of this production is what we want.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;See code for details.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;After defining these three operators, empty string $\epsilon$ and empty set $\varnothing$ on a finite alphabet, we get something magical: Kleene algebra&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;We&#x27;re actually talking about right-linear grammar here, there&#x27;s also left-linear grammar, both called regular grammars. We use right-linear grammar as example for simplicity&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;Technically regular grammar also includes alphabet, terminals, non-terminals etc., but these can all be derived from productions so they&#x27;re not that important&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;This interface isn&#x27;t just for regex parts, a better name would be &quot;implements Kleene algebra&quot; but that looks too deep...&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;5&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;5&lt;&#x2F;sup&gt;
&lt;p&gt;But I still kept this branch in the code&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
</feed>
